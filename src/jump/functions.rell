// ----------------
// Inspectors
// ----------------

function jump_has_enchanted(pg: player_game, p: piece, given_is_enchanted_jumper: boolean): boolean {
    val found = active_jump@? { pg, p };

    if (found != null) {
        require(given_is_enchanted_jumper, "This piece is enchanted jumper, but the [given_is_enchanted_jumper] flag was not set?"); 
        return true;
    } else {
        require(not given_is_enchanted_jumper, "This piece is not an enchanted jumper, but the [given_is_enchanted_jumper] flag was set?"); 
        return false;
    }
}

// ----------------
// Mutators
// ----------------

// When a jump card is played, we need to set up the jump on the board.
function jump_create(owned_by: player_game, card: card, piece: piece) {
    create active_jump (
        .played_by = owned_by,
        .card = card,
        .piece = piece
    );
}

function jump_remove_enchanted(owned_by: player_game) {
    delete active_jump@? {.played_by == owned_by};
}