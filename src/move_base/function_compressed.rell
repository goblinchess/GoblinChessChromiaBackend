
// ------------------------------------------------------------------------------
// Find all compressed moves
// ------------------------------------------------------------------------------
function move_base_compressed_find_all_moves(game_id: integer, gme: game): map<integer, move_compressed> {

    val m_list = (m: move, t: turn) @* { 
        m.turn == t,
        //m.piece_moved == p,
        t.game == gme // Everything from the same game should be searched
        } 
    (
        turn_nr = t.number,
        from_position = m.from_position, // 0-63
        to_position = m.to_position, // 0-63
        is_castle = m.is_castle,
        is_check = m.is_check,
        comp_str = m.board_compressed_str
    );

    val ret_map = map<integer, move_compressed>();
    for (m in m_list) {

        // Return the move data
        val m_data =  move_compressed(
            turn_nr = m.turn_nr,
            from_position = m.from_position,
            to_position = m.to_position,
            is_castle = m.is_castle, // We could have solved this via "rook_from" and "rook_to" but we didn't save that in the [move] entity.
            is_check = m.is_check,
            board_compressed_str = m.comp_str
        );

        ret_map[m.turn_nr] = m_data;
    }
   
    log("game_id: " + game_id + " - Found " + ret_map.size() + " moves");
    return ret_map;
}


function move_base_compressed_find_all_skipped_moves(game_id: integer, gme: game): map<integer, skipped_move_compressed> {

    val sm_list = (sm: skipped_move, t: turn) @* { 
        sm.turn == t,
        t.game == gme // Everything from the same game should be searched
        } 
    (
        turn_nr = t.number,
        is_check = sm.is_check,
        comp_str = sm.board_compressed_str
    );

    val ret_map = map<integer, skipped_move_compressed>();
    for (sm in sm_list) {

        // Return the skipped move data
        val sm_data =  skipped_move_compressed(
            turn_nr = sm.turn_nr,
            is_check = sm.is_check,
            board_compressed_str = sm.comp_str
        );

        ret_map[sm.turn_nr] = sm_data;
    }
   
    log("game_id: " + game_id + " - Found " + ret_map.size() + " skipped moves");
    return ret_map;
}