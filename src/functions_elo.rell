// Elo rating system
// https://en.wikipedia.org/wiki/Elo_rating_system
// Generated by Cursor
namespace elo {
    // K-factor constants (can be adjusted based on your needs)
    val K_FACTOR_DEFAULT = 32;
    val K_FACTOR_HIGH_RATED = 24; // for players > 2100
    val K_FACTOR_MASTER = 16;     // for players > 2400

    // Result constants
    val RESULT_WIN = 1.0;
    val RESULT_LOSS = 0.0;
    val RESULT_DRAW = 0.5;

    // ------------------- 
    // Public Functions
    // ------------------- 
    // Public Function
    // Returns the new ratings after a draw
    function update_chess_ratings_on_draw(
        player1_rating: integer,
        player2_rating: integer,
    ): (integer, integer) {
        return update_chess_ratings(player1_rating, player2_rating, false, true);
    }

    // Public Function
    // Returns the new ratings after a win
    function update_chess_ratings_on_win(
        player1_rating: integer,
        player2_rating: integer,
        player1_won: boolean
    ): (integer, integer) {
        return update_chess_ratings(player1_rating, player2_rating, player1_won, false);
    }


    // ------------------- 
    // Private Functions
    // ------------------- 
    // Calculate expected score based on ratings
    function calculate_expected_score(rating_diff: integer): decimal {
        val power = rating_diff / 400.0;
        val x = ten_to_the_power_of(power); 
        return 1.0 / (1.0 + x);
    }

   // We want to rate difference as an absolute value
   // For draw it matters who is higher
   function get_rate_diff(
        player1_rating: integer,
        player2_rating: integer,
   ): (integer, boolean) {
        if (player1_rating > player2_rating) {
            return (player1_rating - player2_rating, true);
        } 
        else {
            return (player2_rating - player1_rating, false);
        }
   }


    // Helper function to update both players' ratings after a match
    function update_chess_ratings(
        player1_rating: integer,
        player2_rating: integer,
        player1_won: boolean,
        draw: boolean
    ): (integer, integer) {
        
        // This is ugly, but we need it since our power_of function
        // cannot handle negative numbers.
        val (rating_diff: integer, p1_is_higher: boolean) = get_rate_diff(player1_rating, player2_rating);

        val expected_score = calculate_expected_score(rating_diff);
        if (draw) {
            return update_draw_ratings(player1_rating, player2_rating, expected_score, p1_is_higher);
        }
        else {
            return update_win_ratings(player1_rating, player2_rating, expected_score, player1_won);
        }
    }

    function update_draw_ratings(
        player1_rating: integer,
        player2_rating: integer,
        expected_score: decimal,
        p1_is_higher: boolean
    ): (integer, integer) {
        val draw_points_diff = (K_FACTOR_DEFAULT * (0.5 - expected_score)).to_integer();
        log("draw_points_diff: " + draw_points_diff);

        // The player with higher rating is the one who loses points
        if (p1_is_higher) {
            val new_player1_rating = player1_rating - draw_points_diff;
            val new_player2_rating = player2_rating + draw_points_diff;
            return (new_player1_rating, new_player2_rating);
        } else {
            val new_player1_rating = player1_rating + draw_points_diff;
            val new_player2_rating = player2_rating - draw_points_diff;
            return (new_player1_rating, new_player2_rating);
        }
    }

    function update_win_ratings(
        player1_rating: integer,
        player2_rating: integer,
        expected_score: decimal,
        p1_won: boolean
    ): (integer, integer) {
        // A positive number, added to the winners ELO 
        val points_diff = (K_FACTOR_DEFAULT * (1.0 - expected_score)).to_integer();
        log("win_points_diff: " + points_diff);

        // Winner gains as much as the loser loses
        if (p1_won) {
            val new_player1_rating = player1_rating + points_diff;
            val new_player2_rating = player2_rating - points_diff;
            return (new_player1_rating, new_player2_rating);
        } else {
            val new_player1_rating = player1_rating - points_diff;
            val new_player2_rating = player2_rating + points_diff;
            return (new_player1_rating, new_player2_rating);
        }
    }

    /*
    function convert_result_to_int(
        player1_won: boolean,
        draw: boolean
    ): decimal {
        if (player1_won)
        {
            return RESULT_WIN;
        }
        else if (draw)
        {
            return RESULT_DRAW;
        }
        else 
        {
            return RESULT_LOSS;
        }
    } */
}