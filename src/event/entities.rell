
// -------------------------------------
// Event
// -------------------------------------

// Something that happens on the board
// that's NOT an immediate effect of a move or card played.
// 
// Events are here to make it easier to re-play old games.
// 
// Note on performance:
// The reason I've chosen this approach is because I can save DB calls
// by first making one big query to get all events for a given turn, 
// and then 


// Types
enum event_type {
    // ------------
    // Events that happen on a move
    // ------------
    DEATH_EVENT, // When some obstracle/piece disappears from the board (dead usually)
    PROMOTION_EVENT, // When a piece is promoted
    PORTAL_EVENT, // When a piece is (magically) moved through a portal
    ENCHANTED_JUMP_MOVE, // When an enchanted jumper actually jumps (doesn't have to happen)
    RESURRECT_TAKES_EFFECT, // Not when the card is played, will require a DEATH_EVENT on the same turn.

    // ------------
    // Spell events
    // ------------
    DOUBLE_MOVE_TAKES_EFFECT, // Not when the card is played
    // Enchantment events
    ENCHANTMENT_APPLIED, // When an enchantment is applied to a piece
    ENCHANTMENT_REMOVED, // When an enchantment is removed from a piece

    GAME_END_EVENT // The game ended (checkmate/stalemate)
}

// Something that happens on the board
entity event {
    index game;
    index turn;
    event_type;
}

// -------------------------------------
// This entity will exist if this is the final turn of the game.
// A card turn isn't the last, we have to end on a move turn
// (even if the move is skipped!).
//
// How can this happen? 
// 1. In a "normal" game, a move results in a stale/mate.
//    (This is during the move turn).
//    
// 2. In GoblinChess, a card played can result in a skipped move, 
//    and this skipped move results in a stale/mate, ending the game.
//    The end is ALSO during the skipped-move-turn, not the card-turn.
//    But, this is why we cannot tie this entity to a "move", since there
//    is no move entity in this case.
//
// 3. A player times out, and loses this way.
//    Note that a timeout is a bit different, it doesn't 
//    generate a new "turn" per se, but goes to the game and ends it.
//    This is a bit strange, since we need someone to try to make a move 
//    on the game to actually time it out.
//
// Note: we also have roughly the same end data on the [player_game_stats] entity,
// but we use this as a first step before finally shutting down the game.
// because we also need to verify all the random numbers before we make the 
// final decision about who won.
// -------------------------------------
entity game_end_event {
    key event;
    is_checkmate: boolean;
    is_stalemate: boolean;
    // is_timeout: boolean; // We cannot put the timeout here, since a timeout doesn't generate a new turn.
    // is_error: boolean; // We cannot put error here, since we might not know if we have an error at this point?
}
