

// ----------------------------------
// Inspectors
// ----------------------------------

function event_game_end_get_from_event(e: event): (is_final: boolean, is_checkmate: boolean, is_stalemate: boolean, is_insufficient_mating_material: boolean) {

    val x = (gee: game_end_event) @? {gee.event == e} (gee.is_checkmate, gee.is_stalemate, gee.is_insufficient_mating_material);

    if (x == null) {
        return (
            is_final = false, 
            is_checkmate = false, // Doesn't matter
            is_stalemate = false, // Doesn't matter
            is_insufficient_mating_material = false // Doesn't matter
            );
    } else {
        return (
            is_final = true,
            is_checkmate = x.is_checkmate, 
            is_stalemate = x.is_stalemate,
            is_insufficient_mating_material = x.is_insufficient_mating_material
            );
    }

}

// ----------------------------------
// Constructors
// ----------------------------------

function event_game_end_create(game, turn, is_checkmate: boolean, is_stalemate: boolean, is_im: boolean) {

    event_game_end_validate(is_checkmate, is_stalemate, is_im);

    // New event
    val new_event = turn_create_event(game, turn, event_type.GAME_END_EVENT);

    // Get the most recent turn
    create game_end_event(
        .event = new_event,
        .is_checkmate = is_checkmate,
        .is_stalemate = is_stalemate,
        .is_insufficient_mating_material = is_im
    );
}

// We validate that we have exactly ONE ending condition.
function event_game_end_validate(is_checkmate: boolean, is_stalemate: boolean, is_im: boolean) {
    var at_least_one = false;
    if (is_checkmate) {
        require(not is_stalemate, "Cannot have both checkmate and stalemate");
        require(not is_im, "Cannot have both checkmate and insufficient mating material");
        at_least_one = true;
    }
    if (is_stalemate) {
        //require(not is_checkmate, "Cannot have both stalemate and checkmate"); // Tested
        require(not is_im, "Cannot have both stalemate and insufficient mating material");
        at_least_one = true;
    } 
    if (is_im) {
        at_least_one = true;
    }

    require(at_least_one, "At least one of the end conditions must be true");
}

