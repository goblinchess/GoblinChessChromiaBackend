

// ------------------------------------------------------------
// Battle
// ------------------------------------------------------------
// In classic mode most battles end with a kill.
// This MIGHT not be true, if the defender has a A LOT of hit points (kings and stones)


enum battle_result_type {
    KILL,    // The victim dies, in real chess this always happens (but chess calls it "capture").
    HIT,     // The attack makes at least some damage, meaning that the attack CANNOT occupy the same square as the defender.
    MISS,    // The attack does zero damage AND the attacker goes to the wrong square (meaning no retaliation possible)
    ERROR    // Error case (but also used when we don't care about the result, like a missing retaliation).
}


// Holds the information about the battle result
struct battle_result {
    result: battle_result_type;
    defender_lost_hp: integer;
    retaliation_result: battle_result_type;
    attacker_lost_hp: integer;
    luck: boolean; // true if attack was lucky and rolled highest score

    // Random
    rnd_attack_results: list<rnd_result>; // We want to show the dice roll for the player on the other side.
    rnd_retaliation_results: list<rnd_result>; // Mostly for symmetry since retaliation dice are not rolled in the GUI.
    rnd_results: list<rnd_result>; // All random numbers generated for the attack. Needed for the validation in the end of the game
}

