
// -------------------------------------
// Game
// -------------------------------------


// ----------
// Inspectors
// ----------


function game_is_classic(gt: game_type) :boolean {
    when (gt) {
        game_type.SPEED_5_CLASSIC -> return true;
        game_type.SPEED_10_CLASSIC -> return true;
        else -> return false;
    }
}


// Will find the player, the game and the color 
// from the player's pubkey
function get_minimal_game_data(caller_pubkey: pubkey) :minimal_game_result? {
    // Return data
    val res = (p: player, pg: player_game)@?  {
        p.signer == caller_pubkey, 
        pg.player == p, 
        pg.is_finished == false }
        (player = pg.player, player_game = pg, game = pg.game, game_type = pg.game.game_type, is_white = pg.is_white);

    if (res != null) {
        return minimal_game_result(
            player = res.player,
            player_game = res.player_game,
            game = res.game,
            game_type = res.game.game_type,
            curr_turn_nr = res.game.current_turn,
            is_white =res.is_white 
        );
    } else {
        return null;
    }
}


// ----------
// Updates
// ----------

// Handles the creation of a game


function create_game_via_lobby_inner(opponent_player: player, game_type_str: text): game {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];
    
    // Get this player entity
    val caller_player = player@{.signer == caller_pubkey};

    val g_type = game_type.value(game_type_str);
    val existing_lobby = lobby@? {.player == opponent_player, .game_type == g_type};
    require(existing_lobby != null, "Opponent is not in the lobby");
    
    val new_game = create_game_random_black_white(caller_player, opponent_player, game_type_str);

    // Remove opponent's lobby
    delete lobby@* {.player == opponent_player};
    // Remove caller's lobby
    delete lobby@* {.player == caller_player};

    return new_game;
}

function create_game_random_black_white(caller_player: player, opponent_player: player, game_type_str: text): game {
    // Determine who plays white based on timestamp
    val timestamp_is_even = (op_context.last_block_time / 1000) % 2 == 0;
    
    // If timestamp is even, opponent plays white. If odd, caller plays white
    val (white_player, black_player) = if (timestamp_is_even) 
        (opponent_player, caller_player)
     else 
        (caller_player, opponent_player);
    
    return create_game_inner(white_player, black_player, game_type_str);
}




// We create the GAME and 
// one HAND for each player
function create_game_inner(white_player: player, black_player: player, game_type_str: text): game {

    val g_type: game_type = game_type.value(game_type_str);
    
    val new_game =create game(
        .white_player = white_player,
        .black_player = black_player,
        .game_type = g_type,
        .current_turn = 0, // Starting at 0 means first (actual) turn will be 1.
        .is_finished = false, 
        .is_draw = false,
        .created_at = op_context.last_block_time
    );

    // Create white player_game
    val white_player_game = create player_game(
        .player = white_player,
        .game = new_game,
        .is_white = true,
        .is_finished = false,
        .cards_left = 5
    );

    // Create black player_game
    val black_player_game = create player_game(
        .player = black_player,
        .game = new_game,
        .is_white = false,
        .is_finished = false,
        .cards_left = 5
    );

    // The turn before anything has happened
    turn_create_first(
        new_game, 
        white_player_game // We don't know who created the game here, but doesn't matter.
        );

    // Create 16 pieces for each player
    piece_create_all(new_game, white_player_game, black_player_game);

    return new_game;
}


// ----------
// Game Over
// ----------

function game_over(minimal_game: minimal_game_result, new_turn: turn, is_checkmate: boolean, is_stalemate: boolean) :boolean {
    if (is_checkmate or is_stalemate) {
        log("Game Over");
        if (is_checkmate) {
            update minimal_game.game (.current_turn = new_turn.number, .is_finished = true, .is_draw = false);

            // TODO
        } else {
            // Stalemate
            update minimal_game.game (.current_turn = new_turn.number, .is_finished = true, .is_draw = true);

            // TODO
        }

        return true;
    } else {
        return false;
    }
}
