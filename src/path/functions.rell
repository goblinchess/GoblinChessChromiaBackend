


// ----------------------------------------------------------------------------
// Constructors 
// ----------------------------------------------------------------------------
// Building JUMPS is a bit different.

function path_jump_move(tmp_path: list<integer>): path_base {
    require(tmp_path.size() == 2, "Jump move path must be 2 squares long, is: " + tmp_path.size());
    return path_base(tmp_path, path_type.JUMP_MOVE);
}

function path_jump_attack(tmp_path: list<integer>): path_base {
    require(tmp_path.size() == 2, "Jump attack path must be 2 squares long, is: " + tmp_path.size());
    val new_path: list<integer> = [tmp_path[0], tmp_path[1]]; // We only need first and last
    return path_base(tmp_path, path_type.JUMP_ATTACK);
}

function path_jump_move_2(start_pos: integer, end_pos: integer): path_base {
    val new_path: list<integer> = [start_pos, end_pos]; // We only need first and last
    return path_base(new_path, path_type.JUMP_MOVE);
}

function path_jump_attack_2(start_pos: integer, end_pos: integer): path_base {
    val new_path: list<integer> = [start_pos, end_pos]; // We only need first and last
    return path_base(new_path, path_type.JUMP_ATTACK);
}

// ----------------------------------------------------------------------------
// "Active path" means that this is a real move, not a potential move 
// (which might be longer).
//
// Returs a new [path_base] based on the current path but ending with the given destination 
//
// Here we know that there are no enemies BEFORE the end of the path
// (or else the path wouldn't exist).
// So if we make the path shorter it will be transformed into a move.
// ----------------------------------------------------------------------------
function path_build_active(org_path: path_base, dest: integer): path_base {
    val active = path_get_active(org_path, dest);
    return path_base(active, org_path.path_type);
}


function path_get_active(org_path: path_base, dest: integer): list<integer> {
    val res: list<integer> = [];
    for (tmp_pos: integer in org_path.path) {
        res.add(tmp_pos);
        if (tmp_pos == dest) {
            return res;
        }
    }
    require(false, "Destination " + dest + " not found in path " + org_path.path);
    return res; // Never reached
}

// ----------------------------------------------------------------------------
// Inspectors
// ----------------------------------------------------------------------------

function path_is_destination_in_path(dest_pos: integer, path: path_base): boolean {
    for(tmp_pos: integer in path.path) {
        if (tmp_pos == dest_pos) {
            return true;
        }
    }
    return false;
}


// Returns the mid positions of a path.
// If a path is 1,2,3,4 the "mid" is 2,3.
function path_get_mid_positions(path: path_base): list<integer> {
    
    if (path.path_type == path_type.JUMP_MOVE or path.path_type == path_type.JUMP_ATTACK) {
        return []; // Jumps don't have mid positions
    } else {
        // Must be ground move, could have mid positions.
        val ret: list<integer> = [];

        val len = path.path.size(); 
        if (len > 2) {
            val last_index = len - 1;
            var idx = 1;
            while (idx < last_index) {
                ret.add(path.path[idx]);
                idx++;
            }
        }

        return ret;
    }
}

// ----------------------------------------------------------------------------
// Debug
// ----------------------------------------------------------------------------
function path_debug(path: path_base): text {
    var dbg = "(";
    for(pos: integer in path.path) {
        dbg += " -> " + pos;
    }
    dbg += ")";
    return dbg;
}


