// -------------------------------------
// Player
// -------------------------------------

// Create a new player with the given name and signer
operation create_player(name: text) {
    // Check if name is valid
    require(name.size() > 0, "Player name cannot be empty");
    require(name.size() <= 30, "Player name too long (max 30 characters)");

    val existing_name = player@? {.name == name};
    require(existing_name == null, "Player name already exists");

    val current_signers = op_context.get_signers();
    val signer = current_signers[0];
    val existing_signer = player@? {.signer == signer};
    require (existing_signer == null, "Player public key already exists");


    // Create new player with default values
    create player(
        .signer = signer,
        .name = name,
        .games_played = 0,
        .games_won = 0,
        .games_lost = 0,
        .games_drawn = 0,
        .elo_rating = 1200 // Standard starting ELO rating
    );
} 


// -------------------------------------
// Lobby 
// -------------------------------------

operation enter_lobby(game_type_str: text) {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];
     
    val playa = player@ {.signer == current_signer};

    val g_type = game_type.value(game_type_str);

    val existing_lobby = lobby@? {.player == playa, .game_type == g_type};

    if (existing_lobby == null) {

        create lobby(
        .player = playa,
        .game_type = g_type,
        .last_heartbeat = op_context.last_block_time
        );
    }
    else {
        update existing_lobby (.last_heartbeat = op_context.last_block_time);
    }
}

// -------------------------------------
// Game Creation
// -------------------------------------

// --------
// Via lobby
// --------

// Usually players find each other in the lobby
// Here we send the opponent player name and the game type
operation create_game_via_lobby_by_name(opp_player_name: text, game_type_str: text) {
    val opponent_player = player@{.name == opp_player_name};
    val new_game: game = create_game_via_lobby_inner(opponent_player, game_type_str);
    log("create_game_via_lobby_by_name() - finished, game: " + new_game.rowid.to_integer() + " type: " + game_type_str + " opp player: " + opp_player_name);
}

// Here we send the opponent player pubkey and the game type
operation create_game_via_lobby(opp_player: pubkey, game_type_str: text) {
    val opponent_player = player@{.signer == opp_player};
    val new_game: game = create_game_via_lobby_inner(opponent_player, game_type_str);
    log("create_game_via_lobby() - finished, game: " + new_game.rowid.to_integer() + " type: " + game_type_str);
}

// --------
// Direct
// --------

// Create a new game between two players
// Could be a challange
operation create_game(white_player_name: text, black_player_name: text, game_type_str: text) {
    require(white_player_name != black_player_name, "Players must be different");
    
    val white_player = player@{white_player_name};
    val black_player = player@{black_player_name};

    val new_game: game = create_game_inner(white_player, black_player, game_type_str);
    log("create_game() - finished, game: " + new_game.rowid.to_integer() + " type: " + game_type_str);
}

