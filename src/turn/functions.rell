// -------------------------------------
// Inspectors
// -------------------------------------

// Returns the last seen turn type and its number.
function get_current_turn(game: game): (turn_type: turn_type, number: integer) {
    return (ct: current_turn, t: turn)@ {
        ct.game == game,
        ct.current_turn == t
    } (t.turn_type, t.number);
}

// Returns "true" if this is the last turn of a double move.
function turn_is_last_double_move(tt: turn_type): boolean {
    return tt == turn_type.NEUTRAL_MOVE_1_HIJACKED or tt == turn_type.NEUTRAL_MOVE_2_HIJACKED;
}

// -------------------------------------
// Creators
// -------------------------------------

// Creates the first turn for a game
function turn_create_first(g: game, creatoor: player_game): turn {

    // Validation 
    val check = turn@? {g};
    require(check == null, "Game: " + g.rowid.to_integer() + " already has a turn.");

    // Creation 
    val new_turn =create turn(
        .game = g,
        .number = 0,
        .turn_type = turn_type.FRESH_GAME, // This is the turn BEFORE anything has happened.
        .created_by = creatoor,
        .created_at = op_context.last_block_time
    );

    // First turn we must create this
    create current_turn(.current_turn = new_turn, .game = g);

    return new_turn;
}

// -------------------------------------
// When we create a (non first) turn, 
// we must also send the TURN_TYPE, 
// and the PLAYER_COLOR (that is the color of the player that is playing).
// These values must be validated, to detect if the client playing 
// out of turn.
// -------------------------------------
function turn_create(game: game, created_by: player_game, new_turn_type: turn_type, is_white: boolean): turn {

    // Validation 
    val (t_type: turn_type, t_number: integer) = get_current_turn(game);

    val err: text? = verify_old_turn_type_new_turn_type(game, created_by, t_type, new_turn_type, t_number, is_white);
    if (err != null) {
        require(false, err);
    }

    // Creation
    val new_turn = create turn(
        .game = game,
        .number = t_number + 1,
        .turn_type = new_turn_type,
        .created_by = created_by,
        .created_at = op_context.last_block_time
    );

    update current_turn@ {game} (.current_turn = new_turn);

    //GAME cannot have a reference to the (current) TURN since we don't allow two-way FKs.
    update game (.current_turn = new_turn.number);  

    // Update the player's last heartbeat (must be done every time a player does something)
    game_timeout_set_player_alive(created_by);

    return new_turn;
}


