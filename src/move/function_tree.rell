// --------------------------------------------------------------------
// Build
// --------------------------------------------------------------------

function move_tree_build(pos: integer, ptree: pre_tree): move_tree {

    // Combined "Normal" and "Harmless" (just a cache)
    val all = set<integer>();
    all.add_all(ptree.movable_sqs);
    all.add_all(ptree.moves_harmless);
    
    return move_tree(
        start_pos = pos,
        moves_normal = ptree.movable_sqs, 
        moves_harmless = ptree.moves_harmless, 
        moves_all = all, 
        attackable_sqs = ptree.attackable_sqs, 
        protected_sqs = ptree.protected_sqs, 
        paths = ptree.paths
        // We don't set these, since they are so unusual that we do it oustside of the builder
        //potential_vuln_paths = vuln_paths,
        //attackable_vulns = attackable_vulns
    );
}


// --------------------------------------------------------------------
// Inspectors
// --------------------------------------------------------------------

function move_tree_get_pos_status(move_tree, pos: integer): integer {
    // Check if position is in attacks list
    if (move_tree.attackable_sqs.contains(pos)) {
        log("  move_tree_get_pos_status() - Found " + pos + " in attacks");
        return 2;
    }
    
    // Check if position is in normal moves list
    if (move_tree.moves_normal.contains(pos)) {
        log("  move_tree_get_pos_status() - Found " + pos + " in normal");
        return 1;
    }
    
    // Check if position is in harmless moves list
    if (move_tree.moves_harmless.contains(pos)) {
        log("  move_tree_get_pos_status() - Found " + pos + " in harmless");
        return 1;
    }
    
    log("  move_tree_get_pos_status() - Didn't find " + pos + " anywhere in the tree");
    return 0; // Not found
}


function move_tree_has_attackable_vuln(mt: move_tree): boolean {
    val avs = mt.attackable_vulns;
    if (avs != null) {
        if (avs.attackable_old_vuln_square_to_piece.size() > 0) {
            return true;
        }
    }

    return false;
}

// ---------------------------
// Builders
// ---------------------------

// Returns a new [move_tree] which is a merge of the two trees.
// Can handle nulls.
function move_tree_merge(mt1: move_tree?, mt2: move_tree?): move_tree? {
    // If both are null, return null
    if (mt1 == null and mt2 == null) return null;
    
    // If mt1 is null, return mt2
    if (mt1 == null) return mt2;
    
    // If mt2 is null, return mt1
    if (mt2 == null) return mt1;
    
    // Both are non-null, merge them
    return move_tree_merge_internal(mt1, mt2);
}


// Returns a new [move_tree] which is a merge of the two trees.
// Warn: Don't call this if either [move_tree] is null.
function move_tree_merge_internal(mt1: move_tree, mt2: move_tree): move_tree {
    // -----------------------------
    // 1. Start pos 
    // -----------------------------
    require(mt1.start_pos == mt2.start_pos, "Start positions do not match: " + mt1.start_pos + " != " + mt2.start_pos);
    val start_pos = mt1.start_pos;
    
    // -----------------------------
    // 2. Merge moves
    // -----------------------------
    // Combine normal moves from both trees
    val moves_normal = set<integer>();
    moves_normal.add_all(mt1.moves_normal);
    moves_normal.add_all(mt2.moves_normal);
    
    // Combine harmless moves from both trees
    val moves_harmless = set<integer>();
    moves_harmless.add_all(mt1.moves_harmless);
    moves_harmless.add_all(mt2.moves_harmless);

    // Combined "Normal" and "Harmless" (just a cache)
    val all = set<integer>();
    all.add_all(moves_normal);
    all.add_all(moves_harmless);
    
    // -----------------------------
    // 3. Merge attacks
    // -----------------------------
    val attackable_sqs = set<integer>();
    attackable_sqs.add_all(mt1.attackable_sqs);
    attackable_sqs.add_all(mt2.attackable_sqs);
    
    // -----------------------------
    // 4. Merge protections
    // -----------------------------
    val protectable_sqs = set<integer>();
    protectable_sqs.add_all(mt1.protected_sqs);
    protectable_sqs.add_all(mt2.protected_sqs);
    
    // -----------------------------
    // 5. Merge paths
    // -----------------------------
    val paths = list<path_base>();
    paths.add_all(mt1.paths);
    paths.add_all(mt2.paths);

    // -----------------------------
    // 6. Merge vulnerable paths
    // -----------------------------
    val vuln_paths = list<path_base>();

    val vp1 = mt1.potential_vuln_paths;
    if (vp1 != null and vp1.size() > 0) {
        vuln_paths.add_all(vp1);
    }
    val vp2 = mt2.potential_vuln_paths;
    if (vp2 != null and vp2.size() > 0) {
        vuln_paths.add_all(vp2);
    }
    
    // -----------------------------
    // 7. Merge attackable vulnerabilities
    // -----------------------------
    var attackable_vulns: pre_vuln_context? = null;
    var found_attackable_vuln_collections = 0;
    if (move_tree_has_attackable_vuln(mt1)) {
        found_attackable_vuln_collections++;
        attackable_vulns = mt1.attackable_vulns; // No mernge
    }
    if (move_tree_has_attackable_vuln(mt2)) {
        found_attackable_vuln_collections++;
        attackable_vulns = mt2.attackable_vulns; // No merge 
    }
    
    // There can ever only be one vuln path to attack
    // and for pawns, this can only have ONE vuln square,
    // so it is impossible to have multiple hits for pawns,
    // but to make this future proof we check for multiple hits anyway
    require(found_attackable_vuln_collections < 2, "We have not implemented merge of attackable vuln collections.");
    
    return move_tree(
        start_pos = start_pos,
        moves_normal = moves_normal,
        moves_harmless = moves_harmless,
        moves_all = all,
        attackable_sqs = attackable_sqs,
        protected_sqs = protectable_sqs,
        paths = paths,
        potential_vuln_paths = vuln_paths,
        attackable_vulns = attackable_vulns
    );
}



// ---------------
// Mutators
// ---------------

// Take a move_tree and remove the attacks
// and since this piece cannot attack we make moves harmless too.
function move_tree_remove_attacks_and_make_moves_harmless(mt: move_tree): move_tree {
    
    // Create new paths list containing only paths that end in moves
    val filtered_paths = list<path_base>();
    for (p in mt.paths) {
        val len = p.path.size();
        val last_pos = p.path[len - 1];
        if (mt.moves_all.contains(last_pos)) {
            filtered_paths.add(p);
        }
    }

    val harmless = set<integer>();
    harmless.add_all(mt.moves_all);

    return move_tree(
        start_pos = mt.start_pos,
        moves_normal = set<integer>(), // Empty
        moves_harmless = harmless,
        moves_all = mt.moves_all, // Shouldn't change
        attackable_sqs = set<integer>(), // Empty attacks
        protected_sqs = set<integer>(),  // Empty protections
        paths = filtered_paths
    );
}




