

function move_primary_skip_inner(
    caller_pubkey: pubkey,
    game_id: integer,
    last_seen_turn: integer,
    move_type_str: text, // If this move is part of a double move or not.
    check_args: move_check_arguments?, 
    end_args: move_end_events_arguments?
) {
    // -----------    
    // A. Verification
    // -----------    
    log("game_id: "+game_id+" - Skip Move Begin: last turn: " + last_seen_turn);


    val m_type_upper = move_type_str.upper_case();
    val m_type: move_type = move_type.value(m_type_upper);

    // ----------------
    // A.1. Check player entity
    // ----------------
    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);
    require (minimal_game != null, "Player is not in a game, id:" + game_id);
    require(minimal_game.game_id == game_id, "The game id of the ongoing game " + minimal_game.game_id + " doesn't match the given id " + game_id + ".");


    // ----------------
    // A.2. Is game is out of sync? 
    // ----------------
    val old_turn_nr = minimal_game.curr_turn_nr; // Since we're soon creating a new turn, this is the old turn.
    require(old_turn_nr == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + old_turn_nr);

    // ----------------
    // A.3 Get same state
    // ----------------
    // Get some data
    var my_color: alignment = alignment.BLACK;
    var opp_color: alignment = alignment.WHITE;
    if (minimal_game.is_white) {
        my_color = alignment.WHITE;
        opp_color = alignment.BLACK; 
    }

    val board: list<with_pos_and_alignment> = vuln_get_all_as_wpaa(minimal_game.game); 
    val portals: list<portal_simple> = portal_simple_get_all_by_owner(minimal_game.player_game, my_color);
    val board_positions_all = board_positions_all_constructor(board, portals);

    // Only need opp team
    val opp_team = team_build_from_db(minimal_game.game, opp_color);
    val opp_king = team_get_king(opp_team)!!;

    // Has this piece an jump enchantment on it?
    val is_enchanted_jump = false; // Yes, somewhat dangerous, but JUMP card won't cause turn to be skipped, so we assume there is no active jump.

    val res = move_get_vuln_path(minimal_game.game, opp_color); 
    val opp_vuln_ctxt: pre_vuln_context = res.v_ctxt;

    // ----------------------------------------------    
    // B. Updates 
    // ----------------------------------------------    
    var new_turn_type = turn_type.BLACK_MOVE_SKIPPED;
    if (minimal_game.is_white) { 
        new_turn_type = turn_type.WHITE_MOVE_SKIPPED;
    }

    // ----------------
    // B.1. Create the turn record
    // ----------------
    // lots of verification in here.
    val (new_turn, new_turn_nr, last_rot_nr) = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);

    // ----------------
    // 2. Apply end_args
    // ----------------
    // Expensive, so we wait until last moment
    val our_team = team_build_from_db(minimal_game.game, my_color);
    val our_king = team_get_king(our_team)!!;

    // B.2.a Use all unblocked portals
    // Skip: We need this for skip moves as well, because we might have played the PORTAL card before the skip.
    val hist_portals: list<portal_event> = move_common_use_all_unblocked_portals(game_id, last_rot_nr, minimal_game.game, new_turn, board_positions_all, our_team, opp_team, my_color, end_args);

    // B.2.b Resurrection
    // (Must happen after the portal travel, so we won't end up blocking a portal exit)
    // Skip: NO RESURRECTION FOR SKIP MOVES 

    // B.2.c Promotions
    // Skip: Not common, but if a PORTAL might send a pawn to the final rank. 
    // (Must happen after the portal travel, if a pawn travels to an exit at the final rank)
    promote_all_pawns_at_final_rank(game_id, minimal_game.game, new_turn, board_positions_all, our_team, my_color, end_args);

    // ----------------------------------------------    
    // 3. Check/stale/mate
    // There are many cases where we need to calculate check/mate even if the move was skipped:
    // 1. if we use the PORTAL, potentially a piece has moved, and
    // 2. if we did a SWITCH we might cause check/mate, and
    // Actually, the only case where we can skip the check/mate calculation is after DOUBLE MOVE card,
    // but it's just easier to always calculate it.
    // ----------------------------------------------    

    // B.4 Verify if we just won via checkmate?
    val (is_check, is_checkmate, is_stalemate) = check_stale_n_mate(game_id, minimal_game, board_positions_all, opp_color, opp_king, our_team, opp_team, check_args);
    move_skipped_create(new_turn, is_check);

    // ----------------
    // B.4 Is it over?
    // ----------------
    val is_insufficient_mating_material = false; // A skipped move won't the balance
    val is_game_over = game_over_move_claim(minimal_game, caller_pubkey, new_turn, is_checkmate, is_stalemate, is_insufficient_mating_material, check_args?.random_seed, check_args?.seed_signature);
    if (not is_game_over) {
        // B.5 Cleanup 
        // For "skip" this will:
        // 1. Remove vuln context. 
        // 2. Count down enchantments.
        move_cleanup_after_move(is_enchanted_jump, opp_vuln_ctxt, minimal_game, opp_color);

        // The "is_check" status of the opponent should be saved.
        game_update_turn_and_check_status(minimal_game, is_check);

        if (m_type == move_type.NORMAL) {
            // We only add a skipped neutral (filler) move if we don't do double move.
            val neutral_last_seen_turn = last_seen_turn + 1;
            move_neutral_skip_inner(caller_pubkey, game_id, neutral_last_seen_turn);
        }
    }

    log("game_id: "+game_id+" - /Skip Move End: new turn type: " + new_turn_type + ", is_game_over: " + is_game_over + ", opp in check: " + is_check );

}

// -------------------------------------
// Create a skipped move
// -------------------------------------
function move_skipped_create(new_turn: turn, is_check: boolean) {
    create skipped_move (
        .turn = new_turn,
        .is_check = is_check
    );
}