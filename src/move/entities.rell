
// This module: 
// Holds logic around moves on the board.
//
// Note:
// To be able to verify a move, we often need to know a bit about what 
// cards have been played, like the portal card and the jump card.
// So everything we need will be put in here, so that there is no 
// dependency on the card module.

// -------------------------------------
// Moves
// -------------------------------------

// Describes the move that happened during a turn
entity move {
    index turn: turn; // The turn that this move belongs to
    piece_moved: piece; 
    from_position: integer; // 0-63
    to_position: integer; // 0-63

    // Some extra info
    is_castle: boolean;
    is_check: boolean;
}

// A move that is an attack (perhaps a capture)
// In Chaos mode attacks can fail, where the attacker ends up at a new position.
entity attack_move {
    key move: move;
    attacked_position: integer; // 0-63 DOESN'T HAVE TO BE THE SAME AS THE "TO_POSITION"
    result_type: battle_result_type;
    defender_defense_points: integer; // The opponent's defense power
    damage_points: integer; // How much we damage the opponent
}

// In Chaos mode we need extra info about the attack.
entity chaos_mode_args {
    key attack_move: attack_move; // Can only happen after an attack move
    defender_can_retaliate: boolean; // Some objects cannot retaliate (stones, for example)
    is_flash_attack: boolean; // Jumps for example cannot be retaliated against.
    is_luck: boolean; // true if attack was lucky and rolled highest score
}

// In Chaos mode, when an attack doesn't kill the defender, 
// the defender MIGHT retaliate.
entity retaliation {
    key attack_move: attack_move; // Can only happen after an attack move
    result_type: battle_result_type;
    attacker_defence_points: integer;  // The attacker's defense power (the attacker is curretly defending himself)
    damage_points: integer; // How much the retaliation damaged the attacker
}
// -------------------------------------
// Vulnerable Path
// -------------------------------------

// We save the most recent vulnerable position for each player.
//
// Most common case:
// A pawn two-step move, generating exactly one vulnerable_position. 
entity current_vuln_path {
    index game: game; 
    color: alignment; // If the "mover" was white/black.
    key game, color; // Can only ever be ONE vuln path per player.
    move: move;
    encoded_path: text; // 0-63_0-63_0-63_0-63 e.g. 9_17_25 , where first number is the first position.
}

// -------------------------------------
// Magic Jump 
// -------------------------------------

// A JUMP card has been played this turn.
//
// Comment:
// The interesting thing is that the player DOESN'T have to 
// to move the jumping piece, can pick another piece to move.
// If the player do indeed pick the jumping piece, 
// then we'll create a jump_event to signal that normal rules won't apply.
entity active_jump {
    key played_by: player_game; // Only one at a time
    card: card; // The jump card 
    piece: piece; // The piece that jumps
}

// -------------------------------------
// Portal
// -------------------------------------

// Represents a portal, with an entry and exit square.
// A portal is always created by a card.
// So it COULD potentially belong to the card module, 
// but after it has been created the portal is like a part of the board.
entity portal {
    key card: card; // The card that generated this portal
    index owned_by: player_game; // <- The way to find this entity
    entry_position: integer; // 0-63, location of the portal on the board
    exit_position: integer; // 0-63, location of the portal exit on the board
}


// -------------------------------------
// Events
// -------------------------------------

// When a piece travels through a portal
// This happens AFTER the regular move. 
entity portal_event {
    key event: event; // Event is the "base type" for all events
    portal: portal;
    piece: piece; // Piece that traveled through the portal
}

// Only relevant for magic jumps, where the player 
// wanted to go through with the magic jump.
entity jump_event {
    key event: event; // Event is the "base type" for all events
    piece: piece; // Piece that jumped
    move: move; // The move that was enhanced by the jump
}
