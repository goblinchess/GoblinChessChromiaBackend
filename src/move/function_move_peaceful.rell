

// A non-attacking move
function move_peaceful_inner(
    caller_pubkey: pubkey,

    game_id: integer,
    last_seen_turn: integer,
    is_double_move: boolean, // If the piece is doing a double move, and this is the second move of the rotation.

    m_args: move_arguments,

    // Treat castle as special case, since only peaceful moves can castle.
    castle_rook_from: integer?, // If this is a castle, the rook's starting position.
    castle_rook_to: integer?, // If this is a castle, the rook's ending position.

    check_args: move_check_arguments? = null,

    // Events that might happen after a move.
    end_args: move_end_events_arguments? = null
) {
    // ----------------------------------------------    
    // A. Verification
    // ----------------------------------------------    
    // No need to do any updates before we have verified everything.
    // (But Chromia will roll back any updates if we get an error, so it's not critical that we do it this way.)

    var dbg = move_debug_str(m_args, check_args);
    if (castle_rook_from != null) {
        dbg += "Castle ";
    }
    val p_dbg = "type: " + m_args.piece_type_str + " (from: " + m_args.from_position + " to: " + m_args.to_position + ")";

    log("game_id: " + game_id + " - Move Peaceful Begin: last_turn: " + last_seen_turn, ", piece " + p_dbg + ", flags: " + dbg );
    
    // ----------------
    // A.1. Check player entity
    // ----------------
    //log("Move A.1");
    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);
    require(minimal_game != null, "Player is not in a game, id:" + game_id);
    require(minimal_game.game_id == game_id, "The game id of the ongoing game " + minimal_game.game_id + " doesn't match the given id " + game_id + ".");


    // ----------------
    // A.2. Is game is out of sync? 
    // ----------------
    //log("Move A.2");
    val old_turn_nr = minimal_game.curr_turn_nr; // Soon to be updated
    require(old_turn_nr == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + old_turn_nr);

    // ----------------
    // A.3. Validate positions
    // ----------------
    //log("Move A.3");
    move_verify_pos(game_id, m_args);

    // ----------------
    // A.4. Verify piece type and position
    // ----------------
    //log("Move A.4: " + piece_type_str + " at " + from_position);
    val v_res = move_verify_basic_move(game_id, m_args, minimal_game);
    val p_type = v_res.p_type; // The main piece type
    val p = v_res.p; // The main piece data
    val my_color = v_res.align; // This players color
    val opp_color = v_res.opp_align; // Opponent's color


    // ----------------
    // A.5 Get same state
    // ----------------
    // Has this piece an jump enchantment on it?
    val is_enchanted_jump = jump_has_enchanted(minimal_game.player_game, p.p, m_args.given_is_enchanted_jumper);

    val res = move_get_vuln_path(minimal_game.game, opp_color); 
    val opp_vuln_ctxt: pre_vuln_context = res.v_ctxt;

    // ----------------
    // A.6. Verify if move is legal
    // ----------------

    //log("A.6.1");
    val board: list<with_pos_and_alignment> = vuln_get_all_as_wpaa(minimal_game.game); 
    val portals: list<portal_simple> = portal_simple_get_all_by_owner(minimal_game.player_game, my_color);
    val board_positions_all = board_positions_all_constructor(board, portals);


    // Complex verification (still easier than check mate).
    var is_castle = false;
    var rook: alive? = null;
    var m_tree: move_tree? = null;
    var selected_path: path_base? = null;


    if (castle_rook_from != null and castle_rook_to != null) { 
        // ----------------
        // 6.a) Castling
        // ----------------
        //log("Move A.6.a");
        rook = move_castle_verify_and_return_rook(game_id, m_args.from_position, m_args.to_position, castle_rook_from, castle_rook_to, p_type, minimal_game.is_white, minimal_game.game);
        is_castle = true;

        // We use the kings path as the main path
        selected_path = move_castle_get_king_path(game_id, m_args.from_position, m_args.to_position, minimal_game.is_white);

    } else {

        // ----------------
        // 6.b) Normal move, must verify
        // ----------------

        //log ("Move A.6.b.1 - calc move trees ");
        val (ground_m_tree: move_tree?, jump_m_tree: move_tree?) = rules_get_all_valid_moves(
            game_id,
            board_positions_all, 
            p_type,
            is_enchanted_jump,
            p.is_knighted,
            m_args.from_position,
            my_color,
            opp_vuln_ctxt // Not actually needed. (this is a peaceful move, so we don't need to check for vulnerable paths)
        );

        //log ("Move A.6.b.2 - move trees done ");
        require(ground_m_tree != null or jump_m_tree != null, "No move tree found, cannot move piece " + p_dbg + ", id:" + game_id);
        m_tree = move_tree_merge(ground_m_tree, jump_m_tree);
        require(m_tree != null, "Failed merge?");

        val found_move = move_tree_get_pos_status(game_id, m_tree, m_args.to_position);
        require(found_move > 0, "Illegal move: " + p_dbg + ", id:" + game_id);
        require(found_move == 1, "Reported peaceful move is attacking move: " + p_dbg + ", id:" + game_id);

        selected_path = move_tree_build_active_path_from_destination(game_id, m_tree, m_args.to_position);
    }
    require(selected_path != null, "Failed to build active path from destination: " + p_dbg + ", id:" + game_id);

    // Get all pieces of both teams
    // Expensive, so we wait until last moment
    val our_team = team_build_from_db(minimal_game.game, my_color);
    val opp_team = team_build_from_db(minimal_game.game, opp_color);

    val our_king = team_get_king(our_team)!!;
    val opp_king = team_get_king(opp_team)!!;

    // ----------------
    // A.7. Verify if this move will get us into check
    // ----------------
    //log ("Move A.7 - Verify if this move will get us into check ");
    val p_wpaa = with_pos_and_alignment(m_args.from_position, my_color);
    val get_into_check = will_hypothetical_move_cause_check(
            game_id,
            selected_path,
            p_wpaa,
            my_color,
            our_king.vuln.position,
            opp_team,
            board_positions_all
    );

    // The client should have stopped this move from happening.
    require(not get_into_check, "Move puts us into check: " + p_dbg + ", id:" + game_id);

    log("game_id: " + game_id + " - Move Peaceful passed verification, piece " + p_dbg + ", flags: " + dbg );

    // ----------------------------------------------    
    // B. Updates 
    // ----------------------------------------------    
    val new_turn_type = move_common_get_turn_type(is_double_move, minimal_game.is_white);

    // ----------------
    // Create the turn record
    // ----------------
    // B.1 Do this FIRST since lots of verification in here.
    val (new_turn, new_turn_nr, last_rot_nr) = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);

    // B.2 (Really simple for peaceful moves)
    move_common_change_piece_position(game_id, last_rot_nr, p.vuln.a, p_wpaa, m_args.from_position, m_args.to_position, board_positions_all, our_team);

    // B.3 Castle needs to move the rook too
    if (is_castle) {
        val a_rook = rook!!;
        update a_rook(.position = castle_rook_to!!);
    }

    // ----------------
    // Apply end_args
    // ----------------
    // B.4.a Use all unblocked portals
    move_common_use_all_unblocked_portals(game_id, old_turn_nr, minimal_game.game, new_turn, board_positions_all, our_team, opp_team, my_color, end_args);

    // B.4.b Resurrection
    // (Must happen after the portal travel, so we won't end up blocking a portal exit)
    // NO RESURRECTION FOR PEACEFUL MOVES

    // B.4.c Promotions
    // (Must happen after the portal travel, if a pawn travels to an exit at the final rank)
    promote_all_pawns_at_final_rank(game_id, minimal_game.game, new_turn, board_positions_all, our_team, my_color, end_args);

    // ----------------
    // Check/stale/mate
    // ----------------
    // B.5 Verify if we just won via checkmate?
    val (is_check, is_checkmate, is_stalemate) = check_stale_n_mate(game_id, minimal_game, board_positions_all, opp_color, opp_king, our_team, opp_team, check_args);

    // B.6 Create move event
    val m = move_event_creation(m_args, minimal_game, new_turn, p.p, is_castle, is_enchanted_jump, is_check); 

    // ----------------
    // B.7 Is it over?
    // ----------------
    val is_game_over = game_over(minimal_game, new_turn, is_checkmate, is_stalemate);
    if (not is_game_over) {

        // Usually we don't set "time_left" during regular moves, but there is one case where we must make an exception:
        if (turn_is_last_double_move(new_turn_type)) {
            game_update_time_left(minimal_game);
        }

        // Cleanup
        move_cleanup_after_move(is_enchanted_jump, opp_vuln_ctxt, minimal_game, opp_color);

        // Add new vuln path (if exists and match the actual move)
        if (m_tree != null) {
            val maybe_pot_paths: list<path_base>? = m_tree.potential_vuln_paths;
            move_vuln_path_add_from_move(minimal_game.game, my_color, m, maybe_pot_paths, m_args.to_position);
        }

        // The "is_check" status of the opponent should be saved.
        game_update_turn_and_check_status(minimal_game, is_check);
    }

    log("game_id: " + game_id + " - /Move Peaceful End, new turn type: " + new_turn_type + ", piece " + p_dbg + ", flags: " + dbg + 
        ", is_game_over: " + is_game_over + ", opp in check: " + is_check );
}

