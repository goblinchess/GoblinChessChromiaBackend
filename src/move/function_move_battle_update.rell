
// ------------------------------------------------------------
// Updates the attacker and defender life statuses based on the battle result.
// ------------------------------------------------------------

// Returns "true" if the attacker survives.
function move_battle_update_health(
    battle_res: battle_result, 
    is_chaos_mode: boolean, 
    att_piece: piece_living_data, // We know that the attacker is a piece.
    def_vuln: vulnerable_data, // Could be an obstacle, so best send this.
    board_positions_all
): boolean {
      when(battle_res.result) {
        battle_result_type.KILL -> {
            move_battle_death_of_vulnerable(
                def_vuln, 
                def_vuln.position, // Defender does NOT have to stand on the attacked_square (see en passant)
                board_positions_all
            );
        }
        battle_result_type.HIT -> {
            update def_vuln.v (
                .remaining_hit_points = def_vuln.remaining_hit_points - battle_res.defender_lost_hp,
            );

            if (is_chaos_mode) {
                when(battle_res.retaliation_result) {
                    battle_result_type.KILL -> {
                        val attacker_vuln = att_piece.vuln;
                        move_battle_death_of_vulnerable( 
                            attacker_vuln, // Attacker
                            attacker_vuln.position, // Attacker hasn't moved yet, so should be found here.
                            board_positions_all
                        );
                        return false; // <-- Only case where we return "false"
                    }
                    battle_result_type.HIT -> {
                        val attacker_vuln = att_piece.p.vulnerable;
                        update attacker_vuln ( 
                            .remaining_hit_points = attacker_vuln.remaining_hit_points - battle_res.attacker_lost_hp,
                        );
                    }
                    else -> { // miss or error
                        // Do nothing
                    }
                }
            } else {
            }
        }
        else -> { // miss or error
            // Do nothing
        }
    }
    return true;
}


// Removes SOMETHING from the board and the entities.
function move_battle_death_of_vulnerable(
    dead_vuln: vulnerable_data, 
    dead_pos: integer, // Where the piece is standing, assuming nobody moved it this turn.
    board_positions_all
) {

    // Add to the DEAD collection
    create dead (
        .game = dead_vuln.g,
        .owned_by = dead_vuln.owned_by,
        .vulnerable = dead_vuln.v
    );

    // Remove from the ALIVE collection
    delete dead_vuln.a; 

    board_remove_at(board_positions_all, dead_pos); // Remove the dead from board.
}