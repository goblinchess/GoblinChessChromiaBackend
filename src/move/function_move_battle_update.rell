
// ------------------------------------------------------------
// Updates the attacker and defender life statuses based on the battle result.
// ------------------------------------------------------------

// Returns "true" if the attacker survives.
function move_battle_update_health(
    battle_res: battle_result, 
    is_chaos_mode: boolean, 
    att_piece: piece_living_data, // We know that the attacker is a piece.
    def_vuln: vulnerable_data, // Could be an obstacle, so best send this.

    // Extra: Update these data structures
    board_positions_all,
    our_team: character_team, 
    opp_team: character_team
): boolean {
      when(battle_res.result) {
        battle_result_type.KILL -> {
            move_battle_death_of_vulnerable(
                def_vuln, 
                def_vuln.position, // Defender does NOT have to stand on the attacked_square (see en passant)
                board_positions_all,
                opp_team
            );
        }
        battle_result_type.HIT -> {
            update def_vuln.v (
                .remaining_hit_points = def_vuln.remaining_hit_points - battle_res.defender_lost_hp,
            );

            if (is_chaos_mode) {
                when(battle_res.retaliation_result) {
                    battle_result_type.KILL -> {
                        val attacker_vuln = att_piece.vuln;
                        move_battle_death_of_vulnerable( 
                            attacker_vuln, // Attacker
                            attacker_vuln.position, // Attacker hasn't moved yet, so should be found here.
                            board_positions_all,
                            our_team
                        );
                        return false; // <-- Only case where we return "false"
                    }
                    battle_result_type.HIT -> {
                        val attacker_vuln = att_piece.p.vulnerable;
                        update attacker_vuln ( 
                            .remaining_hit_points = attacker_vuln.remaining_hit_points - battle_res.attacker_lost_hp,
                        );
                    }
                    else -> { // miss or error
                        // Do nothing
                    }
                }
            } else {
            }
        }
        else -> { // miss or error
            // Do nothing
        }
    }
    return true;
}


// Removes SOMETHING from the board and the entities.
function move_battle_death_of_vulnerable(
    dead_vuln: vulnerable_data, 
    dead_pos: integer, // Where the piece is standing, assuming nobody moved it this turn.

    // Extra: Update these data structures
    board_positions_all,
    dying_team: character_team
) {
    alive_move_to_dead(dead_vuln);

    board_remove_at(board_positions_all, dead_pos); // Remove the dead from board.

    team_remove_if_character(dying_team, dead_pos);
}

// ------------------------------------------------------------
// We take the dead vulnerable and resurrect it.
// 1. Basic resurrection
// 2. Fix board
// 3. Fix team
// 4. Create Event
// ------------------------------------------------------------
function move_battle_resurrect_of_vulnerable(
    game_id: integer,
    new_turn: turn,
    old_card: card,
    old_pld: piece_living_data,
    old_pos: integer, // Where the death happened
    resurrect_pos: integer, 
    new_owner: player_game,
    new_align: alignment,

    // Extra: Update these data structures
    board_positions_all,
    new_team: character_team
) {

    val dead_vuln: vulnerable_data = old_pld.vuln;

    // 1. Basic resurrection
    // We don't change much on the piece, only:
    // a) HP must go back to original.
    // b) color goes to new align.
    // Everything else is handled by the [alive] and [dead] entities.
    alive_move_from_dead(game_id, dead_vuln, new_owner, resurrect_pos, new_align);

    // 2. Fix board
    board_appear_at(board_positions_all, resurrect_pos, new_align); // Add the resurrected to the board.

    // 3. Fix team
    val new_pld = piece_get_living_data_from_pos(dead_vuln.g, resurrect_pos);
    team_character_appears_at(new_team, new_pld!!);

    // 4. Event
    life_event_resurrect(dead_vuln.g, new_turn, old_card, old_pld.p, old_pos, resurrect_pos);
}