
// ------------------------------------------------------------
// Basic verification of opponent's piece
// ------------------------------------------------------------

// Verify some basic stuff about the opponent's piece.
// We don't care about opponent's type etc.
// Note that just because we cannot find the opponent at the attacked position,
// it doesn't mean that the attack is illegal (e.g. en passant).
function move_verify_opponent_piece(
        game_id: integer, 
        attacker_align: alignment, 
        att_args: move_attack_arguments, 
        minimal_game: minimal_game_result, 
        opp_vuln_ctxt: pre_vuln_context, 
        v_path_opp_piece: piece?
): piece_living_data {

    var opp: piece_living_data? = piece_get_living_data_from_pos(minimal_game.game, att_args.attacked_position);
    if (opp == null) {
        // If we cannot find the opponent at the attacked position,
        // there MUST be a vulnerable path, or client sent us wrong data.
        opp = move_verify_opp_vuln_context_inner(game_id, att_args, minimal_game, opp_vuln_ctxt, v_path_opp_piece);
    }

    // We can attack neutral pieces.
    require(opp.align != attacker_align, "Expected opponent piece to NOT have the same alignment as the attacker " + opp.align + ", id:" + game_id);

    //log("Move A.5: Opponent remaining hp: " + opp.remaining_hit_points + ", defence: " + opp.defence);
    require(att_args.defender_defense_points == opp.defence, "Given defense points " + att_args.defender_defense_points + " does not match opponent's defence " + opp.defence + ", id:" + game_id);

    return opp;
}

// ------------------------------------------------------------
// Will find the opponent via the vulnerable path.
// ------------------------------------------------------------
function move_verify_opp_vuln_context_inner(
        game_id: integer,
        att_args: move_attack_arguments, 
        minimal_game: minimal_game_result, 
        opp_vuln_ctxt: pre_vuln_context, 
        v_path_opp_piece: piece?
): piece_living_data {

    val opp_destination_pos = pre_vuln_check_if_pos_part_of_vulnerable_path(opp_vuln_ctxt, att_args.attacked_position);
    require(opp_destination_pos != null, "No opponent piece at position " + att_args.attacked_position + ", id:" + game_id);

    require(v_path_opp_piece != null, "Internal error: We have a vulnerable path but no piece, id:" + game_id);

    // We found a vulnerable position, and we should find the opponent's piece via the destination position.
    val opp = piece_get_living_data_from_pos(minimal_game.game, opp_destination_pos);
    // It's extremly unlikely that the opponent has been moved (via magic) from its destination position,
    // but IF that happened we should not be able to do en passant, and the client shouldn't have allowed this attack.
    require(opp != null, "Yes, it's extremly unlikely case where en passant failed (due to defender piece has been moved from " + 
        opp_destination_pos + " to " + v_path_opp_piece.vulnerable.position + ") but client should have noticed this and not allowed this attack.");
        
    log("En passant success on " + att_args.attacked_position + ". Opponent piece found at " + opp_destination_pos + ".");
    return opp;
}
