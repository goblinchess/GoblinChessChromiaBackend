
// Skip the move
// Can only happen in combination with certain spells.
operation skip_move(
    game_id: integer,
    last_seen_turn: integer // What turn the client last saw.
) {
    // -----------    
    // A. Verication
    // -----------    
    log("Skip Move Begin: game_id: " + game_id + " last turn: " + last_seen_turn);

    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // ----------------
    // A.1. Check player entity
    // ----------------
    val minimal_game: minimal_game_result? = get_minimal_game_data(caller_pubkey);
    require (minimal_game != null, "Player is not in a game, id:" + game_id);

    // ----------------
    // A.2. Is game is out of sync? 
    // ----------------
    val curr_turn = minimal_game.curr_turn_nr;
    require(curr_turn == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + curr_turn);

    // ----------------------------------------------    
    // B. Updates 
    // ----------------------------------------------    
    var new_turn_type = turn_type.BLACK_MOVE_SKIPPED;
    if (minimal_game.is_white) { 
        new_turn_type = turn_type.WHITE_MOVE_SKIPPED;
    }

    // ----------------
    // B.1. Create the turn record
    // ----------------
    // lots of verification in here.
    val new_turn = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);
    log("/Skip Move End: game_id: " + game_id + " new turn type: " + new_turn_type);
}



// Skip the neutral move
// We usually skip neutral in v1.0, but we need it for double move.
operation skip_neutral(
    game_id: integer,
    last_seen_turn: integer // What turn the client last saw.
) {
    // -----------    
    // A. Verication
    // -----------    
    log("Skip Neutral Begin: game_id: " + game_id + " last_turn: " + last_seen_turn);

    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // ----------------
    // A.1. Check player entity
    // ----------------
    val minimal_game: minimal_game_result? = get_minimal_game_data(caller_pubkey);
    require (minimal_game != null, "Player is not in a game, id:" + game_id);

    // ----------------
    // A.2. Is game is out of sync? 
    // ----------------
    val curr_turn = minimal_game.curr_turn_nr;
    require(curr_turn == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + curr_turn);

    // ----------------------------------------------    
    // B. Updates 
    // ----------------------------------------------    
    var new_turn_type = turn_type.NEUTRAL_MOVE_2_SKIPPED;
    if (minimal_game.is_white) { 
        new_turn_type = turn_type.NEUTRAL_MOVE_1_SKIPPED;
    }

    // ----------------
    // B.1. Create the turn record
    // ----------------
    // lots of verification in here.
    val new_turn = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);
    log("/Skip Neutral End: game_id: " + game_id + " new turn type: " + new_turn_type);
}


// Move a piece to a empty square.
operation move_peaceful(
    m_args: move_arguments,

    // Treat castle as special case
    castle_rook_from: integer?, // If this is a castle, the rook's starting position.
    castle_rook_to: integer?, // If this is a castle, the rook's ending position.

    // ----------------------
    // Only if the client wants
    // ----------------------
    check_args: move_check_arguments? = null
) {

    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_peaceful_inner(
        caller_pubkey, 
        m_args,
        castle_rook_from,
        castle_rook_to,
        check_args
    );
}

operation move_attack(
    m_args: move_arguments,

    // Mandatory arguments
    att_args: move_attack_arguments,

    // ----------------------
    // Random 
    // If any randomness was used while attacking, the numbers generated goes in here.
    // The list can have different length:
    // 1. classical mode = 0
    // 2. chaos mode normal attack: 2 die rolls or sometimes 3 die rolls if miss, 
    // 3. chaos mode retaliation: 4 die rolls.
    // ----------------------
    rnd_numbers: list<integer>,  

    // ----------------------
    // Only if the client wants
    // ----------------------
    check_args: move_check_arguments? = null,

    // ----------------------
    // Needed for chaos mode
    // ----------------------

    // Chaos mode arguments
    chaos_args: move_chaos_mode_arguments? = null,

    // Only used if there is retaliation.
    ret_args: move_retaliation_arguments? = null
) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_attack_inner(
        caller_pubkey, 
        m_args,
        att_args,
        rnd_numbers,
        check_args,
        chaos_args,
        ret_args
    );

}

