
// Skip the move
// Can only happen in combination with certain spells.
operation skip_move(
    game_id: integer,
    last_seen_turn: integer, // What turn the client last saw.

    // Events that might happen after a move.
    // NOTE: Sometimes end-of-turn events happen even if turn is skipped. 
    // Example: If PORTAL card was played, we will skip the move, but the piece will still use the (new) portal.
    end_args: move_end_events_arguments? = null
) {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_skip_inner(
        caller_pubkey,
        game_id,
        last_seen_turn,
        end_args
    );
}


// Skip the neutral move
// We usually skip neutral in v1.0, but we need it for double move.
operation skip_neutral(
    game_id: integer,
    last_seen_turn: integer // What turn the client last saw.
) {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_neutral_skip_inner(
        caller_pubkey,
        game_id,
        last_seen_turn
    );
}

// Move a piece to a empty square.
operation move_peaceful(
    m_args: move_arguments,

    // Treat castle as special case
    castle_rook_from: integer?, // If this is a castle, the rook's starting position.
    castle_rook_to: integer?, // If this is a castle, the rook's ending position.

    // ----------------------
    // Only if the client wants
    // ----------------------
    check_args: move_check_arguments? = null,

    // Events that might happen after a move.
    end_args: move_end_events_arguments? = null
) {

    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_peaceful_inner(
        caller_pubkey, 
        m_args,
        castle_rook_from,
        castle_rook_to,
        check_args,
        end_args
    );
}

operation move_attack(
    m_args: move_arguments,

    // Mandatory arguments
    att_args: move_attack_arguments,

    // ------------------------------------------------------------------
    // Random 
    // If any randomness was used while attacking, the numbers generated goes in here.
    // The list can have different length:
    // ------------------------------------------------------------------
    // Example                                     | Number of elements
    // ------------------------------------------------------------------
    // 1. classical mode normal                    = 0
    // 2. classical mode resurrection              = 1
    // 3. chaos mode attack normal hit/kill        = 2
    // 4. chaos mode attack kill + resurrection    = 3
    // 5. chaos mode attack miss                   = Either 2 or 3
    // 6. chaos mode attack hit + retaliation      = 4
    // ------------------------------------------------------------------
    rnd_numbers: list<rnd_data>,  

    // ----------------------
    // Only if the client needs to send it
    // ----------------------
    check_args: move_check_arguments? = null,

    // Events that might happen after a move.
    end_args: move_end_events_arguments? = null,

    // ----------------------
    // Needed for chaos mode
    // ----------------------

    // Chaos mode arguments
    chaos_args: move_chaos_mode_arguments? = null,

    // Only used if there is retaliation.
    ret_args: move_retaliation_arguments? = null
) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_attack_inner(
        caller_pubkey, 
        m_args,
        att_args,
        rnd_numbers,
        check_args,
        end_args,
        chaos_args,
        ret_args
    );

}

