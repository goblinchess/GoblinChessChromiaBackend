// ------------------------------------------------------------
// Here we calculate the [battle_result] and 
// verify it against the data the client sent us.
// NOTE:
// No updates here, we're still in verification mode.
// ------------------------------------------------------------
function move_calc_and_verify_battle_result(
    game_id: integer,
    m_args: move_arguments,
    att_args: move_attack_arguments,
    p: piece_living_data,
    opp_vuln: vulnerable_data,
    rnd_numbers: list<rnd_data>, // <- Damn important that the correct count is sent here.
    resurrect_pos: integer?,

    is_chaos_mode: boolean,

    // Chaos mode only
    chaos_args: move_chaos_mode_arguments?,
    ret_args: move_retaliation_arguments?
): battle_result {

    var battle_res: battle_result? = null;

    if (is_chaos_mode) {
        require(chaos_args != null, "Internal error: Chaos mode arguments are null, id:" + game_id);

        // This is the real battle calculation,
        // it doesn't hurt to call it here, since it won't store anything.
        battle_res = calculate_chaos_attack_result(
            game_id = game_id,

            // Defender
            def_hp = opp_vuln.remaining_hit_points,
            def_strength = die_set_get_default_chaotic(), // Currently always the same.
            def_defense = opp_vuln.defence,

            // Attacker
            att_hp = p.vuln.remaining_hit_points,
            att_strength = die_set_get_default_chaotic(), // Currently always the same.
            att_defense = p.vuln.defence,

            chaos_args = chaos_args,

            rnd_numbers = rnd_numbers
        );

        // a) Verify the luck
        require(battle_res.luck == chaos_args.is_luck, 
            "Calculated Luck was "+ battle_res.luck + " but given was " + chaos_args.is_luck + ", id:" + game_id);

        // b) Verify that we used all incoming random numbers 
        move_attack_verify_rnd_results(game_id, battle_res, resurrect_pos, rnd_numbers, battle_res.rnd_results);

    } else {
        // This is the real battle calculation.
        battle_res = calculate_classic_attack_result(
            game_id = game_id,
            def_hp = opp_vuln.remaining_hit_points,
            def_defense = opp_vuln.defence
        );

        // a) No luck

        // b) Random
        // There is ONE case where we actually have random for classic, and that's during RESURRECT
        if (resurrect_pos != null) {
            require(rnd_numbers.size() == 1, "Classic mode, one random numbers expected due to resurrect " + resurrect_pos + ", id:" + game_id);

            // We don't verify the resurrect random number here, since we need the move to happen first.
        } else {
            require(rnd_numbers.size() == 0, "Classic mode, no random numbers expected in this turn, id:" + game_id);
        }
    }

    log("game_id: " + game_id + " - " + battle_result_dbg(battle_res));

    // ----------------
    // Verify the result types and the damage points.
    // ----------------
    val att_res_type_str =att_args.attack_result_type_str.upper_case();
    val given_result_type = battle_result_type.value(att_res_type_str);
    require(battle_res.result == given_result_type, 
        "Given Battle result type "+ att_res_type_str + " doesn't match calculated result " + battle_res.result + ", id:" + game_id);

    when (battle_res.result) {
        battle_result_type.KILL -> {
            // USUALLY the case for both classic and chaos mode, 
            // not much to validate (since no retaliation is possible).
            // We don't even care about damage points here, dead is dead.
        }
        battle_result_type.MISS -> {
            require(m_args.to_position != att_args.attacked_position, 
                "When we miss we cannot occupy the opponents square at "+ att_args.attacked_position + ", id:" + game_id);
            // TODO: We COULD go on to verify:
            // a) the exact location of the to_position, and
            // b) if a die roll had to be made,
            // ... but it's not worth it.
            // 
            // Note: No retaliation is possible when the attacker went to the wrong square.
        }
        battle_result_type.HIT -> {
            require(m_args.to_position != att_args.attacked_position, 
                "Hit means the defender survived, so we cannot occupy the square at "+ att_args.attacked_position + ", id:" + game_id);
            // TODO: We COULD go on to verify:
            // the exact location of the to_position,
            // but it's not worth it.

            // We can verify the defender lost HP
            require(battle_res.defender_lost_hp == att_args.damage_points, 
                "Defender calculated lost HP " + battle_res.defender_lost_hp + " doesn't match given damage points " + att_args.damage_points + ", id:" + game_id);

            if (is_chaos_mode) {
                // Main attack = hit is the only case that can cause a retaliation (but not in classic mode).
                require(chaos_args!!.defender_can_retaliate == opp_vuln.can_retaliate, 
                    "Client gave can_retaliate: " + chaos_args!!.defender_can_retaliate + " but node has: " + opp_vuln.can_retaliate );
                
                require(ret_args != null, 
                    "Chaos mode, and main attack is hit, so retaliation arguments cannot be null, id:" + game_id);

                // Verify the retaliation result type
                val ret_res_type_str = ret_args.retaliation_result_type_str.upper_case();
                val given_retaliation_result_type = battle_result_type.value(ret_res_type_str);
                require(battle_res.retaliation_result == given_retaliation_result_type, 
                    "Given retaliation result type "+ ret_res_type_str + " doesn't match calculated result " + battle_res.retaliation_result + ", id:" + game_id);
            
                when (battle_res.retaliation_result) {
                    battle_result_type.HIT -> {
                        // Here we can verify the retaliation damage 
                        require(battle_res.attacker_lost_hp == ret_args.damage_points, 
                            "Retaliation calculated damage " + battle_res.attacker_lost_hp + " doesn't match given retaliation damage " + ret_args.damage_points + ", id:" + game_id);
                    }
                    else -> {
                        // Nothing to verify
                    }
                }
            }
        }
    }

        
    return battle_res;
}

// Verify that we used all random numbers in the incoming list.
function move_attack_verify_rnd_results(game_id: integer, battle_res: battle_result, resurrect_pos: integer?, rnd_numbers: list<rnd_data>, rnd_results: list<rnd_result>) {
    val given_rnd_num_size = rnd_numbers.size();
    var calc_after_attack_size = rnd_results.size();

    var calc_rnd_num_size = calc_after_attack_size;
    if (resurrect_pos != null) {
        // Resurrection requires one random too.
        // Even if there is only one possible square where the piece must resurrect
        // we still use one random to make it easier on the node to validate that we have the 
        // correct number of randoms.
        calc_rnd_num_size += 1; 
        // We don't verify the resurrect pos here, since the move hasn't happened on the board yet.
    }

    if (given_rnd_num_size > calc_rnd_num_size) { 
        // This CAN happen for one specific situation:
        // 1. Chaos mode +
        // 2. Ground attack +
        // 3. Miss.
        // This random number is used if we miss and want to calculate how much shorter 
        // the advance is. A "miss" can only happens in chaos mode. The idea is that 
        // the piece moves towards the defender but swings too early. If we have a 
        // miss on a ground attack the lead will advance one or two squares shorter,
        // and there is a 50%-50% what it will be. A single D6 is used to determine it.
        if (battle_res.result == battle_result_type.MISS) {
            // We don't really validate that the die result 
            // cause the correct move destination (it's not very important)
            // we just copy the data into the [rnd_results] list.
            val rnd_data = rnd_numbers[calc_after_attack_size];

            val dice_count = 1;
            val rnd_offset = calc_after_attack_size;
            val res: dice_number_result = dice_number_roll_d6(dice_count, rnd_numbers, rnd_offset);
            rnd_results.add(res.rnd_results[0]);
        }
    }

    // Now the real check
    require(given_rnd_num_size == rnd_results.size(), "Random numbers size mismatch. Expected " + calc_rnd_num_size + " but got " + given_rnd_num_size + ", id:" + game_id);
}

