

// --------------------------------------------------------------
// The player's client reports an attack.
// --------------------------------------------------------------
function move_attack_inner(
    caller_pubkey: pubkey,

    game_id: integer,
    last_seen_turn: integer,
    m_type: move_type, // If this move is part of a double move or not.

    m_args: move_arguments,

    att_args: move_attack_arguments,


    // ----------------------
    // Needed for chaos mode
    // ----------------------

    // ----------------------
    // Random 
    // If any randomness was used while attacking, the numbers generated goes in here.
    // The list can have different length:
    // 1. classical mode = 0
    // 2. chaos mode normal attack: 2 die rolls or sometimes 3 die rolls if miss, 
    // 3. chaos mode retaliation: 4 die rolls.
    // ----------------------
    rnd_numbers: list<rnd_data>, 

    check_args: move_check_arguments? = null,

    // Events that might happen after a move.
    end_args: move_end_events_arguments? = null,

    // ----------------------
    // Some args
    // ----------------------
    chaos_args: move_chaos_mode_arguments? = null,

    // Only used if there is retaliation.
    ret_args: move_retaliation_arguments? = null

) {
    // ----------------------------------------------    
    // A. Verification
    // ----------------------------------------------    
    // No need to do any updates before we have verified everything.
    // (But Chromia will roll back any updates if we get an error, so it's not critical that we do it this way.)

    var dbg = move_debug_str(m_args, check_args);
    val p_dbg = "type: " + m_args.piece_type_str + " (from: " + m_args.from_position + " -> attack on: " + att_args.attacked_position + " -> dest " + m_args.to_position + ")";

    log("game_id: " + game_id + " - Move Attack Begin. Last_turn: " + last_seen_turn, ", piece " + p_dbg + ", flags: " + dbg);
    
    // ----------------
    // A.1. Check player entity
    // ----------------
    //log("Move A.1");
    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);
    require (minimal_game != null, "Player is not in a game, id:" + game_id);
    require(minimal_game.game_id == game_id, "The game id of the ongoing game " + minimal_game.game_id + " doesn't match the given id " + game_id + ".");

    // ----------------
    // A.2. Is game is out of sync? 
    // ----------------
    //log("Move A.2");
    val old_turn_nr = minimal_game.curr_turn_nr; // Soon to be updated
    require(old_turn_nr == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + old_turn_nr);

    // ----------------
    // A.3. Validate positions
    // ----------------
    //log("Move A.3");
    move_verify_pos(game_id, m_args);

    // ----------------
    // A.4. Verify attacker piece type and position
    // ----------------
    //log("Move A.4: Attacker" + piece_type_str + " at " + from_position);
    val v_res = move_verify_basic_move(game_id, m_args, minimal_game);
    val p_type = v_res.p_type; // The main piece type
    val p = v_res.p; // The main piece data
    val my_color = v_res.align; // This players color
    val opp_align = v_res.opp_align; // Opponent's color

    // ----------------
    // A.5 Verify opponent's piece
    // ----------------
    // Get the opponent's vulnerable positions if any
    val res_v_path = move_get_vuln_path(minimal_game.game, opp_align); 
    val opp_vuln_ctxt: pre_vuln_context = res_v_path.v_ctxt;
    val v_path_opp_vuln: vulnerable? = res_v_path.moved_vuln;

    val (opp_vuln: vulnerable_data, opp: piece_living_data?) = move_verify_opponent_piece(game_id, my_color, att_args, minimal_game, opp_vuln_ctxt, v_path_opp_vuln);
  
    // ----------------
    // A.6 Battle calculation
    // ----------------
    val is_classic_mode: boolean = game_is_classic(minimal_game.game_type); 
    val is_chaos_mode: boolean = not is_classic_mode; // Else it's chaos mode.

    var resurrect_pos: integer? = null;
    if (end_args != null) {
        resurrect_pos = end_args.resurrection_pos;
    }


    // After this we know that our calculation matches the given data.
    val battle_res = move_calc_and_verify_battle_result(
        game_id = game_id,
        m_args = m_args,
        att_args = att_args,
        p = p,
        opp_vuln = opp_vuln,
        rnd_numbers = rnd_numbers,
        resurrect_pos = resurrect_pos,
        is_chaos_mode = is_chaos_mode,
        chaos_args = chaos_args,
        ret_args = ret_args
    );

    // ----------------
    // A.6 Get same state
    // ----------------
    // Has this piece an jump enchantment on it?
    val is_enchanted_jump = jump_has_enchanted(minimal_game.player_game, p.p, m_args.given_is_enchanted_jumper);
    if (is_enchanted_jump) { // Kinda unual, worth a log
        log("game_id: " + game_id + " - Found an enchanted jump on this piece " + p_dbg + ", flags: " + dbg);
    }

    // ----------------
    // A.6. Verify if move is legal
    // ----------------

    // Complex verification (still easier than check mate).
    var m_tree: move_tree? = null;


    val board: list<with_pos_and_alignment> = vuln_get_all_as_wpaa(minimal_game.game); 
    val portals: list<portal_simple> = portal_simple_get_all_by_owner(minimal_game.player_game, my_color);
    val board_positions_all = board_positions_all_constructor(board, portals);

    //log ("Move A.6.1 - calc move trees ");
    val (ground_m_tree: move_tree?, jump_m_tree: move_tree?) = rules_get_all_valid_moves(
            game_id,
            board_positions_all, 
            p_type,
            is_enchanted_jump,
            p.is_knighted,
            m_args.from_position,
            my_color,
            opp_vuln_ctxt
    );

    //log ("Move A.6.2 - move trees done ");
    require(ground_m_tree != null or jump_m_tree != null, "No move tree found, cannot move piece " + p_dbg + ", id:" + game_id);
    m_tree = move_tree_merge(ground_m_tree, jump_m_tree);
    require(m_tree != null, "Failed merge?");

    // Note: 
    // The move that must exist in the move tree is the "attack_position", 
    // the "to_position" can be anything, but must be empty.
    val found_move = move_tree_get_pos_status(game_id, m_tree, att_args.attacked_position);
    require(found_move > 0, "Illegal move: piece " + p_dbg + ", id:" + game_id);
    require(found_move == 2, "Expected an attacking move, but on piece on attacked position, piece " + p_dbg + ", id:" + game_id);

    val selected_path = move_tree_build_active_path_from_destination(game_id, m_tree, m_args.to_position);
    require(selected_path != null, "Failed to build active path from destination: " + p_dbg + ", id:" + game_id);

    // Get all pieces of both teams
    // Expensive, so we wait until last moment
    val our_team = team_build_from_db(minimal_game.game, my_color);
    val opp_team = team_build_from_db(minimal_game.game, opp_align);

    val our_king = team_get_king(our_team)!!;
    val opp_king = team_get_king(opp_team)!!;

    // ----------------
    // A.7. Verify if this move will get us into check
    // ----------------
    //log ("Move A.7 - Verify if this move will get us into check ");
    val p_wpaa = with_pos_and_alignment(m_args.from_position, my_color);
    val (get_into_check, check_desc) = will_hypothetical_move_cause_check(
            game_id,
            selected_path,
            p_wpaa,
            my_color,
            our_king.vuln.position,
            opp_team,
            board_positions_all
    );

    // The client should have stopped this move from happening.
    require(not get_into_check, "Move puts us into check: " + p_dbg + " because: " + check_desc + ", id:" + game_id);


    log("game_id: " + game_id + " - Move Attack passed verification, piece " + p_dbg + ", flags: " + dbg );

    // ----------------------------------------------    
    // B. Updates 
    // ----------------------------------------------    
    val rnd_results = battle_res.rnd_results;

    val new_turn_type = move_common_get_turn_type(m_type, minimal_game.is_white);
    
    // ----------------
    // Update piece position
    // ----------------

    // B.1 Do this FIRST since lots of verification in here.
    val (new_turn, new_turn_nr, last_rot_nr) = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);

    // B.2 Update hp and is_alive for both attacker and defender
    // NOTE: Must be done BEFORE we move the attacker, since we require both combatants to stay on original positions.
    val attacker_still_alive = move_battle_update_health(battle_res, is_chaos_mode, p, opp_vuln, board_positions_all, our_team, opp_team);

    if (attacker_still_alive) {
        // B.3 Same as for peaceful move
        move_common_change_piece_position(game_id, last_rot_nr, p.vuln.a, p_wpaa, m_args.from_position, m_args.to_position, board_positions_all, our_team);
    }

    // ----------------
    // 4. Apply end_args
    // ----------------
    // B.4.a Use all unblocked portals
    move_common_use_all_unblocked_portals(game_id, old_turn_nr, minimal_game.game, new_turn, board_positions_all, our_team, opp_team, my_color, end_args);

    // B.4.b Resurrection
    // A resurrection happens on the player's side of the board, close to the player's starting rank.
    // (Must happen after the portal travel, so we won't end up blocking a portal exit preventing a valid portal travel.
    // This is highly unlikely though, but still possible if we create a portal from the enemy side of the board with exit 
    // on our first rank.)
    if (battle_res.result == battle_result_type.KILL) {
        if (not opp_vuln.is_obstacle) {

            val opp_resurrect_piece = opp!!;

            // We killed an opponent piece, so we can maybe resurrect one.
            val old_card: card? = resurrect_find_potential(minimal_game.player_game, new_turn_nr);
            if (old_card != null) {

                // We found a potential resurrect, so we can resurrect one!
                // But first, check the players arguments.
                require(end_args != null, 
                "move_battle_resurrect_of_vulnerable() - ERROR: Node thinks we should resurrect. "
                + ", but no end_args provided!");
                require(end_args.resurrection_pos != null, 
                "move_battle_resurrect_of_vulnerable() - ERROR: Node thinks we should resurrect. "
                + ", but no resurrection_pos provided.");

                // We have to wait until now to verify the random number of the resurrect position,
                // since we need the move (and portal travels) to happen first.
                var rnd_res: rnd_result? = null;
                if (my_color == alignment.WHITE) {
                    rnd_res = board_find_empty_starting_from_white_side(board_positions_all, end_args.resurrection_pos, rnd_numbers[0]);
                } else {
                    rnd_res = board_find_empty_starting_from_black_side(board_positions_all, end_args.resurrection_pos, rnd_numbers[0]);
                }
                rnd_results.add(rnd_res); // Don't forget to add it to the result list!

                val old_pos = att_args.attacked_position; // The place where the piece was killed.
                val new_pos = end_args.resurrection_pos; // This cannot be validated, must wait to the end of the game.
                val new_owner = minimal_game.player_game; // Me
                move_battle_resurrect_of_vulnerable(game_id, new_turn, old_card, opp_resurrect_piece, old_pos, new_pos,  
                    new_owner, my_color, board_positions_all, our_team);
            }
        }
    }

    // B.4.c Promotions
    // (Must happen after the portal travel, if a pawn travels to an exit at the final rank)
    promote_all_pawns_at_final_rank(game_id, minimal_game.game, new_turn, board_positions_all, our_team, my_color, end_args);

    // ----------------
    // 5. Check/stale/mate
    // ----------------
    // B.5.a Verify if we just won via checkmate?
    val (is_check, is_checkmate, is_stalemate) = check_stale_n_mate(game_id, minimal_game, board_positions_all, opp_align, opp_king, our_team, opp_team, check_args);

    // B.5.b Verify our attack generated a draw?
    var is_insufficient_mating_material = false;
    if (not is_checkmate and not is_stalemate) { // No point checking this if game is over.
        is_insufficient_mating_material = end_calc_insufficient_mating_material(game_id, minimal_game, our_team, opp_team, check_args);
    } else if (check_args != null) {
        require(not check_args.is_insufficient_mating_material, "Cannot have both checkmate/stalemate and insufficient mating material");
    }

    // B.6 Turn and static move
    val is_castle = false; // Must be false for attacks
    val m = move_event_creation(m_args, minimal_game, new_turn, p.p, is_castle, is_enchanted_jump, is_check); 

    // ----------------
    // B.7. Create events
    // ----------------

    // B.7.1 ATTACK_MOVE (event)
    val am = create attack_move(
        move = m,
        attacked_position = att_args.attacked_position,
        result_type = battle_res.result,
        defender_defense_points = att_args.defender_defense_points,
        damage_points = att_args.damage_points
    );

    // B.7.2 DEATH_EVENT 
    if (battle_res.result == battle_result_type.KILL) {
        life_event_create_death(minimal_game.game, new_turn, am, opp_vuln.v);
    } else if (battle_res.retaliation_result == battle_result_type.KILL) {
        life_event_create_death(minimal_game.game, new_turn, am, p.vuln.v);
    }

    if (is_chaos_mode) {

        // B.7.chaos.1. Create chaos_mode_args entity
        require(chaos_args != null, "Internal error: Chaos mode args is null, id:" + game_id); // Already checked above.

        create chaos_mode_args(
            attack_move = am,
            defender_can_retaliate = chaos_args.defender_can_retaliate,
            is_flash_attack = chaos_args.is_flash_attack,
            is_luck = chaos_args.is_luck, 
            dice_results = dice_string(battle_res.rnd_attack_results)
        );

        when (battle_res.result) {
            battle_result_type.HIT -> {
                // B.7.chaos.2. RETALIATION (event)
                require(ret_args != null, "Internal error: Retaliation args is null, id:" + game_id); // Already checked above.
                val retaliation_move = create retaliation(
                    attack_move = am,
                    result_type = battle_res.retaliation_result,
                    attacker_defence_points = ret_args.attacker_defence_points,
                    damage_points = ret_args.damage_points,
                    dice_results = dice_string(battle_res.rnd_retaliation_results)
                );
            }
        }

    }
    // ----------------
    // B.7.3. Save the rnd results
    // ----------------
    // We save the random results for the final validation in the end of the game.
    rnd_validation_create_player_rnd_nr(new_turn, rnd_results);

    // ----------------
    // B.8 Is it over?
    // ----------------
    val is_game_over = game_over(minimal_game, new_turn, is_checkmate, is_stalemate, is_insufficient_mating_material);
    if (not is_game_over) {
        // Usually we don't set "time_left" during regular moves, but there is one case where we must make an exception:
        if (turn_is_last_double_move(new_turn_type)) {
            game_update_time_left(minimal_game);
        }

        // Cleanup
        move_cleanup_after_move(is_enchanted_jump, opp_vuln_ctxt, minimal_game, opp_align);
        // Won't add any vulns for attacks.

        // The "is_check" status of the opponent should be saved.
        game_update_turn_and_check_status(minimal_game, is_check);

        if (m_type == move_type.NORMAL) {
            // We only add a skipped neutral (filler) move if we don't do double move.
            val neutral_last_seen_turn = last_seen_turn + 1;
            move_neutral_skip_inner(caller_pubkey, game_id, neutral_last_seen_turn);
        }
    }

    log("game_id: " + game_id + " - /Move Attack End, new turn type: " + new_turn_type + ", piece " + p_dbg + ", flags: " + dbg + 
        ", is_game_over: " + is_game_over + ", opp in check: " + is_check );
}

