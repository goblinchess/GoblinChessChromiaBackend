// We need to know the owner of the portal.
struct owned_portal {
    portal; // Reference to the entity
    entry_pos: integer;
    exit_pos: integer;
    owner_alignment: alignment;
}

struct board_positions_all {

    // List of all squares on the board that have characters on them.
    board_characters: map<integer, with_pos_and_alignment> = map<integer, with_pos_and_alignment>();

    // List of all squares on the board that have obstacles on them.
    board_obstacles: map<integer, with_pos_and_alignment> = map<integer, with_pos_and_alignment>();

    // List of all portals on the board owned by the current player.
    // TODO: use all portals if we implement check/mate calculations.
    portals: list<owned_portal> = []; // Keeps track of portals. Portals never go away.
}

// We use this struct while calculating if we can attack a vulnerable path from previous turn.
// (= en passant).
struct pre_vuln_context {
    // A vulnerable path from previous turn (usually "null")
    prev_turn_vuln_path: path_base?;
    // Maps every vulnerable square (from previous turn) that can be 
    // attacked by a specific piece this turn (i.e. by looking at the piece's move_tree),
    // to the piece that will be attacked. 
    // Important to understand that the piece is NO LONGER on the square we're attacking.
    attackable_old_vuln_square_to_piece: map<integer, with_pos_and_alignment> = map<integer, with_pos_and_alignment>();
}


// Holds all the moves for single piece on a single turn.
// 
// Chess has some special rules, like en passant, castling, etc.
// And this game add even more rules (like KNIGHTED card).
// On the server side we do a simplified verification,
// so we can skip a few structures. 
struct move_tree {
    start_pos: integer;

    // Holds all squares the piece can move to, the "normal" way. 
    // "Normal" means that the piece could potentially attack this square,
    // so the king isn't allowed to step on one of these squares.
    moves_normal: set<integer>;

    // Holds all squares the piece can move to in the "harmless" way. 
    // "Harmless" means that 
    moves_harmless: set<integer>;

    // Combined "Normal" and "Harmless" (just a cache)
    moves_all: set<integer>;

    attackable_sqs: set<integer>;

    // All squares the piece attacks but is occupied by a same-team piece.
    // The piece cannot take his own, but this piece is now "protected"
    // (this is useful info when we calculate who the opponents king can attack).
    protected_sqs: set<integer>;

    // The route the character must go to arrive at the destination.
    // We always store the full lenght of a potential movement, and for the classical
    // material there will be no overlapping squares in the paths (I think). 
    paths: list<path_base>;

    // A theoretical generalization, but currently only pawns ever use this.
    // When pawn makes a double move, there will be ONE square that's vulnerable to "en passant" 
    // during opponent's turn. We must remember this 
    // This is still only "potential" since we don't know the actual move yet.
    mutable potential_vuln_paths: list<path_base>? = null;

    // Related to the above, but here we keep track of what of the opponent's vulnerable squares
    // (from prev turn) we can attack with this move tree.
    mutable attackable_vulns: pre_vuln_context? = null;


    // ------
    // TODO:
    // ------
    // These are used in the client, but not implemented server side. 

    // Only the king can make a castle, so this is usually null (even for kings)
    //castles: list<potential_castle>? = null;


}

// Move data, used for attacks too.
struct move_arguments {
    game_id: integer;
    last_seen_turn: integer; // What turn the client last saw.
    from_position: integer;
    to_position: integer;
    piece_type_str: text; // The type of piece we are moving
    given_is_knighted: boolean; // If the piece is KNIGHTED
}

// ------------------------------------------------------------------------------
// Check and mate etc
// We don't want to REQUIRE the client to send these, since we want to allow
// for simple clients that doesn't want to implement these calculations.
// 
// However, IF the client has the capability to do it's own check/stale/mate calculations,
// the benefit of sending these values will be:
// 1. Skip checkmate test on the node unless the client claims checkmate, this will save some CPU.
//    (the node will always verify the is_check and is_stalemate, so nothing to be saved in there). 
// 2. Discover differences between how the client and the node calculate the 
//    check/stale/mate status as early as possible.
// ------------------------------------------------------------------------------
struct move_check_arguments {
    is_check: boolean; // Client thinks this is a check
    is_checkmate: boolean; // Client thinks this is a checkmate
    is_stalemate: boolean; // Client thinks this is a stalemate
}

// Attack data, mandatory for attacks.
struct move_attack_arguments {
    attacked_position: integer; // 0-63 DOESN'T HAVE TO BE THE SAME AS THE "TO_POSITION"
    attack_result_type_str: text; // The result type of the attack
    defender_defense_points: integer; // The opponent's defense power
    damage_points: integer; // How much we damage the opponent
}

// Only chaos mode uses these arguments, classic mode can send null.
struct move_chaos_mode_arguments {
    defender_can_retaliate: boolean; // Some objects cannot retaliate (stones, for example)
    is_flash_attack: boolean; // Jumps for example cannot be retaliated against.
    is_luck: boolean; // true if attack was lucky and rolled highest score
}

// Only chaos mode uses these arguments, classic mode can send null.
// If a) main attack result is "hit" and b) this is chaos mode 
// Then client must send this. 
struct move_retaliation_arguments {
    retaliation_result_type_str: text; // The result type of the retaliation
    attacker_defence_points: integer;  // The attacker's defense power (the attacker is curretly defending himself)
    damage_points: integer; // How much the retaliation damaged the attacker
}



