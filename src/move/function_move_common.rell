



// Build a string with some debug stuff
function move_debug_str(m_args: move_arguments): text {

    var dbg = "";
    if (m_args.given_is_knighted) {
        dbg += "K ";
    }
    if (m_args.checking_piece != null) {
        dbg += "C ";
    }
    if (m_args.is_checkmate) {
        dbg += "CM ";
    }
    if (m_args.is_stalemate) {
        dbg += "SM ";
    }
    return dbg;
}

// Just check if within the board
function move_verify_pos(game_id: integer, m_args: move_arguments) {
    require(piece_is_pos_on_board(m_args.from_position) , "Invalid board position " + m_args.from_position + ", id:" + game_id);
    require(piece_is_pos_on_board(m_args.to_position) , "Invalid board position " + m_args.to_position + ", id:" + game_id);
}

// ------------------------------------------------------------
// Some simple sanity about if:
// 1. the piece we're moving exists and 
// 2.has correct alignment etc.
// ------------------------------------------------------------
function move_verify_basic_move(game_id: integer, m_args: move_arguments, minimal_game: minimal_game_result): 
        (p_type: piece_type, p: piece_living_data, align: alignment, opp_align: alignment) {
    val p_type: piece_type = piece_type.value(m_args.piece_type_str);
    val p: piece_living_data? = piece_get_living_data_from_pos(minimal_game.game, m_args.from_position);
    require(p != null, "No piece at position " + m_args.from_position + ", id:" + game_id);

    // Get some data
    var align: alignment = alignment.BLACK;
    var opp_align: alignment = alignment.WHITE;
    if (minimal_game.is_white) {
        align = alignment.WHITE;
        opp_align = alignment.BLACK; 
    }

    //log("Move A.4: " + active_type + " " + p_type);
    require(p.align == align, "Expected piece to have alignment " + align + " but got " + p.align + ", id:" + game_id);
    require(p.active_type == p_type, "Expected piece to have active type " + p.active_type + " but got " + m_args.piece_type_str + ", id:" + game_id);
    require(m_args.given_is_knighted == p.is_knighted, "KNIGHTED status mismatch, given: " + m_args.given_is_knighted + " but got " + p.is_knighted + ", id:" + game_id);

    return (p_type = p_type, p = p, align = align, opp_align = opp_align);
}

// ------------------------------------------------------------
// Does the on-chain updates for a move.
// 1. Create the turn record
// 2. Update piece position
// 3. Create move entity
// ------------------------------------------------------------
function move_update(
        m_args: move_arguments, 
        minimal_game: minimal_game_result, 
        align: alignment, 
        is_castle: boolean, 
        is_check: boolean, 
        p: piece_living_data, 
        new_turn_type: turn_type
): (m: move, new_turn: turn) 
{
    // ----------------
    // 1. Create the turn record
    // ----------------
    // Do this FIRST since lots of verification in here.
    val new_turn = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);

    // ----------------
    // 2. Update piece position
    // ----------------
    // (Really simple for peaceful moves)
    update p.p.vulnerable (.position = m_args.to_position);

    // ----------------
    // 3. Create move entity
    // ----------------
    val m = create move(
        turn = new_turn, 
        piece_moved = p.p, 
        from_position = m_args.from_position, 
        to_position = m_args.to_position,
        is_castle = is_castle,
        is_check = is_check,
        is_checkmate = m_args.is_checkmate,
        is_stalemate = m_args.is_stalemate
    );

    return (m = m, new_turn = new_turn);
}


// ------------------------------------------------------------
// Remove old spells and vuln paths
// ------------------------------------------------------------
function move_cleanup_after_move(is_enchanted_jump: boolean, opp_vuln_ctxt: pre_vuln_context, minimal_game: minimal_game_result, align: alignment) {
      // Enchanted jump (if exists)
    if (is_enchanted_jump) {
        move_remove_enchanted_jump(minimal_game.player_game);
    }

    // Vuln Path (if exists)
    if (opp_vuln_ctxt.prev_turn_vuln_path != null) {
        move_remove_vuln_path(minimal_game.game, align); // Removing this players old vulns
    }
}
