

// Build a string with some debug stuff
function move_debug_str(m_args: move_arguments, check_args: move_check_arguments?): text {

    var dbg = "";
    if (m_args.given_is_knighted) {
        dbg += "K ";
    }

    if (check_args != null) {
        if (check_args.is_check) {
            dbg += "C ";
        }
        if (check_args.is_checkmate) {
            dbg += "CM ";
        }
        if (check_args.is_stalemate) {
            dbg += "SM ";
        }
    }
    return dbg;
}

// Sometimes we want to update the position of a vulnerable, 
// AND update the board at the same time.
function move_common_change_piece_position(
    board_positions_all, 
    v: vulnerable, 
    wpaa: with_pos_and_alignment,
    from_position: integer, 
    to_position: integer
) {
    update v (.position = to_position);
    board_place_character_at(board_positions_all, from_position, to_position, wpaa);
}


// Just check if within the board
function move_verify_pos(game_id: integer, m_args: move_arguments) {
    require(piece_is_pos_on_board(m_args.from_position) , "Invalid board position " + m_args.from_position + ", id:" + game_id);
    require(piece_is_pos_on_board(m_args.to_position) , "Invalid board position " + m_args.to_position + ", id:" + game_id);
}

// ------------------------------------------------------------
// Some simple sanity about if:
// 1. the piece we're moving exists and 
// 2.has correct alignment etc.
// ------------------------------------------------------------
function move_verify_basic_move(game_id: integer, m_args: move_arguments, minimal_game: minimal_game_result): 
        (p_type: piece_type, p: piece_living_data, align: alignment, opp_align: alignment) {
    val p_type: piece_type = piece_type.value(m_args.piece_type_str);
    val p: piece_living_data? = piece_get_living_data_from_pos(minimal_game.game, m_args.from_position);
    require(p != null, "No piece at position " + m_args.from_position + ", id:" + game_id);

    // Get some data
    var align: alignment = alignment.BLACK;
    var opp_align: alignment = alignment.WHITE;
    if (minimal_game.is_white) {
        align = alignment.WHITE;
        opp_align = alignment.BLACK; 
    }

    //log("Move A.4: " + active_type + " " + p_type);
    require(p.vuln.align == align, "Expected piece to have alignment " + align + " but got " + p.vuln.align + ", id:" + game_id);
    require(p.active_type == p_type, "Expected piece to have active type " + p.active_type + " but got " + m_args.piece_type_str + ", id:" + game_id);
    require(m_args.given_is_knighted == p.is_knighted, "KNIGHTED status mismatch, given: " + m_args.given_is_knighted + " but got " + p.is_knighted + ", id:" + game_id);

    return (p_type = p_type, p = p, align = align, opp_align = opp_align);
}

// ------------------------------------------------------------
// Create move entity
// ------------------------------------------------------------
function move_event_creation(
        m_args: move_arguments, 
        minimal_game: minimal_game_result, 
        new_turn: turn,
        piece,
        is_castle: boolean, 
        is_check: boolean, 
): move
{
    // Create move entity
    return create move(
        turn = new_turn, 
        piece_moved = piece, 
        from_position = m_args.from_position, 
        to_position = m_args.to_position,
        is_castle = is_castle,
        is_check = is_check
    );
}


// ------------------------------------------------------------
// Remove old spells and vuln paths
// ------------------------------------------------------------
function move_cleanup_after_move(is_enchanted_jump: boolean, opp_vuln_ctxt: pre_vuln_context, minimal_game: minimal_game_result, align: alignment) {
      // Enchanted jump (if exists)
    if (is_enchanted_jump) {
        move_remove_enchanted_jump(minimal_game.player_game);
    }

    // Vuln Path (if exists)
    if (opp_vuln_ctxt.prev_turn_vuln_path != null) {
        move_remove_vuln_path(minimal_game.game, align); // Removing this players old vulns
    }
}


function move_common_check_stale_n_mate(
    minimal_game: minimal_game_result, 
    board: board_positions_all, // <-- Should been updated with all moves, promotions and deaths
    opp_align: alignment,
    opp_king: piece_living_data,
    our_team: character_team,
    opp_team: character_team,
    check_args: move_check_arguments? 
): (is_check: boolean, is_checkmate: boolean, is_stalemate: boolean) {

    var is_checkmate = false;
    var is_stalemate = false;

    // For check calculation we don't have to use hypothetical moves, since we do the
    // calculation AFTER the move has been saved to the board.
    val check_sb_data = check_sb_build_calculator(
            opp_king.vuln.position, // We're supposed to check the opponent's king
            our_team, // we are the checking team
            board // This isn't a hypothetical move, must use the new board positions
    );

    val is_check = check_sb_is_check(check_sb_data);
    if (is_check) {
        log("move_common_check_stale_n_mate() - Found CHECK.");
        if (check_args != null) {
            require(check_args.is_check or check_args.is_checkmate, "Our calculation says check but client didn't claim check?");
        }

        // -----------------------------------------------------------------------------------
        // We do this as a two-step rocket, where we only calculate mate if we have check.
        // For the mate calculation we must use hypothetical moves, which is heavier.
        // -----------------------------------------------------------------------------------
        var should_do_mate_calc = true;
        if (check_args != null) {
            should_do_mate_calc =  check_args.is_checkmate; // No need to verify checkmate unless the client claims mate.
        }

        if (should_do_mate_calc) {
            val king_wpaa = with_pos_and_alignment(opp_king.vuln.position, opp_align);
            val check_mate_data = check_mate_calc_data_constructor(
                    king_wpaa, // We're supposed to check the opponent's king
                    our_team, // We are the mating team
                    board,
                    check_sb_data
            );
            is_checkmate = check_mate_can_escape(check_mate_data, opp_team);

            if (check_args != null) { 
                // We wouldn't be here unless the client said is_checkmate, so must be "true" now.
                require(is_checkmate, "Client said is_checkmate but we could not verify it.");
            }

            if (is_checkmate) {
                log("Found CHECKMATE. Game over");
                // TODO: Implement this
            }
        }

    } else {
        //log("move_common_check_stale_n_mate() - No CHECK.");
        if (check_args != null) {
            require(not check_args.is_check, "Client thinks this is check but we could not verify it.");
            require(not check_args.is_checkmate, "Client thinks this is checkmate but we could not verify it.");
        }

        // Only check for stalemated opponent if opp is not in check.
        // Stalemate MUST be checked for here, since the caller isn't necessarily benefiting from this ending.
        is_stalemate = move_common_calc_stalemate(
            opp_team, // kings_team
            our_team, // mating_team
            board
        );

        if (is_stalemate) {
            if (check_args != null) {
                require(check_args.is_stalemate, "Our calculation says stalemate but client didn't claim it?");
            }

            log("move_common_check_stale_n_mate() - Found STALEMATE. Game over");
            // TODO: Implement this
        } else {
            if (check_args != null) {
                require(not check_args.is_stalemate, "Client thinks this is stalemate but we could not verify it.");
            }
        }
    }

    return (is_check = is_check, is_checkmate = is_checkmate, is_stalemate = is_stalemate);
}


// -----------------------------------------------------------------------------------
// Stalemate happens when:
// 1. The king is NOT in check
// 2. The king has nowhere to go
// 3. There is no other piece that can move
// 
// The fastest way to verify that we are not in stalemate is to: 
//
// a) Take a random non-king piece, and see if it has any moves in its [move_tree], 
// if not, take next until only the king is left.
// 
// b) When we get to the king it gets harder, we must use the [kings_escape_calculator].
// -----------------------------------------------------------------------------------
function move_common_calc_stalemate(
    kings_team: character_team, 
    mating_team: character_team,
    board_all: board_positions_all
): boolean {
    
    // a) Take a random non-king piece, and see if it has any moves in its [move_tree]
    for (subject in team_get_subjects_list(kings_team)) {
        if(inner_single_subject_can_act(board_all, subject)) {
            // Not stalemate
            //log("move_common_calc_stalemate() - Not stalemate since subject at " + subject.position + " can take action.");
            return false;
        }
    }
    
    // b) When we get to the king it gets harder, we must use the [king_escape_data]
    // Note that for stalemate there is no subject that can help the king, so the king must find a good square alone
    val king = team_get_king(kings_team)!!;
    val king_wpaa = with_pos_and_alignment(king.vuln.position, king.vuln.align);
    
    val king_escape_data = king_escape_builder(king_wpaa, mating_team, board_all);
    val (escape_pos, is_attack) = king_escape_find_first_without_help(king_escape_data, king_wpaa);
    
    if (escape_pos != null) {
        return false; // Not stalemate, since the king can escape
    } else {
        log("move_common_calc_stalemate() - Stalemate detected! King at " + king.vuln.position + " has no moves and is not in check.");
        return true;
    }
}




// Returns "true" if this subject can take action the coming turn.
function inner_single_subject_can_act(board_all: board_positions_all, subject: piece_living_data): boolean {
    // Get all valid moves for the subject
    val is_enchanted_jump = false;  // <-- Magic Jumps shouldn't be relevant here.

    // TODO: We don't care about "en passant" here, but we should,
    // since it's possible that the ONLY move that the king's team can do is 
    // en passant, and if this is the case it's NOT a stalemate.
    val v_ctxt =  pre_vuln_context(null);

    val (norm_mt, jump_mt) = rules_get_all_valid_moves(
            board_all, 
            subject.active_type,  // We wanna know how it moves, not what it is.
            is_enchanted_jump,
            subject.is_knighted,
            subject.vuln.position, 
            subject.vuln.align,
            v_ctxt 
    );
    // Ignore castle, since this never a king.
    
    if (norm_mt != null and move_tree_can_take_action(norm_mt)) {
        return true;
    }
    
    if (jump_mt != null and move_tree_can_take_action(jump_mt)) {
        return true;
    }
    
    return false;
}


// -----------------------------------------------------------------------------------
// Portals
// -----------------------------------------------------------------------------------


// -----------------------------------------------------------------------
// Look for unblocked portals owned by given align. There are two cases we handle here:
// 1. (Simple) Lead moved to an unblocked portal entry.
// 2. (Trickier) A piece has been standing on an entry of a portal that just got unblocked.
//
// Both (1) and (2) should go through the portal.
// -----------------------------------------------------------------------
function move_common_use_all_unblocked_portals(
    game,
    curr_turn: turn, 
    board_positions_all,
    opp_team: character_team,
    my_align: alignment // Player can only use OWNED portals
): list<portal_event> {
    val hist_portals = list<portal_event>();
    
    // Find all unblocked portals owned by this alignment
    val portals = board_find_unblocked_portals_owned_by(board_positions_all, my_align);

    for (portal in portals) {

        // Check if there's a character at the entry
        val piece = board_get_at(board_positions_all, portal.entry_pos);
        if (piece != null and piece.alignment == my_align) {
            // Character is ours, use the portal
            val hist_portal = move_common_use_portal_depending_on_piece_type(
                        game,
                        curr_turn,
                        board_positions_all,
                        opp_team,
                        my_align,
                        piece,
                        portal
            );
                    
            if (hist_portal != null) {
                hist_portals.add(hist_portal);
            }
        }
    }
    
    return hist_portals;
}

// -----------------------------------------------------------------------
// We are supposed to use the given portal, but there is one exception:
// If the character is a king, we should only use the portal if the destination isn't attacked.
// -----------------------------------------------------------------------
function move_common_use_portal_depending_on_piece_type(
    game,
    curr_turn: turn, 
    board_positions_all,
    opp_team: character_team,
    my_align: alignment,
    piece_wpaa: with_pos_and_alignment,
    portal: owned_portal
): portal_event? {
    // Get the piece living data
    val piece_data = piece_get_living_data_from_pos(game, piece_wpaa.pos);
    require(piece_data != null, "Error: Could not find piece at position " + piece_wpaa.pos);
    
    var use_portal = true;

    // Check if it's a king
    if (piece_data.original_type == piece_type.KING) {
        val king_wpaa = piece_wpaa;

        // Can only move through the portal if there is no foe attacking the exit
        val check_calc_data = check_sb_build_hypothetical_king_move(
            king_wpaa,
            king_wpaa.pos,
            portal.exit_pos,
            opp_team,
            board_positions_all
        );
        
        if (check_sb_is_check(check_calc_data)) {
            log("move_common_use_portal_depending_on_piece_type() - Found an unblocked portal with the king on the entry, but CANNOT enter because exit is attacked: " + portal.entry_pos + " -> " + portal.exit_pos);
            use_portal = false;
        } else {
            // Move the king through the portal
            log("move_common_use_portal_depending_on_piece_type() - Found an unblocked portal with the king on the entry: " + portal.entry_pos + " -> " + portal.exit_pos);
        }
    } else {
        // For non-king pieces, just move through the portal
        log("move_common_use_portal_depending_on_piece_type() - Found an unblocked portal with a (non-king) friend on the entry: " + portal.entry_pos + " -> " + portal.exit_pos);
    }

    if (use_portal) {
        // Move the piece through the portal
        move_common_change_piece_position(board_positions_all, piece_data.p.vulnerable, piece_wpaa, portal.entry_pos, portal.exit_pos);
        
        return move_portal_create_event(game, curr_turn, portal, piece_data.p);
    } else {
        return null;
    }
}