

// Build a string with some debug stuff
function move_debug_str(m_args: move_arguments, check_args: move_check_arguments?): text {

    var dbg = "";
    if (m_args.given_is_knighted) {
        dbg += "K ";
    }

    if (check_args != null) {
        if (check_args.is_check) {
            dbg += "C ";
        }
        if (check_args.is_checkmate) {
            dbg += "CM ";
        }
        if (check_args.is_stalemate) {
            dbg += "SM ";
        }
        if (check_args.is_insufficient_mating_material) {
            dbg += "IM ";
        }
    }
    return dbg;
}

function move_common_get_turn_type(
    m_type: move_type, 
    is_white: boolean): turn_type {
    if (is_white) { 
        if (m_type == move_type.DOUBLE_MOVE_LAST) {
            return turn_type.NEUTRAL_MOVE_1_HIJACKED;
        } else {
            return turn_type.WHITE_MOVE;
        }
    } else {
        if (m_type == move_type.DOUBLE_MOVE_LAST) {
            return turn_type.NEUTRAL_MOVE_2_HIJACKED;
        } else {
            return turn_type.BLACK_MOVE;
        }
    }
}

// Sometimes we want to update the position of a vulnerable, 
// AND update the board at the same time.
function move_common_change_piece_position(
    game_id: integer,
    last_rot_nr: integer,
    a: alive, 
    from_position: integer, 
    to_position: integer,
    // Extra: Update these data structures
    board_positions_all,  // Must update the board when we move a piece
    our_team: character_team? // Must update the team when we move a piece, if we have one.
) {
    update a (.position = to_position);
    val attack_allowed = false; // Think we should protest if the position is occupied.

    // Extra: Update these data structures
    board_place_character_at(board_positions_all, from_position, to_position, attack_allowed);
    if (our_team != null) {
        team_move_character_from_to(our_team, from_position, to_position);
    }

    // Good place to print new board state to log (before something crashes)
    val dbg_board =board_debug_print(game_id, last_rot_nr, board_positions_all);
    log(dbg_board);

}


// Just check if within the board
function move_verify_pos(game_id: integer, m_args: move_arguments) {
    require(pos_is_on_board_int(m_args.from_position) , "Invalid board position " + m_args.from_position + ", id:" + game_id);
    require(pos_is_on_board_int(m_args.to_position) , "Invalid board position " + m_args.to_position + ", id:" + game_id);
}

// ------------------------------------------------------------
// Some simple sanity about if:
// 1. the piece we're moving exists and 
// 2.has correct alignment etc.
// ------------------------------------------------------------
function move_verify_basic_move(game_id: integer, m_args: move_arguments, minimal_game: minimal_game_result): 
        (p_type: piece_type, p: piece_living_data, align: alignment, opp_align: alignment) {
    val p_type_str = m_args.piece_type_str.upper_case();
    val p_type: piece_type = piece_type.value(p_type_str);
    val p: piece_living_data? = piece_get_living_data_from_pos(minimal_game.game, m_args.from_position);
    require(p != null, "No piece at position " + m_args.from_position + ", id:" + game_id);

    // Get some data
    var align: alignment = alignment.BLACK;
    var opp_align: alignment = alignment.WHITE;
    if (minimal_game.is_white) {
        align = alignment.WHITE;
        opp_align = alignment.BLACK; 
    }

    //log("Move A.4: " + active_type + " " + p_type);
    require(p.vuln.align == align, "Expected piece to have alignment " + align + " but got " + p.vuln.align + ", id:" + game_id);
    require(p.active_type == p_type, "Expected piece to have active type " + p.active_type + " but got " + p_type_str + ", id:" + game_id);
    require(m_args.given_is_knighted == p.is_knighted, "KNIGHTED status mismatch, given: " + m_args.given_is_knighted + " but got " + p.is_knighted + ", id:" + game_id);

    return (p_type = p_type, p = p, align = align, opp_align = opp_align);
}

// ------------------------------------------------------------
// Create move entity
// ------------------------------------------------------------
function move_event_creation(
        m_args: move_arguments, 
        minimal_game: minimal_game_result, 
        new_turn: turn,
        piece,
        is_castle: boolean, 
        is_enchanted_jump: boolean,
        is_check: boolean, 
        board_compressed_str: text
): move
{
    // Create move entity
    val mv = create move(
        turn = new_turn, 
        piece_moved = piece, 
        from_position = m_args.from_position, 
        to_position = m_args.to_position,
        is_castle = is_castle,
        is_check = is_check,
        board_compressed_str = board_compressed_str
    );

    if (is_enchanted_jump) {
        move_event_jump_create(minimal_game.game, new_turn, piece, mv);
    }

    return mv;
}


// ------------------------------------------------------------
// Remove old spells and vuln paths
// ------------------------------------------------------------
function move_cleanup_after_move(is_enchanted_jump: boolean, opp_vuln_ctxt: pre_vuln_context, minimal_game: minimal_game_result, opp_align: alignment) {
    // 1. Enchanted jump (if exists)
    //if (is_enchanted_jump) { // The reason we cannot have this check is that sometimes the player moves a different piece (not the jumper)
    jump_remove_enchanted(minimal_game.player_game);
    //}

    // 2. Vuln Path (if exists)
    if (opp_vuln_ctxt.prev_turn_vuln_path != null) {
        move_remove_vuln_path(minimal_game.game, opp_align); // Removing opponent's old vulns
    }

    // 3. Count down all enchantments
    card_enchantment_count_down_all_durations(minimal_game.game);
}



// -----------------------------------------------------------------------------------
// Portals
// -----------------------------------------------------------------------------------


// -----------------------------------------------------------------------
// Look for unblocked portals owned by given align. There are two cases we handle here:
// 1. (Simple) Lead moved to an unblocked portal entry.
// 2. (Trickier) A piece has been standing on an entry of a portal that just got unblocked.
//
// Both (1) and (2) should go through the portal.
// -----------------------------------------------------------------------
function move_common_use_all_unblocked_portals(
    game_id: integer,
    last_rot_nr: integer,
    game,
    curr_turn: turn, 
    board_positions_all,
    our_team: character_team?, // Only use this for position updates (likely overkill?)
    opp_team: character_team,
    my_align: alignment, // Player can only use OWNED portals
    end_args: move_end_events_arguments?
): list<portal_event> {
    val hist_portals = list<portal_event>();
    
    // Find all unblocked portals owned by this alignment
    val portals = board_portal_find_unblocked_owned_by(board_positions_all, my_align);

    log("game_id: "+game_id+ " - Found " + portals.size() + " unblocked portals owned by " + my_align);

    for (portal in portals) {

        // Check if there's a character at the entry
        val piece = board_get_at(board_positions_all, portal.entry_pos);
        if (piece != null and piece.alignment == my_align) {

            // Character is ours, use the portal
            val hist_portal = move_common_use_portal_depending_on_piece_type(
                        game_id,
                        last_rot_nr,
                        game,
                        curr_turn,
                        board_positions_all,
                        our_team,
                        opp_team,
                        my_align,
                        piece,
                        portal
            );
                    
            if (hist_portal != null) {
                // Portal was used

                // Discussion:
                // Validation happens here, despite we already begun update phase.
                // This is because we don't want to do all these SQL checks twice,
                // but the downside is that this is impossible to unit-test.
                require(end_args != null, 
                "move_common_use_all_unblocked_portals() - ERROR: Node thinks we should use portal: "+ portal.entry_pos + " -> " + portal.exit_pos 
                + ", but no end_args provided!");
                require(portal_simple_does_found_match_given(end_args.used_portals, portal), 
                "move_common_use_all_unblocked_portals() - ERROR: Node thinks we should use portal: " + portal.entry_pos + " -> " + portal.exit_pos 
                + ", but the move does not match the given portals (size: " + end_args.used_portals.size() + ").");

                hist_portals.add(hist_portal);
            }
        }
    }
    
    return hist_portals;
}



// -----------------------------------------------------------------------
// We are supposed to use the given portal, but there is one exception:
// If the character is a king, we should only use the portal if the destination isn't attacked.
// -----------------------------------------------------------------------
function move_common_use_portal_depending_on_piece_type(
    game_id: integer,
    last_rot_nr: integer,
    game,
    curr_turn: turn, 
    board_positions_all,
    our_team: character_team?, // Only use this for position updates (likely overkill?)
    opp_team: character_team,
    my_align: alignment,
    piece_wpat: with_pos_and_alignment_and_type,
    portal: portal_simple
): portal_event? {
    // Get the piece living data
    val piece_data = piece_get_living_data_from_pos(game, piece_wpat.pos);
    require(piece_data != null, "Error: Could not find piece at position " + piece_wpat.pos);
    
    var use_portal = true;

    // Check if it's a king
    if (piece_data.original_type == piece_type.KING) {
        val king_wpaa = piece_wpat;

        // Can only move through the portal if there is no foe attacking the exit
        val check_calc_data = check_sb_build_hypothetical_king_move(
            game_id,
            king_wpaa.pos,
            portal.exit_pos,
            opp_team,
            board_positions_all
        );
        
        if (check_sb_is_check(check_calc_data)) {
            log("game_id: "+game_id+ " - Found an unblocked portal with the king on the entry, but CANNOT enter because exit is attacked: " + portal.entry_pos + " -> " + portal.exit_pos);
            use_portal = false;
        } else {
            // Move the king through the portal
            log("game_id: "+game_id+ " - Found an unblocked portal with the king on the entry: " + portal.entry_pos + " -> " + portal.exit_pos);
        }
    } else {
        // For non-king pieces, just move through the portal
        log("game_id: "+game_id+ " - Found an unblocked portal with a (non-king) friend on the entry: " + portal.entry_pos + " -> " + portal.exit_pos);
    }

    if (use_portal) {
        // Move the piece through the portal
        move_common_change_piece_position(game_id, last_rot_nr, piece_data.vuln.a, portal.entry_pos, portal.exit_pos, board_positions_all, our_team);
        
        return move_event_portal_create(game, curr_turn, portal, piece_data.p);
    } else {
        return null;
    }
}

