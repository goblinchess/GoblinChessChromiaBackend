// ------------------------------------------------------------
// Card Inspectors
// ------------------------------------------------------------

// ------------------------------------------------------------
// Returns "true" if this card will cause the player to skip their move
//
// Explanation:
// There are 3 spells that will consume the "move" turn of the player
// who cast the spell: Double Move, Portal, Switch Place.
// 
// The motivation for Portal and Switch Place is that these 
// spells replaces the normal move, so allowing a regular move
// after playing these cards would effectivly give the player 
// two moves in a row. 
//
// The motivation for Double Move is that it is a "move consuming"
// card, but it is not a spell, so it should not consume the move
// turn of the player who cast the spell.
// ------------------------------------------------------------
function card_should_skip_move(c_type: card_type): boolean {
    when (c_type) {
        PORTAL -> return true; // The portal move replaces the regular move
        DOUBLE_MOVE -> return true; // Have to skip move before double move
        SWITCH_PLACE -> return true; // The switch replaces the regular move
        else -> return false;
    }
}


// ------------------------------------------------------------
// Only one card is forbidden for classic mode, and that's POTION.
// 
// Motivation:
// The reason we only allow POTION for Chaos mode is that we only 
// send HIT/MISS/Retaliation etc for Chaos Mode, and POTION will 
// make the first attack a HIT in classic mode, meaning that there is
// possibility of retaliation etc, data we don't have in classic.
// ------------------------------------------------------------
function card_is_allowed_in_classic_mode(c_type: card_type): boolean {
    when (c_type) {
        POTION -> return false; 
        else -> return true;
    }
}



// Given a turn number, return the card type that was played on that turn
function card_get_type_for_turn_number(t_number: integer): card_type? {
    return (t: turn, c: card) @? {
        t.number == t_number,
        c.turn == t
    } (c.card_type);
}

// Takes an index (0-9) and returns the corresponding card_type
//
// Note:
// The client side must have the same indexing of the card or else the 
// end-of-game verification of the random numbers won't work.
//
// Example:
// When the client generates a "6" for card 2 in the hand, it must 
// mean "RESURRECT" or else the validation will break on the node-side.
function card_get_type_from_index(idx: integer): card_type {
    when (idx) {
        0 -> return card_type.FROG;
        1 -> return card_type.TURN_TO_STONE;
        
        // This-turn-only change
        2 -> return card_type.JUMP;
        3 -> return card_type.SWITCH_PLACE;
        
        // Immediate Spell affecting the entire board
        4 -> return card_type.WALL;
        5 -> return card_type.PORTAL;
        
        // Delayed Spell
        6 -> return card_type.RESURRECT; // Resurrect next killed Enemy
        7 -> return card_type.DOUBLE_MOVE;

        // Enchant change
        8 -> return card_type.KNIGHTED;
        9 -> return card_type.POTION; // Putting this last so we can omit it (by using 0-8 range) for classic mode.
        
        else -> {
            require(false, "V1.0 only has 10 cards: " + idx);
            return card_type.FROG; // This will never execute due to the require, but needed for return type
        }
    }
}

// Returns all cards played by the given player.
function card_get_all_played(pg: player_game): list<card_history> {
    val results = (c: card)@* {
        c.played_by == pg
    } (c.card_type, c.draw_order_nr, turn_nr =c.turn.number, c.turn);

    val ret_list = list<card_history>();
    for(res in results) {
        val ch = card_history(res.card_type, draw_order_nr = res.draw_order_nr, turn_nr = res.turn_nr, turn = res.turn);
        ret_list.add(ch);
    }

    return ret_list;
}