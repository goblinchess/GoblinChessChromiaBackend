// ----------------
// Portals
// ----------------

/*
function portal_is_owned_by(portal: owned_portal, align: alignment): boolean {
    return portal.owner_alignment == align; // Trivial

}
*/




// Return a list of all portals owned by the player.
//
// Discussion: 
// We don't need ALL the portals, 
// since the player can only use his own.
// (It's as if the opponent's portals are invisible, 
// and the movements are inscrutable to the this player)
// TODO: This might change when we add check/mate calculations.
/*
function portal_get_all_by_owner(player_game: player_game, player_align: alignment): list<owned_portal> {

    val ps = (p: portal)@* {p.owned_by == player_game} (prtl = p, p.entry_position, p.exit_position);

    val res = list<owned_portal>();
    for (p in ps) {
        val tmp = owned_portal(
            portal = p.prtl,
            entry_pos = p.entry_position,
            exit_pos = p.exit_position, 
            owner_alignment = player_align);
        res.add(tmp);
    }
    return res;
}*/

// We put this factory here, since we don't want heavy dependencies in the portal_simple module.
function portal_simple_get_all_by_owner(player_game: player_game, player_align: alignment): list<portal_simple> {

    val ps = (p: portal)@* {p.owned_by == player_game} (prtl = p.rowid, p.entry_position, p.exit_position);

    val res = list<portal_simple>();
    for (p in ps) {
        val tmp = portal_simple(
            rowid = p.prtl,
            entry_pos = p.entry_position,
            exit_pos = p.exit_position, 
            owner_alignment = player_align);
        res.add(tmp);
    }
    return res;
}

// We put this factory here, since we don't want heavy dependencies in the portal_simple module.
function portal_simple_get_all(gme: game): list<portal_simple> {

    val ps = (p: portal, pg: player_game)@* {
        p.owned_by == pg,
        pg.game == gme
    } (prtl = p.rowid, p.entry_position, p.exit_position, pg.is_white);

    val res = list<portal_simple>();
    for (p in ps) {

        val calc_align = if (p.is_white) alignment.WHITE else alignment.BLACK;

        val tmp = portal_simple(
            rowid = p.prtl,
            entry_pos = p.entry_position,
            exit_pos = p.exit_position, 
            owner_alignment = calc_align);
        res.add(tmp);
    }
    return res;
}

// When a portal card is played, we need to set up the portal on the board.
function portal_setup(owned_by: player_game, card: card, entry_pos: integer, exit_pos: integer) {

    // Half-assed check (assumping client did proper validation)
    val res = portal@? {.owned_by == owned_by, .entry_position == entry_pos};
    require(res == null, "Cannot create another portal at with entry pos " + entry_pos);

    create portal (
        .card = card,
        .owned_by = owned_by,
        .entry_position = entry_pos,
        .exit_position = exit_pos
    );
}