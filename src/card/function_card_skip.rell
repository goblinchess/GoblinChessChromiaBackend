
function card_skip_inner(
    caller_pubkey: pubkey,
    game_id: integer,
    last_seen_turn: integer
) {

    // -----------    
    // A. Verication
    // -----------    
    log("game_id: " + game_id +" - Skip Card Beign, last turn: " + last_seen_turn );

    // 1. Check player entity
    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);
    require (minimal_game != null, "Player is not in a game");

    // A.2. Is game is out of sync? 
    val curr_turn = minimal_game.curr_turn_nr;
    require(curr_turn == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + curr_turn);
    
    // -----------    
    // B. Updates 
    // -----------    
    var new_turn_type = turn_type.BLACK_CARD_SKIPPED;
    if (minimal_game.is_white) { 
        new_turn_type = turn_type.WHITE_CARD_SKIPPED;
    }

    // B.1. Create the turn record
    // Lots of verification in here.
    val new_turn = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);

    // B.2 Maybe Revert Enchantments
    val reverted_list: list<card_enchantment_reverted> = card_enchantment_revert_timed_out(minimal_game.game, minimal_game.player_game);

    // B.3. Create the events
    for (reverted in reverted_list) {
        card_event_create_remove_enchantment(game_id, minimal_game.game, new_turn, reverted.orig_card, reverted.enchanted_piece);
    }

    log("game_id: " + game_id +" - /Skip Card End, new turn type: " + new_turn_type);
}
