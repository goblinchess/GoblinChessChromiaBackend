
// -------------------------------------
// A function is easier to test. 
// -------------------------------------
function card_play_inner(
    caller_pubkey: pubkey,
    game_id: integer, 
    last_seen_turn: integer, // What turn the client last saw.
    card_type_str: text, 
    card_order_number: integer, // The order number when the card was drawn/generated.
    card_picks: list<integer>, // The squares picked by the player when playing the card.
    rnd_numbers: list<rnd_data> // If any randomness was used playing this card, the numbers generated goes in here.
) {
    // A.1. Check player entity
    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);
    require (minimal_game != null, "Player is not in a game");

    // B.1. Maybe Revert Enchantments:
    // We need to revert enchantments before we can verify the picks, since if a STONE times out (becomes a piece again)
    // it should be allowed to be picked for a new spell.
    //
    // NOTE: This is an UPDATE on the board, meaning that we cannot test any require() after this 
    //       line. Therefore we must call the [card_play_inner()] function in our tests to verify 
    //       that require() statements work.
    val reverted_list: list<card_enchantment_reverted> = card_enchantment_revert_timed_out(minimal_game.game, minimal_game.player_game);

    card_play_inner_core(
        minimal_game, 
        game_id, 
        last_seen_turn, 
        card_type_str, 
        card_order_number, 
        card_picks,
        rnd_numbers,
        reverted_list
    );
}


// -------------------------------------
// Use this function for tests where we 
// expect the requirements to fail.
// It won't revert the old enchantments, so that
// must be done manually before calling this function.
// -------------------------------------
function card_play_inner_core(
    minimal_game: minimal_game_result,
    game_id: integer, 
    last_seen_turn: integer, // What turn the client last saw.
    card_type_str: text, 
    card_order_number: integer, // The order number when the card was drawn/generated.
    card_picks: list<integer>, // The squares picked by the player when playing the card.
    rnd_numbers: list<rnd_data>, // If any randomness was used playing this card, the numbers generated goes in here.
    reverted_list: list<card_enchantment_reverted> // List of reverted enchantments.
) {
    // -----------    
    // A. Verication
    // -----------    
    log("game_id: " + game_id + "- Play Card Beign, last turn: " + last_seen_turn + ", type: " + card_type_str + ", order number: " + card_order_number );

    var new_turn_type = turn_type.BLACK_CARD;
    var my_color = alignment.BLACK;
    var opp_color: alignment = alignment.WHITE;
    if (minimal_game.is_white) { 
        new_turn_type = turn_type.WHITE_CARD;
        my_color = alignment.WHITE;
        opp_color = alignment.BLACK; 
    }
    
    // Yeah, but is it the CORRECT game?
    val found_game_rowid = minimal_game.game.rowid.to_integer();
    require (found_game_rowid == game_id, "Player things the game is " + game_id + " but is currently in game " + found_game_rowid);

    // A.2. Is game is out of sync? 
    val curr_turn = minimal_game.curr_turn_nr;
    require(curr_turn == last_seen_turn, "Player client is on turn " + last_seen_turn + " but blockchain is on turn " + curr_turn);
    
    // A.3. Check card type
    val card_type: card_type = card_type.value(card_type_str);

    // A.4. Check if player has cards left
    val cards_left = minimal_game.player_game.cards_left;
    require(cards_left > 0, "How can this player play a card when they have no cards left?");
    
    // A.5. Check if correct number of picks are sent for this card
    val expected_pick_types: list<card_pick_type> = card_pick_get_by_card_type(card_type); 
    val expected_nr_of_picks = expected_pick_types.size();
    require(expected_nr_of_picks == card_picks.size(), "Expected " + expected_nr_of_picks + " picks for card " + card_type_str + " but got " + card_picks.size());

    // We need the full board
    val board: list<with_pos_and_alignment> = vuln_get_all_as_wpaa(minimal_game.game); 
    val portals: list<owned_portal> = portal_get_all_by_owner(minimal_game.player_game, my_color);
    val board_positions_all = board_positions_all_constructor(minimal_game.game, board, portals);

    // A.6. Check individual picks 
    val pick_piece_map = map<integer, piece_living_data>(); // Save the pieces we found on the board for the pick.
    val pick_summary = card_pick_are_valid(minimal_game.game, card_type, card_type_str, expected_pick_types, card_picks, my_color, pick_piece_map);


    // -----------------------------------------------------------------------------------
    // A.7.Check/Mate verifications
    // The general rule is that a player cannot put his own king in check during his/her turn.
    // Our aim is to detect and prevent this, but it's near impossible since many situations.
    // -----------------------------------------------------------------------------------
    // A.7.1. Apply restrictions if we are in check
    // If we are in check, there are restriction on what spells we can cast.
    // 
    // -----------------+----------------------------------------------------------------
    // Forbidden Spell  | Message
    // -----------------+----------------------------------------------------------------
    // DOUBLE MOVE      = King is in check! 
    //                    You cannot use this spell.
    //                    Explanation: Your move would be forfeit after this card is played,
    //                    meaning that your king would remain in check during your entire turn.
    // PORTAL           = King is in check! 
    //                    You cannot use this spell.
    //                    Explanation: Only non-kings can discover a portal,
    //                    and your move would be forfeit after the portal is created,
    //                    meaning that your king would remain in check during your entire turn.
    // SWITCH PLACE     = (We CAN use it, but only if we use it on the king to make the king escape.)
    //                    King is in check! 
    //                    If you use this spell you must switch the king to a safe place.
    //                    Explanation: If you switch two non-king pieces,
    //                    your move would be forfeit after this card is played,
    //                    meaning that your king would remain in check during your entire turn.
    // WALL             = (We CAN use it, but only if we use it to block the check)
    //                    King is in check! 
    //                    You cannot use this spell unless you use it to prevent the check.
    // -----------------+----------------------------------------------------------------
    //
    // The reason why we restrict WALL when in check is tricky:
    // There is a possibility that the player uses the WALL to create self-mate.
    // It's too hard to calculate mate when playing wall, so we're doing this instead. 
    // (Note: the wall can also create self-stalemate, but we don't check for that)
    // -----------------------------------------------------------------------------------

    when (card_type) {

        DOUBLE_MOVE -> {
            if (minimal_game.in_check) {
                // Simple
                require(false, "Cannot use DOUBLE MOVE when in check");
            }
        }
        PORTAL -> {
            if (minimal_game.in_check) {
                // Simple
                require(false, "Cannot use PORTAL when in check");
            }

            // Also, we cannot create a portal for a piece that is currently preventing a check.

            // King's position
            val my_king_pld = piece_get_living_data_for_king(minimal_game.game, my_color);
            val king_from_pos = my_king_pld!!.vuln.position;

            // Expensive, so we wait until last moment
            val opp_team = team_build_from_db(minimal_game.game, opp_color);

            val portal_entry_pos = pick_piece_map[0].vuln.position;
            val calc: check_stat_board_calculator_data = check_sb_build_hypothetical_subject_gone(
                game_id,
                portal_entry_pos,
                king_from_pos,
                opp_team,
                board_positions_all
            );

            require(not check_sb_is_check(calc), "Cannot use PORTAL on a piece, so that when it moves to the exit it causes a check.");
        }
        SWITCH_PLACE -> {   
            val (king_pld: piece_living_data?, other_pld: piece_living_data?) = card_switch_extract_king_pld(pick_piece_map.values());
            if (king_pld != null) {
                // We're switching the king, now we will verify it won't get into check after the switch.

                // Expensive, so we wait until last moment
                val opp_team = team_build_from_db(minimal_game.game, opp_color);

                val king_from_pos = king_pld.vuln.position;
                val king_to_pos = other_pld!!.vuln.position;
                val king_wpaa = with_pos_and_alignment(king_from_pos, king_pld.vuln.align);
                val calc: check_stat_board_calculator_data = check_sb_build_hypothetical_king_move(
                    game_id,
                    king_wpaa,
                    king_from_pos,
                    king_to_pos,
                    opp_team,
                    board_positions_all
                );

                require(not check_sb_is_check(calc), "Cannot SWITCH the king to a position where it is in check.");
            }

            if (minimal_game.in_check) {
                // Note: this is all we have to do, since we've already verified 
                // that the king can't move to a check position.
                val (king_pld2: piece_living_data?, other_pld2: piece_living_data?) = card_switch_extract_king_pld(pick_piece_map.values());
                // One of the pieces must be the king.
                require(king_pld2 != null, "Cannot use SWITCH PLACE when in check, unless switching the king away from check.");
            }
        }
        WALL -> {
            card_wall_verify_picks(board_positions_all, card_picks);

            if (minimal_game.in_check) {
                // Only allow wall if it blocks the check.
           
                // Expensive, so we wait until last moment
                val opp_team = team_build_from_db(minimal_game.game, opp_color);
                val my_king_pld = piece_get_living_data_for_king(minimal_game.game, my_color);

                val king_from_pos = my_king_pld!!.vuln.position;
                val calc: check_stat_board_calculator_data = check_sb_build_hypothetical_wall(
                    game_id,
                    card_picks,
                    king_from_pos,
                    opp_team,
                    board_positions_all
                );

                require(not check_sb_is_check(calc), "Cannot SWITCH the king to a position where it is in check.");
            }
        }
        else -> {
            // Ok, we can use this card
        }
    }


    log("game_id: " + game_id + " - Card passed verification, type: " + card_type_str + " order number: " + card_order_number + " picks: " + pick_summary);

    // -----------    
    // B. Updates
    // -----------    
    // B.1. Create the turn record
    // Do this FIRST since lots of verification in here.
    val new_turn = turn_create(minimal_game.game, minimal_game.player_game, new_turn_type, minimal_game.is_white);

    // B.2. Create the events
    for (reverted in reverted_list) {
        card_event_create_remove_enchantment(game_id, minimal_game.game, new_turn, reverted.orig_card, reverted.enchanted_piece);
    }

    // We must replicate the random number used on the client side.
    val rnd_list = list<rnd_result>();

    // B.3. We create the card when it's played
    val new_card =create card(minimal_game.player_game, new_turn, card_type, card_order_number);

    // B.4. Count down the cards left
    update minimal_game.player_game (.cards_left = cards_left - 1);

    // B.5. Create the picks
    for (i: integer in range(expected_pick_types.size())) {
        val expected_p_type: card_pick_type = expected_pick_types[i];
        val given_pos: integer = card_picks[i];

        val is_piece = pick_piece_map.contains(given_pos);
        val card_pick = create card_pick(
            .picked_square = given_pos, 
            .card = new_card, 
            .order_number = i, 
            .is_piece = is_piece
        );

        if (is_piece) {
            val piece = pick_piece_map[given_pos];
            // To connect the card pick to the piece that was picked.
            create card_pick_piece(card_pick, piece.p);
        }
    }

    // -----------    
    // B.6. Implement the effect of the card
    // -----------    
    // Card pick verification should have been done already.
    when (card_type) {
        // ----------------
        // a) Enchantments (no change in position or alignment, so no update of [board_positions_all])
        // ----------------
        FROG -> {
            card_enchantment_create_frog(game_id, minimal_game.game, new_turn, minimal_game.player_game, new_card, pick_piece_map[0]);
        }
        TURN_TO_STONE -> {
            card_enchantment_create_stone(game_id, minimal_game.game, new_turn, minimal_game.player_game, new_card, pick_piece_map[0]);
        }
        POTION -> {
            card_enchantment_create_potion(game_id, minimal_game.game, new_turn, new_card, pick_piece_map[0]);
        }
        KNIGHTED -> {
            card_enchantment_create_knighted(game_id, minimal_game.game, new_turn, new_card, pick_piece_map[0]);
        }
        JUMP -> {
            card_enchantment_create_jump(game_id, minimal_game.player_game, new_card, pick_piece_map[0]);
        }
        // ----------------
        // b) Something happens on the Board 
        // ----------------
        SWITCH_PLACE -> {
            alive_switch_place(my_color, pick_piece_map[0].vuln.a, pick_piece_map[1].vuln.a);
            // Since both pieces have the same alignment, the switch won't effect the [board_positions_all].
        }
        WALL -> {
            alive_setup_wall(minimal_game.game, minimal_game.player_game, card_picks[0], card_picks[1], card_picks[2]); 
        }
        PORTAL -> {
            // Portal needs a random number
            require(rnd_numbers.size() == 1, "Portal needs one random number used when the exit is calculated.");
            val rnd_data = rnd_numbers[0];

            val portal_entry_pos = card_picks[0];
            val portal_exit_pos = card_picks[1]; // Strictly not a pick, but we do it this way.

            card_portal_create_and_validate(minimal_game.player_game, new_card, pick_piece_map, portal_entry_pos, portal_exit_pos, rnd_data, new_turn, board_positions_all);
        }
        // ----------------
        // c) Delayed effects (no update of [board_positions_all])
        // ----------------
        RESURRECT -> {
            // Note: the random number is used when the actual resurrection happens.
            resurrect_delayed_create_potential(minimal_game.player_game, new_card);
        }
        DOUBLE_MOVE -> {
            card_delayed_create_double_move(minimal_game.player_game, new_card);
        }
    }

    // B.7. Move to next turn
    log("game_id: " + game_id + " - /Play Card End, new turn type: " + new_turn_type + ", type: " + card_type_str + ", order number: " 
            + card_order_number + ", picks: " + pick_summary + ", in_check: " + minimal_game.in_check);
}



