

// -------------------------------------
// Debug queries
// -------------------------------------
query get_players() {
    return player@* {};
}

query get_player_names() {
    return player@* {} (.name);
}

query get_player_by_name(searchName: text) {
    return player@? {.name == searchName};
}

// -------------------------------------
// Lobby 
// -------------------------------------

query consume_lobby_entry(
    player_signer: pubkey, 
    curr_ms: timestamp,
    game_type_str: text) :pubkey? {

    // Get the requesting player
    val requesting_player = player@{.signer == player_signer};
    
    return get_lobby_entry_inner(requesting_player, game_type_str, curr_ms);
}

query consume_lobby_entry_by_name(
    player_name: text,
    curr_ms: timestamp,
    game_type_str: text) :pubkey? {

    val requesting_player = player@{.name == player_name};

    return get_lobby_entry_inner(requesting_player, game_type_str, curr_ms);
}




// -------------------------------------
// In Game query
// -------------------------------------

query in_game (caller_pubkey: pubkey) :in_game_result? {

    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);

    if (minimal_game == null) {
        return null;
    } else {
        val g_data = game@ {.rowid == minimal_game.game.rowid} (.rowid, .black_player, .white_player, .created_at);


        val plays_white = minimal_game.is_white;
        var opp: player? = null;
 
        if (plays_white) {
            opp = g_data.black_player;
        } else {
            opp = g_data.white_player;
        }

        return in_game_result(
            game_rowid = g_data.rowid.to_integer(),
            game_type = minimal_game.game_type,
            is_white = plays_white,
            opponent_pubkey = opp.signer,
            opponent_name = opp.name,
            opponent_elo = opp.elo_rating,
            curr_turn_nr = minimal_game.curr_turn_nr,
            created_at = g_data.created_at
        );
    }
}





