// Represents a human player
entity player {
    key signer: pubkey; // The public key used to sign transactions. 
    key name: text; // Player's username
    mutable games_played: integer;
    mutable games_won: integer;
    mutable games_lost: integer;
    mutable games_drawn: integer;
    mutable elo_rating: integer;
}



// Represents a game state
entity game {
    index white_player: player;
    index black_player: player;
    index game_type: game_type;

    // Denormalization for performance reasons
    mutable current_rotation_nr: integer; //A GAME cannot have a reference to the (current) PLAYER_ROTATION entity since it references GAME, 
                                          // and Rell doesn't allow two-way FKs.
    mutable current_turn_nr: integer;     //A GAME cannot have a reference to the (current) TURN entity since TURN references GAME, 
                                          // and Rell doesn't allow two-way FKs.

    // -----------------------------------------------------------
    // End of game data. Typical flow:
    // 1. We "finish" the game BEFORE we validate the random numbers.
    // 2. After seed verification the "seed_count" number will increased.
    //    The [player_game_seed] entity gets created for this player.
    //    The [player_game_stats] entity gets created for both players.
    //    even if we only have one seed.
    // 3. If the opponent send their seed for verification (with or without a timeout claim)
    //    the "seed_count" number will increased to the maximum (=2).
    //    This will also update the [player_game_stats] instances to their final result. 
    //    It's fully possible that the opponent NEVER sends their seed for verification, 
    //    and for these cases we need a valid result for the game.
    // -----------------------------------------------------------
    // First step
    mutable is_finished: boolean = false;  // First step of ending a game, no more moves/turns can be made.
    mutable finish_reason: game_end_type = game_end_type.NOTHING;     
    // Second step
    mutable valid_seeds_count: integer = 0; // Number of players who have provided a valid random seed.
    mutable invalid_seeds_count: integer = 0; // Number of players who have provided a random seed that failed verification.
    // Final step
    mutable is_terminated: boolean = false; // Final step of ending a game, we know who won at this point.

    // Timestamps
    created_at: timestamp;
    mutable last_player_rotation_at: timestamp; // Updated when a player is completely done with a "move", 
                                                // meaning that the other player can take action. 
                                                // (Convenient when calculating remaining time (total_time_left) for each player)
}

// Why did the game end? 
// At least according to the player ending the game.
enum game_end_type {
    // ------------------------------------------------
    // Calculated at the end of primary move or double extra move
    // meaning they (could) be sent with the move operation.
    // ------------------------------------------------
    CHECKMATE, // = Win
    STALEMATE, // = Draw 
    INSUFFICIENT_MATING_MATERIAL, // = Draw 
    // ------------------------------------------------
    // Calculated end of neutral/extra move, and should
    // never be sent. Only node does this calculation.
    // ------------------------------------------------
    MOVE_REPETITION, // = Draw due to 3x repetition. (Calculated end of neutral/extra move.)
    MOVES_50, // = Draw (50 moves without anyone taking anything or moving a pawn) (Calculated end of neutral/extra move.)
    // ------------------------------------------------
    // Client can send these claims anytime.
    // ------------------------------------------------
    RESIGNATION,
    TIMEOUT, // Game ended because of a timeout
    ABANDONED, // Much like timeout, but player failed to "check in" on the game.
    ERROR, // A client experienced an error at had to abort (it's always the client that made the error that lost)
    NOTHING // Not ended.
}


// When one user claims to have won, resigned or something.
// (For draws it doesn't matter who claimed it)
entity game_over_claim {
    index game;
    key player_game;
    claim_type: game_end_type;
    created_at: timestamp;
}

// One for each player in a game 
entity player_game {
    index player: player;
    index game: game;
    key player, game;
    is_white: boolean;
    mutable in_check: boolean;  // Also in [move]  and [skipped_move], but we need it here since card picks it up.
    mutable cards_left: integer; // Should never go negative
    mutable total_time_left: integer; // Game-Time left in milliseconds (10 min game => 10 * 60 * 1000 = 600_000)
                                     // Update this every time color rotates to the opponent's color.
    mutable last_heartbeat: timestamp; // Updated every time we have proof the player is still alive.
}

// -------------------------------------
// Will be create after the game is finished.
// 
// When the claiming player ends the game, (s)he will set the
// the situation ASSUMING that the opponent is cheating and never 
// sends their seed. When/if the opponent sends their seed,
// and it turns out to be valid, we'll update the status of
// this table to reflect this new truth.
//
// Main purpose is for showing history.
// Ok to duplicate data here, since it will be 
// fetched often, and the data never changes.
// For example, we want to know what the opponent's ELO
// was during this game, not what it is now.
// -------------------------------------
entity player_game_stats {
    key player_game;
    index game; // Shortcut FK, not strictly necessary
    index player; // Shortcut FK, not strictly necessary

    finish_reason: game_end_type; // (duplicated) The reason the claiming player ended the game.

    claim_is_winner: boolean; // "true" if the claiming player set this player as winner intitally.
    mutable is_winner: boolean; // If "true" this player won

    claim_is_draw: boolean; // "true" if the claiming player set this to a draw initially
    mutable is_draw: boolean; // No player won, it's a draw

    claim_new_elo_rating: integer; // The ELO rating the claiming player set.
    mutable new_elo_rating: integer; // The new ELO rating after the game.

    // Dupcliated data (only to avoid a large JOIN)
    opp_name: text; // Name of the opponent
    opp_elo: integer; // ELO rating of the opponent
    created_at: timestamp;
}


// -------------------------------------
// Will be create after the game is finished and
// AFTER we validated the random numbers.
// -------------------------------------
entity player_game_seed {
    key player_game;
    index game; // Shortcut FK, not strictly necessary
    seed: integer; // The personal seed of the player. Only known at the end of the game.
    validation_success: boolean; // "true" if the seed verification was successful.
    created_at: timestamp;
}


// -------------------------------------
// A player makes something illegal, and loses this way (hacked the client?).
// It's pretty difficult END a game this way, since GoblinChess will return and error message 
// via "require()" and roll back the data, therefore the error won't get saved to the blockchain.
// In theory giving the player a new chance to make a legal move,
// but most likely this won't be possible, and the game will time out.
//
// However, if the error is in the validation of the random numbers,
// the game will indeed end with an error.
// -------------------------------------
entity game_error {
    key game; // There is no game left after an error.
    key player_game; // The player that made the error.
    error_type;
    error_message: text;
}

enum error_type {
    ILLEGAL_CARD, // Played a card in an illegal way (cannot really happen, since require() will roll back)
    ILLEGAL_MOVE, // Moved in an illegal way (cannot really happen, since require() will roll back)
    TURN_SKIPPED, // Skipped a turn, something wrong with the client's turn count? (cannot really happen, since require() will roll back)
    RND_VALIDATION_CARD_ERROR, // In the end of the game, when random numbers are validated, a number was wrong. In this case the generated card, before the game started, was wrong.
    RND_VALIDATION_TURN_ERROR // In the end of the game, when random numbers are validated, a number was wrong. In this case a random number provided during a turn was wrong.
}
