// Represents a human player
entity player {
    key signer: pubkey; // The public key used to sign transactions. 
    key name: text; // Player's username
    mutable games_played: integer;
    mutable games_won: integer;
    mutable games_lost: integer;
    mutable games_drawn: integer;
    mutable elo_rating: integer;
    index mutable last_player_online: timestamp; // Updated whenever a player goes online
                                                 // We use this to list recently seen players
                                                 // Yes, the DB index will have to be updated a lot,
                                                 // but it cannot be helped.
}



// Represents a game state
entity game {
    index white_player: player;
    index black_player: player;
    index game_type: game_type;
    seed_material: byte_array; // The base data used by the client to generate the seed (by signing this data and extract the seed from the signature.)

    // Denormalization for performance reasons
    mutable current_rotation_nr: integer;          // A GAME cannot have a reference to the (current) PLAYER_ROTATION entity since it references GAME, 
                                                   // and Rell doesn't allow two-way FKs.
    mutable current_turn_nr: integer;              // A GAME cannot have a reference to the (current) TURN entity since TURN references GAME, 
                                                   // and Rell doesn't allow two-way FKs.
    mutable last_turn_when_pawn_advanced: integer; // The turn number when we last had a pawn advance OR a capture. 
                                                   // We use this to implement the 50-move-draw rule (MOVES_50 game_end_type) 

    // -----------------------------------------------------------
    // End of game data. Typical flow:
    // 1. We "finish" the game BEFORE we validate the random numbers.
    // 2. After seed verification the "seed_count" number will increased.
    //    The [player_game_seed] entity gets created for this player.
    //    The [player_game_stats] entity gets created for both players.
    //    even if we only have one seed.
    // 3. If the opponent send their seed for verification (with or without a timeout claim)
    //    the "seed_count" number will increased to the maximum (=2).
    //    This will also update the [player_game_stats] instances to their final result. 
    //    It's fully possible that the opponent NEVER sends their seed for verification, 
    //    and for these cases we need a valid result for the game.
    // -----------------------------------------------------------
    // First step
    mutable is_finished: boolean = false;  // First step of ending a game, no more moves/turns can be made.
    mutable is_finished_by_claim: boolean = false;  // A player asked for the game to end. 
    mutable finish_reason: game_end_type = game_end_type.NOTHING;     

    // This might be set on the first step, but if the game is NOT finished by a player claim,
    // we'll have to set this value on the second step.
    // If both players abandon the game at the same time, this value will never be set, 
    // so saving the [player_rotation_summaries] in the end is somewhat of a hack, should be changed I guess.
    mutable player_rotation_descriptions: text = ""; // Descriptions of all the player rotations for this game, joined together into one mega-string with #^# as an arbitrary separator.

    // Second step
    mutable valid_seeds_count: integer = 0; // Number of players who have provided a valid random seed.
    mutable invalid_seeds_count: integer = 0; // Number of players who have provided a random seed that failed verification.

    // Timestamps
    created_at: timestamp;
    mutable last_player_rotation_at: timestamp; // Updated when a player is completely done with a "move", 
                                                // meaning that the other player can take action. 
                                                // (Convenient when calculating remaining time (total_time_left) for each player)
}

// Why did the game end? 
// At least according to the player ending the game.
enum game_end_type {
    // ------------------------------------------------
    // Calculated at the end of primary move or double extra move
    // meaning they (could) be sent with the move operation.
    // ------------------------------------------------
    CHECKMATE,                    // = Win
    STALEMATE,                    // = Draw 
    INSUFFICIENT_MATING_MATERIAL, // = Draw 
    // ------------------------------------------------
    // Only calculated at the node (should never be sent). 
    // The only way for the client to find this status is
    // via error message or by asking the node.
    // ------------------------------------------------
    MOVE_REPETITION, // = Draw, due to 3x repetition. (Only calculated at the node.)
    MOVES_50,        // = Draw, due to 50 moves without anyone taking anything or moving a pawn. (Only calculated at the node.)
    CLEANUP,         // = Win, game had to be ended long after the game was abandoned (by both players)
    // ------------------------------------------------
    // Client can send these claims anytime, meaning
    // that the other player might get an error back on a 
    // card/move tx since the game is now over.
    // ------------------------------------------------
    RESIGNATION,   // = Lose
    TIMEOUT,       // = Win, game ended because of opponent's timeout
    ABANDONED,     // = Win, much like timeout, but opponent failed to "check in" on the game.
    ERROR,         // = Lose, a client experienced an error at had to abort (it's always the client that made the error that lost)
    // ------------------------------------------------
    // Start value
    // ------------------------------------------------
    NOTHING        // Not ended.
}


// One for each player in a game 
entity player_game {
    index player: player;
    index game: game;
    key player, game;
    is_white: boolean;
    elo_rating_before_game: integer;  // We must remember the original ELO, since we might update [player.elo_rating] more than once during the end of the game.
    mutable in_check: boolean;  // Also in [move]  and [skipped_move], but we need it here since card picks it up.
    mutable cards_left: integer; // Should never go negative
    mutable total_time_left: integer; // Game-Time left in milliseconds (10 min game => 10 * 60 * 1000 = 600_000)
                                     // Update this every time color rotates to the opponent's color.
    mutable last_heartbeat: timestamp; // Updated every time we have proof the player is still alive.
    mutable claimed_end: boolean; // True if this player finished the game (by calling for example RESIGN, TIMEOUT etc). If false the game is either ongoing or was finished in some other way.
}

// -------------------------------------
// Will be create after the game is finished.
// 
// When the claiming player ends the game, (s)he will set the
// the situation ASSUMING that the opponent is cheating and never 
// sends their seed. When/if the opponent sends their seed,
// and it turns out to be valid, we'll update the status of
// this table to reflect this new truth.
// 
// The fields beginning with "claim_" shouln't be used,
// they are only here for debug purposes, so that the dev
// can understand why a game was initially ended.
//
// Main purpose is for showing history.
// Ok to duplicate data here, since, after the "termination" 
// of the game, the data in here never changes
// (For example, we only store what the opponent's ELO
// was during this game, not what it is now).
// -------------------------------------
entity player_game_stats {
    key player_game;
    index game; // Shortcut FK, not strictly necessary
    index player; // Shortcut FK, not strictly necessary

    finish_reason: game_end_type; // (duplicated) The reason the claiming player ended the game.

    claim_is_winner: boolean; // "true" if the claiming player set this player as winner intitally.
    mutable is_winner: boolean; // If "true" this player won

    claim_is_draw: boolean; // "true" if the claiming player set this to a draw initially
    mutable is_draw: boolean; // No player won, it's a draw

    claim_new_elo_rating: integer; // The ELO rating the claiming player set.
    mutable new_elo_rating: integer; // The new ELO rating after the game.

    // Dupcliated data (only to avoid a large JOIN)
    opp_name: text; // Name of the opponent
    opp_elo: integer; // ELO rating of the opponent
    created_at: timestamp;
}


// -------------------------------------
// Will be create after the game is finished and
// AFTER we validated the random numbers.
// -------------------------------------
entity player_game_seed {
    key player_game; // Only one seed can be added per game
    index game; // Shortcut FK, not strictly necessary
    seed: integer; // The personal seed of the player. Only known at the end of the game.
    validation_success: boolean; // "true" if the seed verification was successful.
    created_at: timestamp;
}


// -------------------------------------
// A player makes something illegal, and loses this way (hacked the client?).
// It's pretty difficult END a game this way, since GoblinChess will return and error message 
// via "require()" and roll back the data, therefore the error won't get saved to the blockchain.
// In theory giving the player a new chance to make a legal move,
// but most likely this won't be possible, and the game will time out.
//
// However, if the error is in the validation of the random numbers,
// the game will indeed end with an error.
// -------------------------------------
entity game_error {
    index game; 
    key player_game; // Each player can make one error per game. 
    error_type;
    error_message: text;
}

enum error_type {
    ILLEGAL_CARD, // Played a card in an illegal way (cannot really happen, since require() will roll back)
    ILLEGAL_MOVE, // Moved in an illegal way (cannot really happen, since require() will roll back)
    TURN_SKIPPED, // Skipped a turn, something wrong with the client's turn count? (cannot really happen, since require() will roll back)
    // End-of-game errors
    SEED_SIGNATURE_ERROR, // The seed signature was invalid.
    SEED_CALCULATION_ERROR, // The signature is valid, but the seed wasn't calculated correctly from signature.
    RND_VALIDATION_CARD_ERROR, // In the end of the game, when random numbers are validated, a number was wrong. In this case the generated card, before the game started, was wrong.
    RND_VALIDATION_TURN_ERROR, // In the end of the game, when random numbers are validated, a number was wrong. In this case a random number provided during a turn was wrong.
    // Client error
    CLIENT_ERROR, // The client experienced an error and had to abort.
    CLIENT_ERROR_AFTER_END // The client experienced an error AFTER the game was finished, but we managed to report it here anways.
}
