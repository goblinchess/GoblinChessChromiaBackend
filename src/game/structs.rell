
// Internal use
// Return mostly a bunch of primary keys     
struct minimal_game_result {
    // Primary keys
    player;
    player_game;
    game;
    // Data
    game_id: integer; // The game's rowid.
    game_type;
    curr_rotation_nr: integer; 
    curr_turn_nr: integer; // We always check this
    last_turn_when_pawn_advanced: integer; // The turn number when we last had a pawn advance OR a capture. 
    in_check: boolean; // Our king is in check.
    is_white: boolean; // True if this player is white.
    seed_material: byte_array; // The basis of the seed
    // Timestamps
    last_player_rotation_at: timestamp; // When the last "move" was finished, i.e. when it became this player's turn..
    game_created_at: timestamp; // When the game was created.
    total_time_left_since_player_rotation_ms: integer; // Total time left for this player
}

// Internal use
// Same as [minimal_game_result], but with more data.
// Trying to return as much as typical data as possible, to prevent further lookups.
struct maximal_game_result {
    // Primary keys
    my_p: player;
    my_pg: player_game;
    opp_p: player;
    opp_pg: player_game;
    game;

    // Data
    game_id: integer; // The game's rowid.
    game_type;
    in_check: boolean; // Our king is in check.
    is_white: boolean; // True if this player is white.
    seed_material: byte_array; // The basis of the seed

    // Extra
    my_name: text;
    opp_name: text;
    my_elo_before_game: integer; 
    opp_elo_before_game: integer;
    my_elo: integer;  // This might have been updated if we are in the end of the game
    opp_elo: integer; // This might have been updated if we are in the end of the game
}

struct game_time_result {
    turn;
    rotation_owner: player_game; // The player who currently holds the "rotation" Needed for timeout calc.
    // Timestamps
    curr_turn_nr: integer; // Taken from the [game]
    last_player_rotation_at: timestamp; // When the last "move" was finished. 
    total_time_left_since_player_rotation_ms: integer; // Total time left for this player
}


