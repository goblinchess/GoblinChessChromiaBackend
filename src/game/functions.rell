
// ----------
// Inspectors
// ----------


function game_is_classic(gt: game_type) :boolean {
    when (gt) {
        game_type.SPEED_5_CLASSIC -> return true;
        game_type.SPEED_10_CLASSIC -> return true;
        else -> return false;
    }
}

function game_type_to_time_left(gt: game_type) :integer {
    when (gt) {
        game_type.SPEED_5_CHAOTIC -> return 5 * 60 * 1000;
        game_type.SPEED_5_CLASSIC -> return 5 * 60 * 1000;
        game_type.SPEED_10_CHAOTIC -> return 10 * 60 * 1000;
        game_type.SPEED_10_CLASSIC -> return 10 * 60 * 1000;
    }
}




// ----------
// Updates
// ----------

// Will update the gome with:
// a. New turn number, (actually redundant, since the [turn] entity has been created)
// b. is_check = meaning we put the opponent in check.
// 
// Note: If we were in check in the beginning of this turn, 
// we don't bother to remove it, since the opponent will 
// update our is_check status in the end of their move.
function game_update_turn_and_check_status(minimal_game: minimal_game_result, new_turn: turn, is_check: boolean) {
    // 1. Update game with new turn number
    update minimal_game.game (.current_turn = new_turn.number);

    // 2. Find opponent [player_game]
    val opponent_player_game = player_game_get_opponent(minimal_game);

    // 3. Update opponent [player_game] with new is_check status
    update opponent_player_game (.in_check = is_check);
}


// Update the [time_left] field for the player_game entity.
// We do this at the very last moment, usually when the player 
// sends the "neutral_skip" move.
function game_update_time_left(minimal_game: minimal_game_result) {
    val curr_time_ms = op_context.last_block_time; // Only way for us to measure time.
    val real_time_consumed_ms =  curr_time_ms - minimal_game.last_color_rotation_at;

    // We give the player two extra seconds per turn, since animations take time, blockchain build etc.
    val effective_time_consumed_ms = real_time_consumed_ms - 2000; // Doesn't matter if this is negative, a player should be able to GAIN time if fast.

    // TODO: Remove this, too expensive
    val real_game_time_tot = curr_time_ms - minimal_game.game_created_at;
    val real_game_time_tot_secs = real_game_time_tot / 1000;

    val real_secs = real_time_consumed_ms / 1000;
    val secs = effective_time_consumed_ms / 1000;
    log("Gametime tot: " + real_game_time_tot_secs + ". Player consumed: " + real_secs + " seconds doing this turn, but we reduce it to " + secs + " seconds.");

    // Yes, we could use the timestamp from the [turn], but it's more convenient to 
    // keep this data in the [game] entity.
    update minimal_game.game (.last_color_rotation_at = curr_time_ms);

    // Update the time left for the player
    // NOTE: If this becomes negative, it will be the opponent's task to call "timeout" 
    update minimal_game.player_game (.total_time_left -= effective_time_consumed_ms);
}

