
// -------------------------------------
// There are two terms:
// "ended" - the game is over, but we have not enough info to be certain who won.
// "terminated" - the game is over, and we know who won.
// "full terminated" - the game is over, and we know who won, and we have written the stats.
// -------------------------------------

// -------------------------------------
// End the game
// -------------------------------------

// -------------------------------------
// This move will "end" the game, but there are many ways this can turn out.
// We don't know who won until we verify the random numbers. Here we will verify the 
// the seed of the "claiming player". 
//   A) Seed Verification Success
//      What we do here is to create a "claim" on the result we're suggesting.
//      But many things can happen still:
//      A.1) If Checkmate, we give full points to the claiming player. The claiming player will 
//           keep the points UNLESS this is a timeout. If opponent claims timeout the claiming player 
//           will instead lose.
//      A.2) If Draw, the we give the claiming FULL(!) points!
//           Only when the opponent send their seed the points will be divided between the players.
//           The timeout will agin cause the claiming player to lose.
//   B) Seed Verification Failure
//      It's pretty simple, for all situations the claiming player will lose the game. 
// 
// Note on 
// Remember that this player might deliver the mate AFTER timeout has occurred,
// so if the opponent challenges this result with a "timeout" claim, the winner might be switched. 
// => All we know at this point is that the game is over.
// -------------------------------------
function game_over_move_claim(
    minimal_game: minimal_game_result, 
    new_turn: turn, 
    is_checkmate: boolean, 
    is_stalemate: boolean, 
    is_insufficient_mating_material: boolean,
    random_seed: integer?
) :boolean {
    if (is_checkmate or is_stalemate or is_insufficient_mating_material) {
        // This move ended the game

        // ------------------------------------------- 
        // 1. Update [game] to "finished"
        // ------------------------------------------- 
        log("game_id: " + minimal_game.game_id + " - Game Over");
        var end_reason = game_end_type.NOTHING;
        if (is_checkmate) {
            _inner_game_end_checkmate(minimal_game.game, new_turn.number, minimal_game.player_game);
            end_reason = game_end_type.CHECKMATE;
        } else if (is_stalemate) {
            // Stalemate
            _inner_game_end_stalemate(minimal_game.game, new_turn.number);
            end_reason = game_end_type.STALEMATE;
        } else {
            // Insufficient mating material
            _inner_game_end_insufficient_mating_material(minimal_game.game, new_turn.number);
            end_reason = game_end_type.INSUFFICIENT_MATING_MATERIAL;
        }

        // ------------------------------------------- 
        // 2. Update the time left
        // ------------------------------------------- 
        // Why bother? B/c the winning player might be out of time already.
        game_update_time_left(minimal_game);

        // ------------------------------------------- 
        // 3. Create the "game end" event (tied to this turn)
        // ------------------------------------------- 
        event_game_end_create(minimal_game.game, new_turn, is_checkmate, is_stalemate, is_insufficient_mating_material);

        // ------------------------------------------- 
        // 4. Verify seed. The status of the verification will be saved to the [game]
        // ------------------------------------------- 
        // Some client doesn't calculate mate and won't know the the game is over. 
        // These client will send the seed at some later point.
        if (random_seed != null) { 
            // We don't use "require()" on this, since we want to save 
            // the seed even if it's wrong. This means that the client wont
            // get any feedback if the wrong seed was sent.
            val x = rnd_validation_of_player(
                game_id = minimal_game.game_id,
                g_type = minimal_game.game_type,
                g = minimal_game.game,
                pg = minimal_game.player_game,
                org_seed = random_seed
            );


            // This doesn't happen often, so we can afford it
            val maximal_game = maximal_game_get_via_pg(minimal_game.player_game);

            // Note: it doesn't matter if the player claims draw or win,
            // we'll set them as a winner since we AT LEAST know the 
            // random seed was valid.
            if (x == null) {
                // Success
                game_stats_claim_me_as_winner(maximal_game!!, end_reason);
            } else {
                // Error
                game_stats_claim_opp_as_winner(maximal_game!!, end_reason);
            }
        }

        return true;
    } else {
        return false; // This move didn't end the game.
    }
}

// We cannot create [player_game_stats] at this point, since we must verify the random numbers first.
function _inner_game_end_checkmate(gme: game, curr_turn_nr: integer, winner_pg: player_game) {
    create game_over_claim (
        .game = gme,
        .player_game = winner_pg,
        .claim_type = game_end_type.CHECKMATE,
        .created_at = op_context.last_block_time
    );
    update gme (.current_turn_nr = curr_turn_nr, .is_finished = true, .finish_reason = game_end_type.CHECKMATE);
}

// We cannot create [player_game_stats] at this point, since we must verify the random numbers first.
function _inner_game_end_stalemate(gme: game, curr_turn_nr: integer) {
    update gme (.current_turn_nr = curr_turn_nr, .is_finished = true, .finish_reason = game_end_type.STALEMATE);
}

// We cannot create [player_game_stats] at this point, since we must verify the random numbers first.
function _inner_game_end_insufficient_mating_material(gme: game, curr_turn_nr: integer) {
    update gme (.current_turn_nr = curr_turn_nr, .is_finished = true, .finish_reason = game_end_type.INSUFFICIENT_MATING_MATERIAL);
}

// -------------------------------------
// Resign
// -------------------------------------


// What to do if the game is already over? (Could be that the opponent just resigned too or whatever.)
// Best is to simply validate the seed and don't report an error, since 
// we got the seed and it shouldn't go to waste.
// Remember, the player WANTED to end the game, so if it's already over that's a good thing.
function game_over_resign(caller_pubkey: pubkey, game_id: integer, random_seed: integer) {
    log("game_over_resign() - started, game: " + game_id.to_text());

    // ----------------
    // A.1. Check player entity
    // ----------------
    //log("Move A.1");
    val minimal_game: minimal_game_result? = minimal_game_data_get(caller_pubkey);
    require(minimal_game != null, "Player is not in a game, id:" + game_id);
    require(minimal_game.game_id == game_id, "The game id of the ongoing game " + minimal_game.game_id + " doesn't match the given id " + game_id + ".");

    // We don't care if the game is out of sync, since we might be doing this during the opponent's rotation anyways.
    val curr_turn = minimal_game.curr_turn_nr;

    update minimal_game.game (.is_finished = true, .finish_reason = game_end_type.RESIGNATION);

    // TODO: We should create a game_end_event, but shouldn't that hang on the "rotation" (not on the "turn")
}


