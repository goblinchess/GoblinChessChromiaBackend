
// -------------------------------------
// FULL terminate the game as the winner claims the win.
// It doesn't matter if the win is a checkmate or resignation,
// the winner must still provide the seed or (s)he will instead LOSE!
//
// We will never get a chance to validate the random numbers,
// so we can go ahead and create the [player_game_stats] record
// immediately, but with empty [player_seed].
// -------------------------------------
function _inner_game_terminate_full_claim_win(gme: game, 
    winner_p: player, loser_p: player, 
    winner_pg: player_game, loser_pg: player_game, 
    winner_name: text, loser_name: text, 
    winner_old_elo: integer, loser_old_elo: integer,
    winner_seed: byte_array, is_err: boolean
) {

    update gme (.is_finished = true, .is_draw = false);

    // Timeout is just like any other win.
    val (winner_new_elo, loser_new_elo) = elo.update_chess_ratings_on_win(winner_old_elo, loser_old_elo);

    // Update player statistics
    update winner_p (.games_won += 1, .games_played += 1);
    update loser_p (.games_lost += 1, .games_played += 1);

    val created_time = op_context.last_block_time;

    // Create Winner's stats
    create player_game_stats (
        .player_game = winner_pg,
        .game = gme,
        .player = winner_p,
        .is_winner = true,
        .is_draw = false, 
        .is_timeout = false, // No timeout
        .is_error = is_err, // Could be due to error
        .new_elo_rating = winner_new_elo, // The new ELO rating after the game.
        .player_seed = winner_seed, // Winner must have a valid seed.
        .opp_name = loser_name,
        .opp_elo = loser_old_elo, // Here it only matters what the opponent's ELO was when the game started
        .created_at = created_time
    );

    // Create Loser's stats
    create player_game_stats (
        .player_game = loser_pg,
        .game = gme,
        .player = loser_p,
        .is_winner = false,
        .is_draw = false, 
        .is_timeout = false,  // No timeout
        .is_error = is_err, // Could be due to error
        .new_elo_rating = loser_new_elo, // The new ELO rating after the game.
        .player_seed = byte_array(''), // Loser doesn't have to provide seed, but cannot be null, but doesn't matter what it is.
        .opp_name = winner_name,
        .opp_elo = winner_old_elo, // Here it only matters what the opponent's ELO was when the game started
        .created_at = created_time
    );
}