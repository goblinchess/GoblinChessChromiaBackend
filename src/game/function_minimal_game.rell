
// -------------------------------------
// Will find the [minimal_game_result] (which holds the player, 
// the game and the color) from the player's pubkey.
// We can always get the ongoing game via the player's pubkey
// since a player can only have one unfinished game at a time.
// 
// Note:
// We try to use the [minimal_game_result] as much as possible, 
// throughout the codebase, to simplify the code.
// -------------------------------------
function minimal_game_data_get(player_pubkey: pubkey) :minimal_game_result? {
    // Return data
    val res = (p: player, pg: player_game, g: game)@?  {
        p.signer == player_pubkey, 
        pg.player == p, 
        g == pg.game,
        g.is_finished == false 
    }
        (gme = g, player = pg.player, player_game = pg,  
        g_id = g.rowid.to_integer(), game_type = g.game_type, curr_rot_nr = g.current_rotation_nr, curr_turn_nr = g.current_turn_nr, is_white = pg.is_white, in_check = pg.in_check,  // General Data
        prev_move_time = g.last_player_rotation_at, game_created_at = g.created_at, my_time_left_ms = pg.total_time_left // Minimal Timestamps
        );

    if (res != null) {
        return minimal_game_result(
            // Primary keys
            player = res.player,
            player_game = res.player_game,
            game = res.gme,
            // Data
            game_id = res.g_id,
            game_type = res.game_type,
            curr_rotation_nr = res.curr_rot_nr,
            curr_turn_nr = res.curr_turn_nr,
            in_check = res.in_check,
            is_white =res.is_white,
            // Timestamps
            last_player_rotation_at = res.prev_move_time,
            game_created_at = res.game_created_at,
            total_time_left_since_player_rotation_ms = res.my_time_left_ms
        );
    } else {
        return null;
    }
}

// -------------------------------------
// Will find various data EVEN if the game is finished:
// 1. [minimal_game_result], 
// 2. [opponent_timeout_data].
//
// Note:
// In some situations we cannot use the function above, like when fetching
// the opponent's recent actions. Here we need to to see FINISHED games since we 
// must see the winning move (since the opponent might just have won the game 
// and turned it into "finished").
// -------------------------------------
function minimal_game_and_timeout_data_get_even_if_finished(
    player_pubkey: pubkey, 
    game_id: integer // We need this, since the player usually has multiple finished games.
) :(minimal_game_result?, opponent_timeout_data?) {
    // Return data

    val game_rowid = rowid(game_id);

   val res = (p_my: player, pg_my: player_game, g: game, pg_opp: player_game )@? {
        p_my.signer == player_pubkey,
        pg_my.player == p_my,
        pg_my.game == g,
        g.rowid == game_rowid, // <-- THE GAME WE ARE LOOKING FOR
        pg_opp.game == g, // We need this to get the opponent's timeout data
        pg_opp.is_white != pg_my.is_white // Only one is white
    } ( gme = g, my_p = p_my, my_pg = pg_my, // Primary keys
        game_type = g.game_type, curr_rot_nr = g.current_rotation_nr, curr_turn_nr = g.current_turn_nr, is_white = pg_my.is_white, in_check = pg_my.in_check, // General Data
        cr_at = g.last_player_rotation_at, game_created_at = g.created_at, // Minimal Timestamps
        my_time_left_ms = pg_my.total_time_left, opp_time_left_ms = pg_opp.total_time_left, // Total time left
        opp_last_heartbeat = pg_opp.last_heartbeat // Inactive?
        );

    if (res != null) {

        // Build the maximal game result
        val mnimial_game = minimal_game_result(
            // Primary keys
            player = res.my_p,
            player_game = res.my_pg,
            game = res.gme,
            // Data
            game_id = game_id,
            game_type = res.game_type,
            curr_rotation_nr = res.curr_rot_nr,
            curr_turn_nr = res.curr_turn_nr,
            in_check = res.in_check,
            is_white =res.is_white,
            // Timestamps
            last_player_rotation_at = res.cr_at,
            game_created_at = res.game_created_at,
            total_time_left_since_player_rotation_ms = res.my_time_left_ms,
        );

        // Build the timeout data
        // (But if the game is finished we won't need it)
        val opp_timeout_data = opponent_timeout_data(
            //estimated_time_left_ms = estimated_time_left_ms, 
            opp_last_heartbeat = res.opp_last_heartbeat, 
            last_player_rotation_at = res.cr_at,
            opp_tot_time_left_since_player_rotation_ms = res.opp_time_left_ms
        );
        return (mnimial_game, opp_timeout_data);
    } else {
        return (null, null); // This is an error, don't bother timeout data.
    }
}

