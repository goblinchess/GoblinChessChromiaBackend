@test module;

import ^^.*; // Import all the things from parent folder 
import ^^.card.*;
import ^^.piece.*;
import ^^.move.*;
import ^^.turn.*;

function test_move_encode_decode() {
    val positions = [7, 16, 62];
    val enc_path = move_encode_int_pos_list(positions);
    val decoded_positions = move_dencode_text_pos_list(enc_path);

    assert_equals(positions, decoded_positions);
}

function test_elo_draw_1() {

   val player1_rating: integer = 1200;
   val player2_rating: integer = 1200;

    val (p1: integer, p2: integer) = elo.update_chess_ratings_on_draw(
        player1_rating,
        player2_rating
    );

    assert_equals(p1, 1200);
    assert_equals(p2, 1200);
}

function test_elo_draw_2() {

   val player1_rating: integer = 1300;
   val player2_rating: integer = 1200;

    val (p1: integer, p2: integer) = elo.update_chess_ratings_on_draw(
        player1_rating,
        player2_rating
    );

    assert_equals(p1, 1296);
    assert_equals(p2, 1204);
}


function test_elo_win_1() {

   val player1_rating: integer = 1200;
   val player2_rating: integer = 1200;

    val (p1: integer, p2: integer) = elo.update_chess_ratings_on_win(
        player1_rating,
        player2_rating,
	    true
    );

    assert_equals(p1, 1216);
    assert_equals(p2, 1184);
}

function test_elo_win_2() {
   val player1_rating: integer = 1300;
   val player2_rating: integer = 1200;

    val (p1: integer, p2: integer) = elo.update_chess_ratings_on_win(
        player1_rating,
        player2_rating,
        false
    );

    assert_equals(p1, 1280);
    assert_equals(p2, 1220);
}


// Basic math thes
function test_ten_to_the_power_of() {
    val x = 1.0;
    val result = ten_to_the_power_of(x);
    log("10 ^ 1=" + result.to_text());
    assert_true(result < 10.001);
    assert_true(result > 9.999);
    
    val x2 = 2.0;
    val result2 = ten_to_the_power_of(x2);
    log("10 ^ 2=" + result2.to_text());
    assert_true(result2 < 100.001);
    assert_true(result2 > 99.999);
}


function test_full_game() {

    // ------------
    // Check if DB is empty
    // ------------
    val players: list<rowid> = player@* {} (.rowid);
    assert_equals(players.size(), 0);


    // ------------
    log("Create the players");
    // ------------
     
    // All in one
    rell.test.tx(create_player("Alice")).sign(rell.test.keypairs.alice).run();
    rell.test.tx(create_player("Bob")).sign(rell.test.keypairs.bob).run();
    rell.test.tx(create_player("Charlie")).sign(rell.test.keypairs.charlie).run();
    rell.test.tx(create_player("Dave")).sign(rell.test.keypairs.dave).run();

    // ------------
    log("Check if players are created");
    // ------------
    val players_after: list<rowid> = player@* {} (.rowid);
    assert_equals(players_after.size(), 4);


    rell.test.tx(enter_lobby("SPEED_5_CLASSIC")).sign(rell.test.keypairs.bob).run();
    rell.test.tx(enter_lobby("SPEED_10_CLASSIC")).sign(rell.test.keypairs.charlie).run();
    rell.test.tx(enter_lobby("SPEED_5_CLASSIC")).sign(rell.test.keypairs.dave).run();

    // Alice looks for 10 min match
    val match_10_mins = consume_lobby_entry(rell.test.keypairs.alice.pub, 0, "SPEED_10_CLASSIC");
    // ALice finds Charlie
    val opp_player: pubkey = rell.test.keypairs.charlie.pub;
    assert_equals(match_10_mins, opp_player);

    // ------------
    log("Alice creates a 10 min game with Charlie");
    // ------------
    rell.test.tx(create_game_via_lobby(opp_player, "SPEED_10_CLASSIC")).sign(rell.test.keypairs.alice).run();

    // ------------
    log("Alice looks for the game");
    // ------------
    val found_game: in_game_result? = in_game(rell.test.keypairs.alice.pub);
    assert_not_null(found_game);
    val the_game = found_game;
    val alice_white = the_game.is_white;
    var alice_color = "black";
    var white_player = rell.test.keypairs.charlie;
    var black_player = rell.test.keypairs.alice;
    if (alice_white) {
        alice_color = "white";
        white_player = rell.test.keypairs.alice;
        black_player = rell.test.keypairs.charlie;
    }


    assert_equals(the_game.game_type, game_type.SPEED_10_CLASSIC);
    assert_equals(the_game.opponent_pubkey, opp_player);
    assert_equals(the_game.opponent_name, "Charlie");
    assert_equals(the_game.opponent_elo, 1200);
    assert_equals(the_game.curr_turn_nr, 0);

    // ------------
    log("New Game: Verify pieces");
    // ------------
    val pieces = get_my_living_pieces(the_game.game_rowid, true);
    assert_equals(pieces.size(), 16);
    var out_str = alice_color + " pieces: ";
    for (p in pieces) {
        assert_true(p.is_alive);
        assert_equals(p.color_str,"white");
        assert_true(p.active_type_str == p.original_type_str);
        out_str += p.active_type_str + "=" + p.position + "("+ p.remaining_hit_points + "), ";
    }

    log(out_str);

    // ------------
    log("Turn 1: White playes a card");
    // ------------
    val card_picks = [63]; // Turns black rook into frog
    var last_seen_turn = 0;
    rell.test.tx(play_card(the_game.game_rowid, last_seen_turn, "FROG", 1, card_picks)).sign(white_player).run();
    last_seen_turn += 1;

    // ------------
    // White moves
    // ------------
    // First we try a few invalid moves
    val bishop_type = "BISHOP";
    val knight_type = "KNIGHT";

    // ------------
    log("Fail A. No piece at position");
    // ------------
    val wrong_orig_pos = 22; // Nothing on this position
    val wrong_to_pos = 23; 
    val failed_due_to_wrong_pos = assert_fails(move_peaceful_inner(white_player.pub, the_game.game_rowid, last_seen_turn, wrong_orig_pos, wrong_to_pos, bishop_type, false, null, false, false, null, null, 
        * // Note, this star is what makes it work.
        ));
    val expected_wrong_pos: text = "No piece at position " + wrong_orig_pos;
    assert_true(failed_due_to_wrong_pos.message.starts_with(expected_wrong_pos));

    // ------------
    log("Fail B. Wrong piece_type at position");
    // ------------
    val knight_orig_pos = 1; // b1 (correct)
    val knight_to_pos = 16;  // a3 (Valid move)
    val failed_wrong_type = assert_fails(move_peaceful_inner(white_player.pub, the_game.game_rowid, last_seen_turn, knight_orig_pos, knight_to_pos, bishop_type, false, null, false, false, null, null, 
        * // Note, this star is what makes it work.
    ));
    val expected_wrong_type: text = "Expected piece to have active type KNIGHT but got BISHOP";
    assert_true(failed_wrong_type.message.starts_with(expected_wrong_type));

    // ------------
    log("Fail C. Invalid move pattern");
    // ------------
    val knight_to_wrong_pos = 17;  // b3 (Invalid move)
    val failed_wrong_move = assert_fails(move_peaceful_inner(white_player.pub, the_game.game_rowid, last_seen_turn, knight_orig_pos, knight_to_wrong_pos, knight_type, false, null, false, false, null, null, 
        * // Note, this star is what makes it work.
    ));
    log(failed_wrong_move.message);
    val expected_wrong_move: text = "Illegal move";
    assert_true(failed_wrong_move.message.starts_with(expected_wrong_move));


    // ------------
    log("Fail D. Bishop cannot move to own piece!");
    // ------------
    val bishop_orig_pos = 2; // c1 (correct)
    val bishop_to_pos = 9; // Vaild move pattern, but pawn here, cannot move this way
    val failed_move_on_friend = assert_fails(move_peaceful_inner(white_player.pub, the_game.game_rowid, last_seen_turn, bishop_orig_pos, bishop_to_pos, bishop_type, false, null, false, false, null, null, 
        * // Note, this star is what makes it work.
    ));
    val expected_move_on_friend: text = "Illegal move";
    assert_true(failed_move_on_friend.message.starts_with(expected_move_on_friend));

    // ------------
    log("Turn 2: White makes a valid move Kn b1->a3");
    // ------------
    rell.test.tx(move_peaceful(the_game.game_rowid, last_seen_turn, knight_orig_pos, knight_to_pos, knight_type, false, null, false, false, null, null)).sign(white_player).run();
    last_seen_turn += 1;

    // ------------
    log ("Turn 3: Skip neutral.");
    // ------------
    rell.test.tx(skip_neutral(the_game.game_rowid, last_seen_turn)).sign(white_player).run();
    last_seen_turn += 1;

    // ------------
    log ("Turn 4: Black skips spell");
    // ------------
    rell.test.tx(skip_card(the_game.game_rowid, last_seen_turn)).sign(black_player).run();
    last_seen_turn += 1;


    // ------------
    log ("Turn 5: Black skips spell");
    // ------------

    // Pawn double move 
    val black_move_1_from = 49; // a7
    val black_move_1_to = 33; // a5
    val pawn_type = "PAWN";
    rell.test.tx(move_peaceful(the_game.game_rowid, last_seen_turn, black_move_1_from, black_move_1_to, pawn_type, false, null, false, false, null, null)).sign(black_player).run();
    last_seen_turn += 1;
    
}



/*
// Not testing anything, just printing the numbers
// to see if any are missing
function test_random() {

    val random_numbers = generate_random_numbers(1238567, 1000, 11);

    var str = "rnd: ";
    val sorted_map = map<integer, integer>();  
    for (n in random_numbers) {
        str += n.to_text() + ", ";
        if (sorted_map.contains(n)) {
            val cnt = sorted_map[n];
            sorted_map[n] = cnt + 1;
        } else {
            sorted_map[n] = 1;
        }
    }

    log(str);

    for (i in range(12)) { // <- 0-11
        if (sorted_map.contains(i)) {
            log(i.to_text() + " = " + sorted_map[i].to_text());
        } else {
            log(i.to_text() + " = NOTHING!? ");
        }
    }
}
*/



