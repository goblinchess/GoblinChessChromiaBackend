

// Generate a list of COUNT random numbers
// based on the seed and the MAX_VALUE.
//
// Since this is open source, if a hacker knows the seed,
// they can predict all the "random" numbers,
function generate_random_numbers(seed: integer, count: integer, max_value: integer): list<integer> {
    // Parameters for LCG (using common values)
    val a = 1664525;
    val c = 1013904223;
    val modu = 4294967296; // = 2^32. We CANNOT use integer.MAX_VALUE (=2^64) since it would give us integer overflow
    
    var current = seed;
    val results = list<integer>();
    
    for (i in range(count)) {
        // Generate next number using LCG formula: X(n+1) = (a * X(n) + c) mod MODU
        current = (a * current + c) % modu;
        // Scale to desired range (0 to max_value)
        results.add(abs(current % (max_value + 1)));
    }
    
    return results;
}


// -------------------------------------
// Exponential functions
//
// Rell doesn't support floating point numbers,
// so we need to implement these functions using the DECIMAL type.
// -------------------------------------


// 10^x = e^(ln(10) * x)
//
// But ln(10) is a known constant, so we can use it directly.
// ln(10)â‰ˆ2.302585
function ten_to_the_power_of(x: decimal): decimal {
    val ln_10 = 2.302585; // ln(10)

    return exp(ln_10 * x);
}

// Provided by Anton
// Standard implementation of exp(x)
// without using floating point numbers
function exp(x: decimal): decimal {
    require(x >= 0, "Cannot handle negative exponents: " + x);

    var res = 1.0;
    var v = 1.0;

    var k = 1;
    while (true) {
        v = v * x / k;
        if (v < decimal.MIN_VALUE) break;
        res += v;
        k += 1;
    }

    return res;
}

// Provided by Anton
function ln(x: decimal): decimal {
    require(x > 0);

    val e = 2.71828182845904523536;

    val pows = list<(integer, decimal)>();
    {
        var p = e;
        var n = 1;
        while (p < x) {
            pows.add((n, p));
            p *= p;
            n += n;
        }
    }

    var n = 0;
    var t = x;
    for ((k, w) in pows.reversed()) {
        if (t * e > w) {
            t /= w;
            n += k;
        }
    }

    t -= 1;
    var y = t;
    var res = n.to_decimal();
    for (k in range(1, 1000000000)) {
        val v = y / k;
        if (v == 0) break;
        res += (k % 2 * 2 - 1) * v;
        y *= t;
    }

    return res;
}
