

// Sent back to the client
struct in_game_result {
    game_rowid: integer;
    game_type: game_type;
    is_white: boolean;
    opponent_pubkey: pubkey;
    opponent_name: text;
    opponent_elo: integer;
    curr_turn_nr: integer; // If the game just started, this will be 0
    created_at: integer; // Unix timestamp
    seed_material: byte_array; // The base data used by the client to generate the seed (by signing this data and extract the seed from the signature.)
}

// Returned so that the client can see a list of old games
struct old_game_stat {
    game_rowid: integer; // To be able to find it later.
    created_at: integer; // Unix timestamp
    // Opponent data
    opponent_name: text; // Name of the opponent
    opponent_elo: integer;
    // My data
    new_elo_rating: integer;
    // Neutral data
    is_winner: boolean; // This player won
    is_draw: boolean; // No player won, it's a draw
    finish_reason: text; // Why the game ended
}

// Holds all time-related info we need to calculate timeouts.
struct opponent_timeout_data {
    //estimated_time_left_ms: integer; // The amount to time the client THINKS the opponent has left. If this is 0 the node must make a timeout check.
    opp_last_heartbeat: timestamp; // The last heartbeat of the opponent.
    last_player_rotation_at: timestamp; // The last time the player rotation was completed.
    opp_tot_time_left_since_player_rotation_ms: integer; // How much time the opponent had left when the "move" (= player rotation) began.
}

// Holding general game end info, specifically why the game ended.
struct game_end_data {
    is_finished: boolean; // True if this game is "finished", first step in ending the game. 
    finish_reason: text; // Reason for ending the game.
    valid_seeds_count: integer; // Number of players who have successfully verified their seeds.
    invalid_seeds_count: integer; // Number of players who have bad seeds.
}
