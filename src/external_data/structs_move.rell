

// ------------------------------------------
// These structs will be used by the (external) client calling the node.
// ------------------------------------------

// ------------------------------------------------------------------------------
// Returned when the client asks for the full move data.
// (We use this struct no matter if attack or just move)
// 
// A lot of the data we return here is the same as the other player sent us,
// and in some cases we even use the same types for returning data.
// ------------------------------------------------------------------------------
struct move_full_data {

    turn_nr: integer; // What turn this was

    // Only have move data if this isn't a skipped move
    m_data: opponents_move_data?;

    // If this move caused check/stale/mate/timeout?
    check_data: check_data;

    // Only if this is an attack
    att_args: move_attack_arguments? = null; // <-- Reusing type from when the other player provided this data.

    // Only if we have events that happened after the move
    end_args: move_end_events_arguments? = null; // <-- Reusing type from when the other player provided this data.

    // ----------------------
    // Needed for chaos mode
    // ----------------------

    // Chaos mode arguments
    chaos_data: chaos_mode_attack_data? = null;

    // Only used if there is retaliation.
    ret_data: retaliation_data? = null;
}

// Move data, used for attacks too.
struct move_arguments {
    from_position: integer; // Where the piece is currently standing.
    to_position: integer; // Where the piece will be standing after the move.
    piece_type_str: text; // The type of piece we are moving
    given_is_knighted: boolean; // If the piece is KNIGHTED (lasts the entire game)
    given_is_enchanted_jumper: boolean; // If the piece is an enchanted jumper (only lasts one move)
}

// Almost the same as above, but this is a query response.
struct opponents_move_data {
    from_position: integer; // Where the piece is currently standing.
    to_position: integer; // Where the piece will be standing after the move.
    is_castle: boolean; // If the move is a castling move
    given_is_knighted: boolean; // If the piece is KNIGHTED (lasts the entire game)
    given_is_enchanted_jumper: boolean; // If the piece is an enchanted jumper (only lasts one move)
}

// ------------------------------------------------------------------------------
// Check and mate etc
// Calculating check/stale/mate status is extra hard due to portals etc.
// Therefore we don't require the client to do this, and the "check_args" is optional.
// When implementing a client you must choose between:
// 
// 1. "Small client" without checkmate calculation:
// Benefit: Simpler client code.
// Drawback: Due to the nature of the blockchain a new block must be built before 
//     the small client can see if a move cause checkmate/stalemate. 
// 
// 2. "Big client" with checkmate calcuation:
// Benefit: Client gives player checkmate feedback immeditely.
// Drawback: Risk of difference between mate calculation between client and node.
// Note: If the client makes its own calculation and send the "check_args" the node 
//     will abort with an error message if the node disagrees with the clients calculations.
//     This is useful for clients that want discover calculation differences.
//     (If the client shows checkmate to the player, but the node doesn't agree, 
//     there is a serious bug that shouldn't go unnoticed)
// ------------------------------------------------------------------------------
struct move_check_arguments {
    is_check: boolean; // Client thinks this is a check
    is_checkmate: boolean; // Client thinks this is a checkmate
    is_stalemate: boolean; // Client thinks this is a stalemate
    is_insufficient_mating_material: boolean; // Client thinks this is insufficient mating material
}

// ------------------------------------------------------------------------------
// Events that might happen after a move.
// 
// If none of these events happened, the client can send "null",
// but if ANY of these events happened, we require the client to know about this
// and send this struct correctly filled.
// 
// Discussion:
// Is it really needed for the client to calculate these? Not really!
// The node could calculate these things itself, with the exception of the resurrection_pos.
// Resurrection requires random on the client side, so the client MUST send this position to the node.
// And since resurrection cannot happen just anywhere, due to portals that might be used, the 
// client must calculate the portal usage too. Could just as well send everything.
// Also, this isn't as hard as the check/stale/mate calculation.
// ------------------------------------------------------------------------------
struct move_end_events_arguments {
    used_portals: list<integer>; // Portal entry pos  (Note: just b/c a piece stands on a portal entry pos, doesn't mean it was used)
    resurrection_pos: integer?; // If a piece was resurrected, this will be the new pos of the resurrected piece.
    promotions: list<integer>; // The positions of the pieces that were promoted.
}

// Attack data, mandatory for attacks.
struct move_attack_arguments {
    attacked_position: integer; // 0-63 DOESN'T HAVE TO BE THE SAME AS THE "TO_POSITION". When attacks fail, or en passant, this will be the position of the defending piece.
    attack_result_type_str: text; // The result type of the attack
    defender_defense_points: integer; // The opponent's defense power
    damage_points: integer; // How much we damage the opponent
}

// Only chaos mode uses these arguments, classic mode can send null.
struct move_chaos_mode_arguments {
    defender_can_retaliate: boolean; // Some objects cannot retaliate (stones, for example)
    is_flash_attack: boolean; // Jumps for example cannot be retaliated against.
    is_luck: boolean; // true if attack was lucky and rolled highest score
}

// Only chaos mode uses these arguments, classic mode can send null.
// If a) main attack result is "hit" and b) this is chaos mode 
// Then client must send this. 
struct move_retaliation_arguments {
    retaliation_result_type_str: text; // The result type of the retaliation
    attacker_defence_points: integer;  // The attacker's defense power (the attacker is curretly defending himself)
    damage_points: integer; // How much the retaliation damaged the attacker
}
