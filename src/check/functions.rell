

// -----------------------------------------------------------------------------------
// Main function called from other modules after a move or a card has been played.
// -----------------------------------------------------------------------------------
function check_stale_n_mate(
    game_id: integer,
    minimal_game: minimal_game_result, 
    board: board_positions_all, // <-- Should been updated with all moves, promotions and deaths
    opp_align: alignment,
    opp_king: piece_living_data,
    our_team: character_team,
    opp_team: character_team,
    check_args: move_check_arguments? 
): (is_check: boolean, is_checkmate: boolean, is_stalemate: boolean) {

    var is_checkmate = false;
    var is_stalemate = false;

    // For check calculation we don't have to use hypothetical moves, since we do the
    // calculation AFTER the move has been saved to the board.
    val check_sb_data = check_sb_build_calculator(
        game_id,
        opp_king.vuln.position, // We're supposed to check the opponent's king
        our_team, // we are the checking team
        board // This isn't a hypothetical move, must use the new board positions
    );

    val is_check = check_sb_is_check(check_sb_data);
    if (is_check) {
        log("game_id: "+game_id+ " - Found CHECK.");
        if (check_args != null) {
            require(check_args.is_check or check_args.is_checkmate, "Our calculation says check but client didn't claim check?");
        }

        // -----------------------------------------------------------------------------------
        // We do this as a two-step rocket, where we only calculate mate if we have check.
        // For the mate calculation we must use hypothetical moves, which is heavier.
        // -----------------------------------------------------------------------------------
        var should_do_mate_calc = true;
        if (check_args != null) {
            should_do_mate_calc =  check_args.is_checkmate; // No need to verify checkmate unless the client claims mate.
        }

        if (should_do_mate_calc) {
            val king_wpaa = with_pos_and_alignment(opp_king.vuln.position, opp_align);
            val check_mate_data = check_mate_calc_data_constructor(
                    game_id,
                    king_wpaa, // We're supposed to check the opponent's king
                    our_team, // We are the mating team
                    board,
                    check_sb_data
            );
            is_checkmate = check_mate_can_escape(game_id, check_mate_data, opp_team);

            if (check_args != null) { 
                // We wouldn't be here unless the client said is_checkmate, so must be "true" now.
                require(is_checkmate, "Client said is_checkmate but we could not verify it.");
            }

            if (is_checkmate) {
                log("game_id: "+game_id+ " - Found CHECKMATE. Game over");
                // TODO: Implement this
            }
        }

    } else {
        //log("move_common_check_stale_n_mate() - No CHECK.");
        if (check_args != null) {
            require(not check_args.is_check, "Client thinks this is check but we could not verify it.");
            require(not check_args.is_checkmate, "Client thinks this is checkmate but we could not verify it.");
        }

        // Only check for stalemated opponent if opp is not in check.
        // Stalemate MUST be checked for here, since the caller isn't necessarily benefiting from this ending.
        is_stalemate = check_calc_stalemate(
            game_id,
            opp_team, // kings_team
            our_team, // mating_team
            board
        );

        if (is_stalemate) {
            if (check_args != null) {
                require(check_args.is_stalemate, "Our calculation says stalemate but client didn't claim it?");
            }

            log("game_id: "+game_id+ " - Found STALEMATE. Game over");
            // TODO: Implement this
        } else {
            if (check_args != null) {
                require(not check_args.is_stalemate, "Client thinks this is stalemate but we could not verify it.");
            }
        }
    }

    return (is_check = is_check, is_checkmate = is_checkmate, is_stalemate = is_stalemate);
}


// -----------------------------------------------------------------------------------
// Stalemate happens when:
// 1. The king is NOT in check
// 2. The king has nowhere to go
// 3. There is no other piece that can move
// 
// The fastest way to verify that we are not in stalemate is to: 
//
// a) Take a random non-king piece, and see if it has any moves in its [move_tree], 
// if not, take next until only the king is left.
// 
// b) When we get to the king it gets harder, we must use the [kings_escape_calculator].
// -----------------------------------------------------------------------------------
function check_calc_stalemate(
    game_id: integer,
    kings_team: character_team, 
    mating_team: character_team,
    board_all: board_positions_all
): boolean {
    
    // a) Take a random non-king piece, and see if it has any moves in its [move_tree]
    for (subject in team_get_subjects_list(kings_team)) {
        if(inner_single_subject_can_act(game_id, board_all, subject)) {
            // Not stalemate
            //log("move_common_calc_stalemate() - Not stalemate since subject at " + subject.position + " can take action.");
            return false;
        }
    }
    
    // b) When we get to the king it gets harder, we must use the [king_escape_data]
    // Note that for stalemate there is no subject that can help the king, so the king must find a good square alone
    val king = team_get_king(kings_team)!!;
    val king_wpaa = with_pos_and_alignment(king.vuln.position, king.vuln.align);
    
    val king_escape_data = king_escape_builder(game_id, king_wpaa, mating_team, board_all);
    val (escape_pos, is_attack) = king_escape_find_first_without_help(game_id, king_escape_data, king_wpaa);
    
    if (escape_pos != null) {
        return false; // Not stalemate, since the king can escape
    } else {
        log("game_id: "+game_id+ " - Stalemate detected! King at " + king.vuln.position + " has no moves and is not in check.");
        return true;
    }
}




// Returns "true" if this subject can take action the coming turn.
function inner_single_subject_can_act(game_id: integer, board_all: board_positions_all, subject: piece_living_data): boolean {
    // Get all valid moves for the subject
    val is_enchanted_jump = false;  // <-- Magic Jumps shouldn't be relevant here.

    // TODO: We don't care about "en passant" here, but we should,
    // since it's possible that the ONLY move that the king's team can do is 
    // en passant, and if this is the case it's NOT a stalemate.
    val v_ctxt =  pre_vuln_context(null);

    val (norm_mt, jump_mt) = rules_get_all_valid_moves(
            game_id,
            board_all, 
            subject.active_type,  // We wanna know how it moves, not what it is.
            is_enchanted_jump,
            subject.is_knighted,
            subject.vuln.position, 
            subject.vuln.align,
            v_ctxt 
    );
    // Ignore castle, since this never a king.
    
    if (norm_mt != null and move_tree_can_take_action(norm_mt)) {
        return true;
    }
    
    if (jump_mt != null and move_tree_can_take_action(jump_mt)) {
        return true;
    }
    
    return false;
}