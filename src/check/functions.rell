

// -----------------------------------------------------------------------------------
// Main function called from other modules after a move or a card has been played.
// 
// Since it's a bit tricky we want to give an exact error message in the require,
// to help the client figure out what went wrong.
// -----------------------------------------------------------------------------------
function check_stale_n_mate(
    game_id: integer,
    minimal_game: minimal_game_result, 
    board: board_positions_all, // <-- Should been updated with all moves, promotions and deaths
    opp_align: alignment,
    opp_king: piece_living_data,
    our_team: character_team,
    opp_team: character_team,
    check_args: move_check_arguments? // Optional, since the node will calculate the check/stale/mate status even if the client doen't send it.
): (is_check: boolean, is_checkmate: boolean, is_stalemate: boolean) {

    // For check calculation we don't have to use hypothetical moves, since we do the
    // calculation AFTER the move has been saved to the board.
    val check_sb_data = check_sb_build_calculator(
        game_id,
        opp_king.vuln.position, // We're supposed to check the opponent's king
        our_team, // we are the checking team
        board // This isn't a hypothetical move, must use the new board positions
    );

    val (is_check, check_desc) = check_sb_is_check_with_desc(check_sb_data);
    if (is_check) {
        log("game_id: "+game_id+ " - Found CHECK.");
        if (check_args != null) {
            require(check_args.is_check or check_args.is_checkmate, "Client said is_check = false, but: " + check_desc);
        }

        val calc_checkmate = calc_mate(game_id, board, opp_align, opp_king, our_team, opp_team, check_args, check_sb_data);
        return (is_check = true, is_checkmate = calc_checkmate, is_stalemate = false);
    } else {
        //log("move_common_check_stale_n_mate() - No CHECK.");
        if (check_args != null) {
            require(not check_args.is_check, "Client said is_check = false, but: " + check_desc);
            require(not check_args.is_checkmate, "Client said is_checkmate = true, but: "+ check_desc);
        }
        val calc_stalemate = calc_stale(game_id, board, our_team, opp_team, check_args);
        return (is_check = false, is_checkmate = false, is_stalemate = calc_stalemate);
    }
}

function calc_mate(
    game_id: integer,
    board: board_positions_all, 
    opp_align: alignment,
    opp_king: piece_living_data,
    our_team: character_team,
    opp_team: character_team,
    check_args: move_check_arguments?, 
    check_sb_data: check_stat_board_calculator_data
): boolean {
    var is_checkmate = false;
    // -----------------------------------------------------------------------------------
    // We do this as a two-step rocket, where we only calculate mate if we have check.
    // For the mate calculation we must use hypothetical moves, which is heavier.
    // -----------------------------------------------------------------------------------
    val king_wpaa = with_pos_and_alignment(opp_king.vuln.position, opp_align);
    val check_mate_data = check_mate_calc_data_constructor(
            game_id,
            king_wpaa, // We're supposed to check the opponent's king
            our_team, // We are the mating team
            board,
            check_sb_data
    );
    val (can_escape: boolean, desc: text) = check_mate_can_escape(game_id, check_mate_data, opp_team);
    is_checkmate = not can_escape;

    // Before we move on, see if client needs verification of its calculations
    if (check_args != null) { 
        if (is_checkmate) {
            require(check_args.is_checkmate, "Client said is_checkmate = false, but: " + desc);
        } else {
            require(not check_args.is_checkmate, "Client said is_checkmate = true, but: " + desc);
        }
    }

    if (is_checkmate) {
        log("game_id: "+game_id+ " - Found CHECKMATE. Game over");
        // TODO: Implement this
    }

    return is_checkmate;
} 

function calc_stale(
    game_id: integer,
    board: board_positions_all, 
    our_team: character_team,
    opp_team: character_team,
    check_args: move_check_arguments?
): boolean {
    var is_stalemate = false;


    // Only check for stalemated opponent if opp is not in check.
    // Stalemate MUST be checked for here, since the caller isn't necessarily benefiting from this ending.
    val (calc_is_stalemate, calc_stalemate_desc) = check_calc_stalemate(
        game_id,
        opp_team, // kings_team
        our_team, // mating_team
        board
    );
    is_stalemate = calc_is_stalemate;

    if (check_args != null) {
        if (is_stalemate) {
            require(check_args.is_stalemate, "Client said is_stalemate = true, but: " + calc_stalemate_desc);
        } else {
            require(not check_args.is_stalemate, "Client said is_stalemate = false, but: " + calc_stalemate_desc);
        }
    }

    if (is_stalemate) {
        log("game_id: "+game_id+ " - Found STALEMATE. Game over");
        // TODO: Implement this
    }

    return is_stalemate;
}


// -----------------------------------------------------------------------------------
// Stalemate happens when:
// 1. The king is NOT in check
// 2. The king has nowhere to go
// 3. There is no other piece that can move
// 
// The fastest way to verify that we are not in stalemate is to: 
//
// a) Take a random non-king piece, and see if it has any moves in its [move_tree], 
// if not, take next until only the king is left.
// 
// b) When we get to the king it gets harder, we must use the [kings_escape_calculator].
// -----------------------------------------------------------------------------------
function check_calc_stalemate(
    game_id: integer,
    kings_team: character_team, 
    mating_team: character_team,
    board_all: board_positions_all
): (boolean, text) {
    
    // a) Take a random non-king piece, and see if it has any moves in its [move_tree]
    for (subject in team_get_subjects_list(kings_team)) {
        if(inner_single_subject_can_act(game_id, board_all, subject)) {
            // Not stalemate
            val act_desc = "Not stalemate since subject at " + subject.vuln.position + " can take action.";
            //log("move_common_calc_stalemate() - " + act_desc);
            return (false, act_desc);
        }
    }
    
    // b) When we get to the king it gets harder, we must use the [king_escape_data]
    // Note that for stalemate there is no subject that can help the king, so the king must find a good square alone
    val king = team_get_king(kings_team)!!;
    val king_wpaa = with_pos_and_alignment(king.vuln.position, king.vuln.align);
    
    val king_escape_data = king_escape_builder(game_id, king_wpaa, mating_team, board_all);
    val (escape_pos, is_attack, king_desc) = king_escape_find_first_without_help(game_id, king_escape_data, king_wpaa);
    
    if (escape_pos != null) {
        return (false, "Not stalemate, since " + king_desc);
    } else {
        val stalemate_desc = "Stalemate detected! King at " + king.vuln.position + " has no moves and is not in check.";
        log("game_id: "+game_id+ " - " + stalemate_desc);
        return (true, stalemate_desc);
    }
}




// Returns "true" if this subject can take action the coming turn.
function inner_single_subject_can_act(game_id: integer, board_all: board_positions_all, subject: piece_living_data): boolean {
    // Get all valid moves for the subject
    val is_enchanted_jump = false;  // <-- Magic Jumps shouldn't be relevant here.

    // TODO: We don't care about "en passant" here, but we should,
    // since it's possible that the ONLY move that the king's team can do is 
    // en passant, and if this is the case it's NOT a stalemate.
    val v_ctxt =  pre_vuln_context(null);

    val (norm_mt, jump_mt) = rules_get_all_valid_moves(
            game_id,
            board_all, 
            subject.active_type,  // We wanna know how it moves, not what it is.
            is_enchanted_jump,
            subject.is_knighted,
            subject.vuln.position, 
            subject.vuln.align,
            v_ctxt 
    );
    // Ignore castle, since this never a king.
    
    if (norm_mt != null and move_tree_can_take_action(norm_mt)) {
        return true;
    }
    
    if (jump_mt != null and move_tree_can_take_action(jump_mt)) {
        return true;
    }
    
    return false;
}