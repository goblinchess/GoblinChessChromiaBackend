
// -----------------------------------------------
// Factory methods
// -----------------------------------------------

// -----------------------------------------------
// Build the calculator without any hypothetical moves.
// -----------------------------------------------
function check_sb_build_calculator(
    game_id: integer,
    king_pos: integer,
    checking_team: character_team,
    board_all: board_positions_all
): check_stat_board_calculator_data {
    val checking_team_move_trees = team_get_all_move_trees(game_id, checking_team, board_all);
    log("check_sb_build_calculator() - king at " + king_pos + "");
    return check_sb_constructor(game_id, king_pos, checking_team_move_trees);
}

// -----------------------------------------------
// When we move the king
//
// Portals:
// King on entry: It doesn't matter if the portal exit is under attack. 
// King will just wait until it is free.
// -----------------------------------------------
function check_sb_build_hypothetical_king_move(
        game_id: integer,
        king_pos_start: integer,
        king_pos_dest: integer,
        checking_team: character_team,
        board_all: board_positions_all
): check_stat_board_calculator_data {
    // ------------------------
    // 1. Clone the board
    // ------------------------

    // map doesn't have a clone() method, so we need to do it manually.
    val board_chr_clone =  map<integer, with_pos_and_alignment_and_type>();  
    for (sq in board_all.board_characters.keys()) {
        board_chr_clone[sq] = board_all.board_characters[sq];
    }
    
    val board_all_clone = board_positions_all_clone_new_pieces(
        board_all, 
        board_chr_clone // Sending the mock, which will be used by mating team to find position king's pieces
    );

    // ------------------------
    // 2. Make the move on clone board
    // ------------------------
    board_place_character_at(
        board_all_clone,
        king_pos_start,
        king_pos_dest,
        true // This might be an attack
    );
    
    // ------------------------
    // 3. Build new calculator
    // ------------------------
    // We don't need the move tree of the (potentially) killed piece at the destination (if any).
    val checking_team_move_trees: list<move_tree> = team_get_all_move_trees_except_for_one( 
        game_id,
        checking_team,
        board_all_clone,
        king_pos_dest,
        -1 // Not used
    );
    print("game_id: "+game_id+ " - king at " + king_pos_dest);
    return check_sb_constructor(game_id, king_pos_dest, checking_team_move_trees);
}

// -----------------------------------------------
// We build an hypothetical check calc, where we change one position on the king's team:
// 
// 1. Clone the board -> hypothetical board
// 2. Make the move on the hypothetical board (clone). 
//    If we move the king, we must remember to save a new "king pos". 
// 3. Build a new [CheckCalculator] based on the hypothetical board (using the opponent as "mating team"),
// -----------------------------------------------
function check_sb_build_hypothetical_subject_move(
    game_id: integer,
    pos_start: integer,
    pos_dest: integer,
    king_orig_pos: integer,
    checking_team: character_team,
    board_all: board_positions_all,
    count_enemy_at_pos_as_dead: integer // Use -1 if not used 
): check_stat_board_calculator_data {

    // ------------------------
    // 1. Clone the board -> hypothetical board
    // ------------------------
    // map doesn't have a clone() method, so we need to do it manually.
    val board_chr_clone =  map<integer, with_pos_and_alignment_and_type>();  
    for (sq in board_all.board_characters.keys()) {
        board_chr_clone[sq] = board_all.board_characters[sq];
    }

    val board_all_clone = board_positions_all_clone_new_pieces(
        board_all, 
        board_chr_clone // Sending the mock, which will be used by mating team to find position king's pieces
    );

    // ------------------------
    // 2. Make the move on the hypothetical board (clone) 
    // ------------------------
    board_place_character_at(
        board_all_clone,
        pos_start,
        pos_dest,
        true // This might be an attack
    );

    // ------------------------
    // 3. Build new calculator based on the hypothetical board
    // ------------------------
    // We don't need the move tree of the (potentially) killed piece at the destination (if any).
    val checking_team_move_trees: list<move_tree> = team_get_all_move_trees_except_for_one( 
        game_id,
        checking_team,
        board_all_clone,
        pos_dest,
        count_enemy_at_pos_as_dead 
    );

    print("check_sb_build_hypothetical_subject_move() - king at " + king_orig_pos + ", subject at: " + pos_dest);
    return check_sb_constructor(game_id, king_orig_pos, checking_team_move_trees);
}

// -----------------------------------------------
// We build an hypothetical check calc, where we remove one subject on the king's team:
// 
// 1. Clone the board -> hypothetical board
// 2. Remove piece on the hypothetical board (clone). 
// 3. Build a new [CheckCalculator] based on the hypothetical board (using the opponent as "mating team"),
// -----------------------------------------------
function check_sb_build_hypothetical_subject_gone(
    game_id: integer,
    subject_pos_to_remove: integer,
    king_pos: integer,
    checking_team: character_team,
    board_all: board_positions_all
): check_stat_board_calculator_data {

    // ------------------------
    // 1. Clone the board -> hypothetical board
    // ------------------------
    // map doesn't have a clone() method, so we need to do it manually.
    val board_chr_clone =  map<integer, with_pos_and_alignment_and_type>();  
    for (sq in board_all.board_characters.keys()) {
        if (sq != subject_pos_to_remove) { //2. Remove piece on the hypothetical board (clone) 
            board_chr_clone[sq] = board_all.board_characters[sq];
        }
    }

    val board_all_clone = board_positions_all_clone_new_pieces(
        board_all, 
        board_chr_clone // Sending the mock, which will be used by mating team to find position king's pieces
    );

    // ------------------------
    // 3. Build new calculator based on the hypothetical board
    // ------------------------
    val checking_team_move_trees = team_get_all_move_trees(game_id, checking_team, board_all_clone);
    
    print("check_sb_build_hypothetical_subject_gone() - king at " + king_pos + ", subject at: " + subject_pos_to_remove + " is gone.");
    return check_sb_constructor(game_id, king_pos, checking_team_move_trees);
}


// -----------------------------------------------
// We build an hypothetical check calc, where we add a wall on the board:
// 
// 1. Clone the board -> hypothetical board
// 2. Add the wall on the hypothetical board (clone). 
// 3. Build a new [CheckCalculator] based on the hypothetical board (using the opponent as "mating team"),
// -----------------------------------------------
function check_sb_build_hypothetical_wall(
    game_id: integer,
    wall_positions: list<integer>,
    king_orig_pos: integer,
    checking_team: character_team,
    board_all: board_positions_all
): check_stat_board_calculator_data {

    // ------------------------
    // 1. Clone the board -> hypothetical board
    // ------------------------
    // map doesn't have a clone() method, so we need to do it manually.
    val board_obstacles_clone = map<integer, with_pos_and_alignment_and_type>();  
    for (sq in board_all.board_obstacles.keys()) {
        board_obstacles_clone[sq] = board_all.board_obstacles[sq];
    }

    // ------------------------
    // 2. Add the wall on the hypothetical board (clone) 
    // ------------------------
    val pos_wall1 = wall_positions[0];
    val pos_wall2 = wall_positions[1];
    val pos_wall3 = wall_positions[2];

    // Add the obstacles at the wall positions with neutral alignment
    board_obstacles_clone[pos_wall1] = align_wpat_create_obstacle(pos_wall1);
    board_obstacles_clone[pos_wall2] = align_wpat_create_obstacle(pos_wall2);
    board_obstacles_clone[pos_wall3] = align_wpat_create_obstacle(pos_wall3);

    val board_all_clone = board_positions_all_clone_new_obstacles(
        board_all, 
        board_obstacles_clone // Use our modified obstacles
    );

    // ------------------------
    // 3. Build new calculator based on the hypothetical board
    // ------------------------
    val checking_team_move_trees = team_get_all_move_trees(game_id, checking_team, board_all_clone);
    
    print("check_sb_build_hypothetical_wall() - king at " + king_orig_pos + ", wall at: " + pos_wall1 + ", " + pos_wall2 + ", " + pos_wall3);
    return check_sb_constructor(game_id, king_orig_pos, checking_team_move_trees);
}
