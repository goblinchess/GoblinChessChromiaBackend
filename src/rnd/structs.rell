
// The result of N random numbers with the same max value.
struct random_results {
    results: list<integer>;
    base_seed: integer; // The seed used to generate the results
    new_seed: integer; // Use this to generate more random numbers later
}

// ---------------------------------------------------
// During an ongoing game we must save the results
// with some context.
// (After the game we will validate all random numbers in order,
// using the seed from the client.)
// ---------------------------------------------------

enum rnd_nr_type {
    DICE_ROLL, // The roll of a die (during chaos attack)
    CARD_PORTAL, // Need random for exit
    CARD_RESURRECT // Need random for resurrect square
}

// Holds a random number (generated by the client)
// where the client also provides min and max.
struct rnd_data {
    result: integer; // The result coming from the client
    min: integer; // The minimum possible value (e.g. 1 for D6)
    max: integer; // The maximum possible value (e.g. 6 for D6)
}

// Holds a random number (generated by the client)
// on its way to be stored in the DB.
struct rnd_result {
    result: integer; // The result coming from the client
    type: rnd_nr_type; // What action generated this number.
    min: integer; // The minimum possible value (e.g. 1 for D6)
    max: integer; // The maximum possible value (e.g. 6 for D6)
}
