

// ----------------------------------------------------------------------------
// Base functions for move rules
// ----------------------------------------------------------------------------

// Helper function to interpret a path position
function rule_interpret_path_position(
    board_positions: board_positions_all,
    align: alignment,
    new_pos_struct: square_pos,
    tmp_path: list<integer>,
    pre_tree: pre_tree
): boolean {
    val ss = board_get_square_status(board_positions, new_pos_struct);
    
    when (ss) {
        square_status.FREE -> {
            //log("interpret_path_position() - Free space at " + new_pos);
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            pre_tree.movable_sqs.add(new_pos);
            tmp_path.add(new_pos);
            return true; // Free space is not blocking, continue on path
        }
        square_status.BLACK_PIECE -> {
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            if (align == alignment.WHITE or align == alignment.NEUTRAL) {
                // White can attack
                //log("interpret_path_position() - White can attack at " + new_pos);
                pre_tree.attackable_sqs.add(new_pos);
                tmp_path.add(new_pos);
                pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_ATTACK));
            } else if (tmp_path.size() > 1) {
                // Black protected by another black
                pre_tree.protected_sqs.add(new_pos);
                pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_MOVE));
            }
            return false;
        }
        square_status.WHITE_PIECE -> {
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            if (align == alignment.BLACK or align == alignment.NEUTRAL) {
                // Black can attack
                //log("interpret_path_position() - Black can attack at " + new_pos);
                pre_tree.attackable_sqs.add(new_pos);
                tmp_path.add(new_pos);
                pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_ATTACK));
            } else if (tmp_path.size() > 1) {
                // White protected by white
                pre_tree.protected_sqs.add(new_pos);
                pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_MOVE));
            }
            return false;
        }
        square_status.NEUTRAL_PIECE, square_status.OBSTACLE -> {
            // Everyone can attack neutral/obstacle
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            pre_tree.attackable_sqs.add(new_pos);
            tmp_path.add(new_pos);
            pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_ATTACK));
            return false;
        }
        else -> {
            // Obstacle or out of board
            if (tmp_path.size() > 1) {
                pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_MOVE));
            }
            return false;
        }
    }
}

// Helper function for single step interpretation
function rule_interpret_single_step_position(
    board_positions: board_positions_all,
    align: alignment,
    new_square_pos: square_pos,
    tmp_path: list<integer>,
    pre_tree: pre_tree,
    is_jump: boolean
) {
    //log ("rule_interpret_single_step_position(" + new_pos + ")");
    val ss = board_get_square_status(board_positions, new_square_pos);
    
    when(ss) {
        square_status.FREE -> {
            val new_pos = pos_to_int(new_square_pos); // Safe, since not out of board.
            pre_tree.movable_sqs.add(new_pos);
            tmp_path.add(new_pos);
            _add_move_to_paths(tmp_path, is_jump, pre_tree.paths);
        }
        square_status.BLACK_PIECE -> {
            val new_pos = pos_to_int(new_square_pos); // Safe, since not out of board.
            if (align == alignment.WHITE or align == alignment.NEUTRAL) {
                pre_tree.attackable_sqs.add(new_pos);
                tmp_path.add(new_pos);
                _add_attack_to_paths(tmp_path, is_jump, pre_tree.paths);
            } else {
                pre_tree.protected_sqs.add(new_pos);
            }
        }
        square_status.WHITE_PIECE -> {
            val new_pos = pos_to_int(new_square_pos); // Safe, since not out of board.
            if (align == alignment.BLACK or align == alignment.NEUTRAL) {
                pre_tree.attackable_sqs.add(new_pos);
                tmp_path.add(new_pos);
                _add_attack_to_paths(tmp_path, is_jump, pre_tree.paths);
            } else {
                pre_tree.protected_sqs.add(new_pos);
            }
        }
        square_status.NEUTRAL_PIECE, square_status.OBSTACLE -> {
            val new_pos = pos_to_int(new_square_pos); // Safe, since not out of board.
            pre_tree.attackable_sqs.add(new_pos);
            tmp_path.add(new_pos);
            _add_attack_to_paths(tmp_path, is_jump, pre_tree.paths);
        }
        else -> {
            // Out of board, do nothing
        }
    }
}

// Helper functions for path management
function _add_move_to_paths(tmp_path: list<integer>, is_jump: boolean, paths: list<path_base>) {
    if (is_jump) {
        paths.add(path_jump_move(tmp_path));
    } else {
        paths.add(path_base(tmp_path, path_type.GROUND_MOVE));
    }
}

function _add_attack_to_paths(tmp_path: list<integer>, is_jump: boolean, paths: list<path_base>) {
    if (is_jump) {
        paths.add(path_jump_attack(tmp_path));
    } else {
        paths.add(path_base(tmp_path, path_type.GROUND_ATTACK));
    }
}

// Handles the case before we have encountered the obstacle. 
// We return two things:
// 1. continue = if "true" we should continue on this route to find the obstacle.
// 2. obstacleFound = if "true" the given square had an obstacle on it, i.e. we found our goal.
function rule_interpret_path_position_pre_obstacle(
    board_positions: board_positions_all,
    new_pos: square_pos 
): (boolean, boolean) {
    val ss = board_get_square_status(board_positions, new_pos);
    
    when(ss) {
        square_status.FREE -> {
            return (true, false); // Continue path, no obstacle found
        }
        square_status.BLACK_PIECE, 
        square_status.WHITE_PIECE,
        square_status.NEUTRAL_PIECE,
        square_status.OBSTACLE -> {
            return (true, true); // Continue path, obstacle found
        }
        else -> {
            return (false, false); // Out of board, stop path
        }
    }
}

// ---------------------------------------------------------------------------------------------------------
// This method will potentially add the "newPos" to a "movable square" or to an "attackable square" based on 
// what the board tells us about this square. This logic should be same for most characters, since most can 
// attack a square if it can move to it (but not always the case for elves, frogs). 
//
// The difference from [rule_interpret_path_position] is that every Path will be a Jump.
// 
// Returns "true" if we should continue on this path.
// ---------------------------------------------------------------------------------------------------------
function rule_interpret_path_position_post_obstacle(
    board_positions: board_positions_all,
    align: alignment,
    start_pos: integer,
    new_pos_struct: square_pos,
    pre_tree: pre_tree
): boolean {
    val ss = board_get_square_status(board_positions, new_pos_struct);
    
    when(ss) {
        square_status.FREE -> {
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            pre_tree.movable_sqs.add(new_pos);
            pre_tree.paths.add(path_jump_move_2(start_pos, new_pos));
            return true; // Free space is not blocking, continue on path
        }
        square_status.BLACK_PIECE -> {
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            if (align == alignment.WHITE or align == alignment.NEUTRAL) {
                // We can attack
                pre_tree.attackable_sqs.add(new_pos);
                pre_tree.paths.add(path_jump_attack_2(start_pos, new_pos));
            }
            return false;
        }
        square_status.WHITE_PIECE -> {
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            if (align == alignment.BLACK or align == alignment.NEUTRAL) {
                // Enemy can attack us
                pre_tree.attackable_sqs.add(new_pos);
                pre_tree.paths.add(path_jump_attack_2(start_pos, new_pos));
            }
            return false;
        }
        square_status.NEUTRAL_PIECE, square_status.OBSTACLE -> {
            // Everyone can attack neutral/obstacle
            val new_pos = pos_to_int(new_pos_struct); // Safe, since not out of board.
            pre_tree.attackable_sqs.add(new_pos);
            pre_tree.paths.add(path_jump_attack_2(start_pos, new_pos));
            return false;
        }
        else -> {
            return false; // Out of board, does not matter, just quit
        }
    }
}

// Same as above, but for peaceful characters (toad).
function rule_interpret_path_position_post_obstacle_peaceful(
    board_positions: board_positions_all,
    start_pos: integer,
    new_square_pos: square_pos,
    pre_tree: pre_tree
): boolean {
    val ss = board_get_square_status(board_positions, new_square_pos);
    
    when(ss) {
        square_status.FREE -> {
            val new_pos = pos_to_int(new_square_pos); // Safe, since not out of board.
            pre_tree.movable_sqs.add(new_pos);
            pre_tree.paths.add(path_jump_move_2(start_pos, new_pos));
            return true; // Free space is not blocking, continue on path
        }
        else -> {
            return false; // Friend, Foe, Out of board, does not matter, just quit
        }
    }
}
