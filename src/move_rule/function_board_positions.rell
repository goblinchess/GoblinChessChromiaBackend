// All these "board_" functions work with the BOARD_POSITIONS_ALL struct.
// TODO: Could have made a namespace for this.


// Returns a BOARD_POSITIONS_ALL struct.
function build_board_positions_all(
    game: game, 
    board: list<with_pos_and_alignment>, 
    portal_list: list<owned_portal>
): board_positions_all {

    // 1. Split the board into pieces and obstacles.
    val pieces = map<integer, with_pos_and_alignment>();
    val obstacles = map<integer, with_pos_and_alignment>();

    for (v in board) {
        if (v.alignment == alignment.NEUTRAL) {
            obstacles[v.pos] = v;
        } else {
            pieces[v.pos] = v;
        }
    }

    // 2. Return the struct
    return board_positions_all(
        board_characters = pieces, 
        board_obstacles = obstacles,
        portals = portal_list
    );
}

// ----------------
// Yes/No queries
// ----------------

function board_is_empty(board_positions_all, pos: integer): boolean {
    require(piece_is_pos_on_board(pos), "Illegal position: " + pos);
    
    if (board_positions_all.board_characters.contains(pos)) {
        return false;
    }
    if (board_positions_all.board_obstacles.contains(pos)) {
        return false;
    }
    return true;
}

function board_is_free_at(board_positions_all, pos: square_pos): boolean {
    return board_get_square_status(board_positions_all, pos) == square_status.FREE;
}


function board_is_white_piece_at(board_positions_all, pos: square_pos): boolean {
    return board_get_square_status(board_positions_all, pos) == square_status.WHITE_PIECE;
}

function board_is_black_piece_at(board_positions_all, pos: square_pos): boolean {
    return board_get_square_status(board_positions_all, pos) == square_status.BLACK_PIECE;
}

function board_is_attackable_black_or_neutral_at(board_positions_all, pos: square_pos): boolean {
    val stat = board_get_square_status(board_positions_all, pos);
    return stat == square_status.BLACK_PIECE or 
           stat == square_status.NEUTRAL_PIECE or 
           stat == square_status.OBSTACLE;
}

function board_is_attackable_white_or_neutral_at(board_positions_all, pos: square_pos): boolean {
    val stat = board_get_square_status(board_positions_all, pos);
    return stat == square_status.WHITE_PIECE or 
           stat == square_status.NEUTRAL_PIECE or 
           stat == square_status.OBSTACLE;
}

// ----------------
// Getters
// ----------------
function board_get_at(board_positions_all, pos: integer): with_pos_and_alignment? {
    require(piece_is_pos_on_board(pos), "Out of board " + pos);

    if (board_positions_all.board_characters.contains(pos)) {
        return board_positions_all.board_characters[pos];
    } else if (board_positions_all.board_obstacles.contains(pos)){
        return board_positions_all.board_obstacles[pos];
    } else {
        return null;
    }
}

function board_get_square_status(board_positions_all, pos: square_pos): square_status {
    val pos_int = pos_to_int(pos);
    return board_get_square_status_int(board_positions_all, pos_int);
}

function board_get_square_status_int(board_positions_all, pos: integer): square_status {
    if (piece_is_pos_out_of_board(pos)) {
        return square_status.OUT_OF_BOARD;
    }
    
    if (board_positions_all.board_characters.contains(pos)) {
        val found = board_positions_all.board_characters[pos];
        return align_piece_to_square_status(found.alignment); // BLACK, WHITE or NEUTRAL
    } else if (board_positions_all.board_obstacles.contains(pos)){
        return square_status.OBSTACLE; // Easy
    } else {
        return square_status.FREE; // Easy
    }
}

// ----------------
// Portals 
// ----------------

// Returns a portal if:
// a) the given pos is a portal entry,
// b) the portal is owned by me
// c) the exit isn't blocked.
function board_is_unblocked_portal_at(
    board_positions_all, 
    pos: integer, 
    align: alignment
): owned_portal? {
    val portal = board_find_my_portal_from_entry(board_positions_all, pos, align);
    if (portal != null) {
        // NOT SO FAST. We can only use it if the exit is empty.
        if (board_is_empty(board_positions_all, portal.exit_pos)) {
            return portal;
        } else { 
            return null;
        }
    } else {
        return null;
    }
}


// Do we have a portal owned by "my_align" that has "pos" as its entry point?
function board_find_my_portal_from_entry(
    board_positions_all, 
    pos: integer, 
    align: alignment
) {
    for (portal: owned_portal in board_positions_all.portals) {
        if (is_portal_owned_by(portal, align)) {
            if (portal.entry_pos == pos) {
                return portal;
            }
        }
    }
    return null;
}


// Returns all portals where:
// b) the portal is owned by me
// c) the exit isn't blocked.
/* 
// ONLY NEEDED BY THE CLIENT WHEN DECIDING IF A PORTAL SHOULD BE USED.
// WE ONLY VERIFY THIS ON THE NODE.
function board_find_unblocked_portals(
    board_positions_all, 
    my_align: alignment
): list<owned_portal> {
    return board_positions_all.portals.get_all()
        .filter(portal -> 
            portal.owner_align == my_align and 
            is_empty(board_positions_all, portal.exit_pos)
        );
}
*/
