// ----------------------------------------------------------------------------
// Knight moves 
// ----------------------------------------------------------------------------

function knight_all_valid_moves(
    game_id: integer,
    board_positions: board_positions_all, 
    starting_pos_int: integer, 
    align: alignment
): move_tree {
    val ptree = pre_tree();
    val starting_square_pos = pos_from_integer(starting_pos_int);
    
    // Get all potential knight moves
    val potential_moves = knight_all_potential_moves(game_id, starting_square_pos);
    
    for (new_pos in potential_moves) {
        val tmp_path = [starting_pos_int]; // Initialize list with starting position
        rule_interpret_single_step_position(board_positions, align, new_pos, tmp_path, ptree, true);
    }
    
    return move_tree_build(starting_pos_int, ptree);
}

function knight_all_potential_moves(game_id: integer, curr_pos: square_pos): list<square_pos> {
    val moves = list<square_pos>();
    //log ("Knight all potential moves: " + pos);
    
    // Forward moves
    moves.add(pos_x_and_y_shift(curr_pos, 1, 2));
    moves.add(pos_x_and_y_shift(curr_pos, -1, 2));
    
    // Right moves
    moves.add(pos_x_and_y_shift(curr_pos, 2, 1));
    moves.add(pos_x_and_y_shift(curr_pos, 2, -1));
    
    // Backward moves
    moves.add(pos_x_and_y_shift(curr_pos, 1, -2));
    moves.add(pos_x_and_y_shift(curr_pos, -1, -2));
    
    // Left moves
    moves.add(pos_x_and_y_shift(curr_pos, -2, 1));
    moves.add(pos_x_and_y_shift(curr_pos, -2, -1));
    //log ("/Knight all potential moves: " + pos);
    
    return moves;
}
