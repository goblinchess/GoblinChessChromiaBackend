// ----------------------------------------------------------------------------
// Queen moves 
// ----------------------------------------------------------------------------

function queen_all_valid_moves(
    game_id: integer,
    board_positions: board_positions_all, 
    pos: integer, 
    align: alignment
): move_tree {
    val ptree = pre_tree();
    
    for (dir in range(0, 8)) {
        queen_follow_path(game_id, board_positions, pos, align, dir, ptree);
    }
    
    return move_tree_build(pos, ptree);
}

function queen_follow_path(
    game_id: integer,
    board_positions: board_positions_all, 
    starting_pos_int: integer, 
    align: alignment, 
    dir: integer, 
    pre_tree: pre_tree
) {
    val tmp_path = [starting_pos_int]; // Initialize list with starting position

    val starting_square_pos = pos_from_integer(starting_pos_int);
    var shift = 0;
    var continue_path = true;
    
    var dbg = "";
    while (shift < 10 and continue_path) {
        shift += 1;

        val new_pos = pos_calc_from_directional_shift(game_id, starting_square_pos, shift, dir);
        require(new_pos != null, "Bug. New position is null");
        continue_path = rule_interpret_path_position(board_positions, align, new_pos, tmp_path, pre_tree);
    }
}

function queen_all_jump_over_moves(
    game_id: integer,
    board_positions: board_positions_all, 
    pos: integer, 
    align: alignment
): move_tree {
    val pre_tree = pre_tree();
    
    for (dir in range(0, 8)) {
        queen_follow_path_jump_over(game_id, board_positions, pos, align, dir, pre_tree);
    }
    
    return move_tree_build(pos, pre_tree);
}

function queen_follow_path_jump_over(
    game_id: integer,
    board_positions: board_positions_all, 
    starting_pos_int: integer, 
    align: alignment, 
    dir: integer, 
    pre_tree: pre_tree
) {
    val starting_square_pos = pos_from_integer(starting_pos_int);
    var shift = 0;
    var continue_path = true;
    var has_passed_obstacle = false;
    
    while (shift < 10 and continue_path) {
        shift += 1;
        val new_square_pos = pos_calc_from_directional_shift(game_id, starting_square_pos, shift, dir);
        require(new_square_pos != null, "Bug. New position is null");
        
        if (not has_passed_obstacle) {
            val (new_continue_path, new_has_passed_obstacle) = rule_interpret_path_position_pre_obstacle(board_positions, new_square_pos);
            continue_path = new_continue_path;
            has_passed_obstacle = new_has_passed_obstacle;
        } else {
            continue_path = rule_interpret_path_position_post_obstacle(
                board_positions, align, starting_pos_int, new_square_pos, pre_tree
            );
        }
    }
}
