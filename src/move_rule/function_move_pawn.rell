// Main entry point for pawn moves

// Given a:
// 1. all pieces on the board, 
// 2. the pawn's position, and
// 3. the pawn's alignment
// ... we can return all valid moves.
//
// Note on vulnerable paths (= en passant):
// This method can both generate and consume vulnerable paths.
// a) If a pawn moves a double step, it will GENERATE a new vulnerable path 
//    (that can be attacked by the opponent later).
// b) If a pawn gets an old vulnerable path as an argument, it might CONSUME it, i.e. attacking
//    the mid-section of the path. 
function pawn_all_valid_moves(
    board_positions: board_positions_all,
    pos: integer,
    align: alignment,
    pre_vuln_ctxt: pre_vuln_context  // The vulnerable path from the opponent's turn, that we MIGHT be able to attack.
): move_tree {
    val pre_tree = pre_tree();
    
    // Get moves based on alignment
    val (mt, new_vulnerable_paths) = when (align) {
        alignment.WHITE -> pawn_all_valid_white_moves(board_positions, pos, pre_tree, pre_vuln_ctxt);
        alignment.BLACK -> pawn_all_valid_black_moves(board_positions, pos, pre_tree, pre_vuln_ctxt);
        else -> pawn_all_valid_neutral_moves(board_positions, pos, pre_tree, pre_vuln_ctxt);
    };
    
    // ---------------------
    // Extra
    // ---------------------
    // Before we return the [move_tree] we need to add:
    // a) Potential new vuln paths.
    if (new_vulnerable_paths.size() > 0)
    {
        mt.potential_vuln_paths = new_vulnerable_paths; // No need to merge here, just replace the null reference.
    }

    // b) Old vuln paths we can attack.
    mt.attackable_vulns = pre_vuln_ctxt;
            
    return mt;
}

function pawn_all_valid_white_moves(
    board_positions: board_positions_all,
    pos: integer,
    pre_tree: pre_tree,
    pre_vuln_ctxt: pre_vuln_context
): (move_tree, list<path_base>) {

    // The vulnerable paths that this move tree can generate.
    // (i.e. they don't exist yet)
    val new_vulnerable_paths = list<path_base>();
    
    val square_pos = pos_from_integer(pos);
    val x = square_pos.x;
    val y = square_pos.y;
    
    if (y < 7) {
        val forward_pos = square_pos(x = x, y = y + 1);  // Moving up for white
        val forward_pos_int = pos_to_int(forward_pos);
        
        if (board_is_free_at(board_positions, forward_pos)) {
            pre_tree.moves_harmless.add(forward_pos_int);
            val tmp_path: list<integer> = [pos, forward_pos_int];
            
            pawn_check_for_double_step_white(x, y, tmp_path, board_positions, pre_tree, new_vulnerable_paths);
            
            pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_MOVE));
        }
        
        val left_forward = square_pos(x = x - 1, y = y + 1);
        val left_forward_int = forward_pos_int - 1;
        
        if (pawn_is_attackable_black_or_neutral(board_positions, left_forward, pre_vuln_ctxt)) {
            pawn_add_attack(pos, left_forward_int, pre_tree);
        } else if (board_is_white_piece_at(board_positions, left_forward)) {
            pre_tree.protected_sqs.add(left_forward_int); // Only for mate calc
        }
        
        val right_forward = square_pos(x = x + 1, y = y + 1);
        val right_forward_int = forward_pos_int + 1;
        
        if (pawn_is_attackable_black_or_neutral(board_positions, right_forward, pre_vuln_ctxt)) {
            pawn_add_attack(pos, right_forward_int, pre_tree);
        } else if (board_is_white_piece_at(board_positions, right_forward)) {
            pre_tree.protected_sqs.add(right_forward_int); // Only for mate calc
        }
    }
    else 
    {
        // Standing at the final rank.
        // Yes, pawns at this line will be promoted, but we can get here during check mate 
        // calculations BEFORE we had time to promote the pawn to queen.
    }

    return (move_tree_build(pos, pre_tree), new_vulnerable_paths);
}

function pawn_all_valid_black_moves(
    board_positions: board_positions_all,
    pos: integer,
    pre_tree: pre_tree,
    pre_vuln_ctxt: pre_vuln_context
): (move_tree, list<path_base>) {
    val new_vulnerable_paths = list<path_base>();
    
    val square_pos = pos_from_integer(pos);
    val x = square_pos.x;
    val y = square_pos.y;
    
    if (y > 0) {
        val forward_pos = square_pos(x = x, y = y - 1); // Moving down for black
        val forward_pos_int = pos_to_int(forward_pos);
        
        if (board_is_free_at(board_positions, forward_pos)) {
            pre_tree.moves_harmless.add(forward_pos_int);
            val tmp_path: list<integer> = [pos, forward_pos_int];
            
            pawn_check_for_double_step_black(x, y, tmp_path, board_positions, pre_tree, new_vulnerable_paths);
            
            pre_tree.paths.add(path_base(tmp_path, path_type.GROUND_MOVE));
        }
        
        val left_forward = square_pos(x = x - 1, y = y - 1);
        val left_forward_int = forward_pos_int - 1;
        
        if (pawn_is_attackable_white_or_neutral(board_positions, left_forward, pre_vuln_ctxt)) {
            pawn_add_attack(pos, left_forward_int, pre_tree);
        } else if (board_is_black_piece_at(board_positions, left_forward)) {
            pre_tree.protected_sqs.add(left_forward_int); // Only for mate calc
        }
        
        val right_forward = square_pos(x = x + 1, y = y - 1);
        val right_forward_int = forward_pos_int + 1;

        if (pawn_is_attackable_white_or_neutral(board_positions, right_forward, pre_vuln_ctxt)) {
            pawn_add_attack(pos, right_forward_int, pre_tree);
        } else if (board_is_black_piece_at(board_positions, right_forward)) {
            pre_tree.protected_sqs.add(right_forward_int); // Only for mate calc
        }
    }
    else 
    {
        // Standing at the final rank.
        // Yes, pawns at this line will be promoted, but we can get here during check mate 
        // calculations BEFORE we had time to promote the pawn to queen.
    }
    
    return (move_tree_build(pos, pre_tree), new_vulnerable_paths);
}

function pawn_all_valid_neutral_moves(
    board_positions: board_positions_all,
    pos: integer,
    pre_tree: pre_tree,
    pre_vuln_ctxt: pre_vuln_context // <- Probably shouldn't ever be used by netural.
): (move_tree, list<path_base>) {
    // Neutral moves not implemented
    require(false, "Error: Monster moves not implemented");
    return (move_tree_build(pos, pre_tree), list<path_base>());
}

// -----------------------------------------------
// Returns all moves where we jump over an obstacle
//
// The pawn has a few special jump rules:
// - Since pawns cannot capture forward, when they jump forward they must land on
//   a free square.
// - Since pawns cannot move sideways, when they jump sidways they must attack
//   something on the square behind the obstacle.
// -----------------------------------------------
function pawn_all_jump_over_moves(
    board_positions: board_positions_all,
    pos_int: integer,
    align: alignment
): move_tree {
    val pre_tree = pre_tree();
    val pos = pos_from_integer(pos_int);
    val x = pos.x;
    val y = pos.y;
    
    when (align) {
        alignment.WHITE -> {
            // Forward is NORTH (y increases)
            val forward_pos = square_pos(x = x, y = y + 1);
            val left_forward = square_pos(x = x - 1, y = y + 1);
            val right_forward = square_pos(x = x + 1, y = y + 1);
            
            val obstacle_positions = [forward_pos, left_forward, right_forward];
            
            var i = 0;
            for (obstacle_pos in obstacle_positions) {
                i += 1;
                val (continue_path, has_passed_obstacle) = rule_interpret_path_position_pre_obstacle(board_positions, obstacle_pos);
                
                if (has_passed_obstacle) {
                    when (i) {
                        1 -> {
                            val forward_pos2 = square_pos(x = x, y = y + 2);
                            val forward_pos2_int = pos_to_int(forward_pos2);
                            pawn_interpret_position_post_obstacle_free(board_positions, pos_int, forward_pos2_int, pre_tree);
                        }
                        2 -> {
                            val left_forward2 = square_pos(x = x - 2, y = y + 2);
                            val left_forward2_int = pos_to_int(left_forward2);
                            pawn_interpret_position_post_obstacle_attack(board_positions, align, pos_int, left_forward2_int, pre_tree);
                        }
                        3 -> {
                            val right_forward2 = square_pos(x = x + 2, y = y + 2);
                            val right_forward2_int = pos_to_int(right_forward2);
                            pawn_interpret_position_post_obstacle_attack(board_positions, align, pos_int, right_forward2_int, pre_tree);
                        }
                        else -> require(false, "Invalid obstacle position index" + i);
                    }
                }
            }
        }
        alignment.BLACK -> {
            // Forward is SOUTH (y decreases)
            val forward_pos = square_pos(x = x, y = y - 1);
            val left_forward = square_pos(x = x - 1, y = y - 1);
            val right_forward = square_pos(x = x + 1, y = y - 1);
            
            val obstacle_positions = [forward_pos, left_forward, right_forward];
            
            var i = 0;
            for (obstacle_pos in obstacle_positions) {
                i += 1;
                val (continue_path, has_passed_obstacle) = rule_interpret_path_position_pre_obstacle(board_positions, obstacle_pos);
                
                if (has_passed_obstacle) {
                    when (i) {
                        1 -> {
                            val forward_pos2 = square_pos(x = x, y = y - 2);
                            val forward_pos2_int = pos_to_int(forward_pos2);
                            pawn_interpret_position_post_obstacle_free(board_positions, pos_int, forward_pos2_int, pre_tree);
                        }
                        2 -> {
                            val left_forward2 = square_pos(x = x - 2, y = y - 2);
                            val left_forward2_int = pos_to_int(left_forward2);
                            pawn_interpret_position_post_obstacle_attack(board_positions, align, pos_int, left_forward2_int, pre_tree);
                        }
                        3 -> {
                            val right_forward2 = square_pos(x = x + 2, y = y - 2);
                            val right_forward2_int = pos_to_int(right_forward2);
                            pawn_interpret_position_post_obstacle_attack(board_positions, align, pos_int, right_forward2_int, pre_tree);
                        }
                        else -> require(false, "Invalid obstacle position index" + i);
                    }
                }
            }
        }
        else -> require(false, "Cannot happen, since neutral alignment cannot jump over");
    }
    
    return move_tree_build(pos_int, pre_tree);
}


// Here we only accept free positions 
function pawn_interpret_position_post_obstacle_free(
    board_positions: board_positions_all,
    start_pos: integer,
    new_pos: integer,
    pre_tree: pre_tree
) {
    val ss = board_get_square_status_int(board_positions, new_pos);
    when (ss) {
        square_status.FREE -> {
            pre_tree.movable_sqs.add(new_pos);
            pre_tree.paths.add(path_jump_move_2(start_pos, new_pos));
        }
        else -> {
             // Could be foe, but we cannot attack
        } 
    }
}

function pawn_interpret_position_post_obstacle_attack(
    board_positions: board_positions_all,
    align: alignment,
    start_pos: integer,
    new_pos: integer,
    pre_tree: pre_tree
) {
    val ss = board_get_square_status_int(board_positions, new_pos);
    when (ss) {
        square_status.BLACK_PIECE -> {
            if (align == alignment.WHITE) {
                pre_tree.attackable_sqs.add(new_pos);
                pre_tree.paths.add(path_jump_attack_2(start_pos, new_pos));
            }
        }
        square_status.WHITE_PIECE -> {
            if (align == alignment.BLACK) {
                pre_tree.attackable_sqs.add(new_pos);
                pre_tree.paths.add(path_jump_attack_2(start_pos, new_pos));
            }
        }
        square_status.NEUTRAL_PIECE, square_status.OBSTACLE -> {
            // Everyone can attack neutral pieces and obstacles
            pre_tree.attackable_sqs.add(new_pos);
            pre_tree.paths.add(path_jump_attack_2(start_pos, new_pos));
        }
        else -> {} // Out of board or free, just quit
    }
}

// -----------------------------------------------
// Helper functions
// -----------------------------------------------

function pawn_add_attack(
    pos: integer,
    attack_square: integer,
    pre_tree: pre_tree
) {
    pre_tree.attackable_sqs.add(attack_square);
    val path = list<integer>();
    path.add(pos);
    path.add(attack_square);
    pre_tree.paths.add(path_base(path = path, path_type = path_type.GROUND_ATTACK));
}

function pawn_check_for_double_step_white(
    x: integer,
    y: integer,
    path: list<integer>,
    board_positions: board_positions_all,
    pre_tree: pre_tree,
    vulnerable_paths: list<path_base>
) {
    if (y == 1) {
        val double_step_pos = path[0] + 16; // Move up two ranks
        pawn_inner_double_step(double_step_pos, path, board_positions, pre_tree, vulnerable_paths);
    }
}

function pawn_check_for_double_step_black(
    x: integer,
    y: integer,
    path: list<integer>,
    board_positions: board_positions_all,
    pre_tree: pre_tree,
    vulnerable_paths: list<path_base>
) {
    if (y == 6) {
        val double_step_pos = path[0] - 16; // Move down two ranks
        pawn_inner_double_step(double_step_pos, path, board_positions, pre_tree, vulnerable_paths);
    }
}

function pawn_inner_double_step(
    double_step_pos_int: integer,
    path: list<integer>,
    board_positions: board_positions_all,
    pre_tree: pre_tree,
    vulnerable_paths: list<path_base>
) {

    val double_step = pos_from_integer(double_step_pos_int);
    if (board_is_free_at(board_positions, double_step)) {
        pre_tree.moves_harmless.add(double_step_pos_int);
        
        val new_path = list<integer>();
        new_path.add_all(path);
        new_path.add(double_step_pos_int);
        
        val path_obj = path_base(path = new_path, path_type = path_type.GROUND_MOVE);
        pre_tree.paths.add(path_obj);
        vulnerable_paths.add(path_obj);
    }
}


// ----------------------------
// Attack helper
// ----------------------------

function pawn_is_attackable_black_or_neutral(
    board_positions: board_positions_all,
    pos: square_pos,
    pre_vuln_ctxt: pre_vuln_context
): boolean {
    return pawn_is_attackable(board_positions, pos, pre_vuln_ctxt, true);
}

function pawn_is_attackable_white_or_neutral(
    board_positions: board_positions_all,
    pos: square_pos,
    pre_vuln_ctxt: pre_vuln_context
): boolean {
    return pawn_is_attackable(board_positions, pos, pre_vuln_ctxt, false);
}

// --------------------------------------------------------------------
// Returns "true" if there is an attackable piece on the given square 
// --------------------------------------------------------------------
function pawn_is_attackable(
    board_positions: board_positions_all,
    new_pos: square_pos,
    pre_vuln_ctxt: pre_vuln_context,
    check_black: boolean
): boolean {
    if (pawn_is_attackable_player_align_plus_neutral(board_positions, new_pos, check_black)) {
        return true;
    }
    else {
        val new_pos_int = pos_to_int(new_pos);
        val dest_int = pre_vuln_check_if_pos_part_of_vulnerable_path(pre_vuln_ctxt, new_pos_int);
        
        if (dest_int != null) {
            val dest = pos_from_integer(dest_int);

            // Check if enemy is still occupying the path destination
            // (they could have potentially been moved away)
            if (pawn_is_attackable_player_align_plus_neutral(board_positions, dest, check_black)) {
                log("Found a vulnerable mid square " + new_pos_int + ", with piece still at destination " + dest);

                // Add the mid square and found piece to the context
                val maybe_under_attack: with_pos_and_alignment? = board_get_at(board_positions, dest_int);
                pre_vuln_ctxt.attackable_old_vuln_square_to_piece[new_pos_int] = maybe_under_attack!!;
                return true;
            } else {
                // Investigate, doesn't have to be an error, but would indeed be an unusual event.
                log("Error?: Found a vuln mid square at " + new_pos_int + ", but cannot find the piece at dest: " + dest);
                return false;
            }
        }
        return false;
    }
}


// -----------------------------------------------------------------
// Returns "true" if we have an "attackable" piece at the "newPos".
// 
// checkBlack = if "true" we check for "Black or Neutral",
//            if it is false we check for "White or Neutral".
// -----------------------------------------------------------------
function pawn_is_attackable_player_align_plus_neutral(
    board_positions: board_positions_all,
    pos: square_pos,
    check_black: boolean
): boolean {
    if (check_black) {
        return board_is_attackable_black_or_neutral_at(board_positions, pos);
    } else {
        return board_is_attackable_white_or_neutral_at(board_positions, pos);
    }
}

