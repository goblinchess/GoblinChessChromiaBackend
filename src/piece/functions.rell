
// ------------------------------------------------------------
// General Piece Functions
// ------------------------------------------------------------
// Call this when you want to do something with a piece.



// ------------------------------------------------------------
// Get Piece
// ------------------------------------------------------------

// Get the piece occupying a given position, or null if none.
function piece_get_via_game_and_position(g: game, pos: integer): piece? {
    return (a: alive, v: vulnerable, p: piece)@? {
        a.game == g, // Only alive pieces are on the board.
        a.vulnerable == v,
        p.vulnerable == v,
        a.position == pos
    } (p);
}


// ------------------------------------------------------------
// Get data for a living piece, if exists.
// We do this vuln-piece join for performance reasons, 
// since every single field access could else generate a new SELECT.
// 
// Note: why are we bothering with the IS_OBSTACLE flag?
// Some enchantments (like STONE) turn a piece into an obstacle,
// but the PIECE entity still exists, so we cannot be certain that
// really is a piece.
// ------------------------------------------------------------
function piece_get_living_data_from_pos(g: game, given_pos: integer) :piece_living_data? {

    val res = (a: alive, pi: piece, v: vulnerable)@? {
        a.game == g, // Only alive pieces are on the board.
        a.vulnerable == v,
        v == pi.vulnerable,
        a.position == given_pos,
    } (v.color, v.is_obstacle, v.can_retaliate, v.start_hit_points, v.remaining_hit_points, v.defence, pi.is_knighted, pi.original_type, pi.active_type, 
        found_vulnerable = v, found_piece = pi, found_alive = a, found_owned_by = a.owned_by);

    if (res != null) {

        val vln = vulnerable_data(
            align = res.color, 
            position = given_pos, 
            is_obstacle = res.is_obstacle,
            can_retaliate = res.can_retaliate,
            start_hit_points = res.start_hit_points,
            remaining_hit_points = res.remaining_hit_points,
            defence = res.defence,
            v = res.found_vulnerable,
            a = res.found_alive,
            g = g,
            owned_by = res.found_owned_by
        );

        return piece_living_data(
            vuln = vln,
            is_knighted = res.is_knighted,
            original_type = res.original_type,
            active_type = res.active_type,
            p = res.found_piece
        );

    } else {
        return null;
    }
}

function piece_get_living_data_for_king(g: game, given_align: alignment): piece_living_data? {
     val res = (a: alive, pi: piece, v: vulnerable)@? {
        a.game == g, // Only alive pieces are on the board.
        a.vulnerable == v,
        v == pi.vulnerable,
        v.color == given_align,
        pi.original_type == piece_type.KING
    } (a.position, v.is_obstacle, v.can_retaliate, v.start_hit_points, v.remaining_hit_points, v.defence, pi.is_knighted, pi.original_type, pi.active_type, 
        found_vulnerable = v, found_piece = pi, found_alive = a, found_owned_by = a.owned_by);

    if (res != null) {

        val vln = vulnerable_data(
            align = given_align, 
            position = res.position, 
            is_obstacle = res.is_obstacle,
            can_retaliate = res.can_retaliate,
            start_hit_points = res.start_hit_points,
            remaining_hit_points = res.remaining_hit_points,
            defence = res.defence,
            v = res.found_vulnerable,
            a = res.found_alive,
            g = g,
            owned_by = res.found_owned_by
        );

        return piece_living_data(
            vuln = vln,
            is_knighted = res.is_knighted,
            original_type = res.original_type,
            active_type = res.active_type,
            p = res.found_piece
        );

    } else {
        return null;
    }
}

// Builds a [piece_living_data] from the given [vulnerable_data].
// Will explode if no piece is found for this object
function piece_get_piece_data_from_vuln(v: vulnerable_data): piece_living_data {
    val res = (pi: piece)@ { pi.vulnerable == v.v } 
    (pi.is_knighted, pi.original_type, pi.active_type, found_vulnerable = v, found_piece = pi);

    return piece_living_data(
            vuln = v,
            is_knighted = res.is_knighted,
            original_type = res.original_type,
            active_type = res.active_type,
            p = res.found_piece
    );
}

// Get data for all living pieces of a given color.
// We want to get as many pieces as possible in one SELECT.
function piece_get_living_data_from_align(g: game, given_align: alignment) :list<piece_living_data> {

    val ret = list<piece_living_data>();

    val results = (a: alive, pi: piece, v: vulnerable)@* {
        a.game == g, // Only alive pieces are on the board.
        a.vulnerable == v,
        v == pi.vulnerable,
        v.color == given_align
    } (a.position, v.is_obstacle, v.can_retaliate, v.start_hit_points, v.remaining_hit_points, v.defence, pi.is_knighted, 
        pi.original_type, pi.active_type, found_vulnerable = v, found_piece = pi, found_alive = a, found_owned_by = a.owned_by);

    for (res in results) {

        val vln = vulnerable_data(
            align = given_align, 
            position = res.position, 
            is_obstacle = res.is_obstacle,
            can_retaliate = res.can_retaliate,
            start_hit_points = res.start_hit_points,
            remaining_hit_points = res.remaining_hit_points,
            defence = res.defence,
            v = res.found_vulnerable,
            a = res.found_alive,
            g = g,
            owned_by = res.found_owned_by
        );

        val pld = piece_living_data(
            vuln = vln,
            is_knighted = res.is_knighted,
            original_type = res.original_type,
            active_type = res.active_type,
            p = res.found_piece
        );

        ret.add(pld);
    }

    return ret;
}

// ------------------------------------------------------------
// Mutators
// ------------------------------------------------------------

// Promote a piece (only pawn for v1.0) to queen.
// 
// We don't create the event here, so don't forget to create it!
function piece_promote(p: piece) {
    p.active_type = piece_type.QUEEN; // GoblinChess only allows promotion to queen. This is 
}

// ------------------------------------------------------------
// Constructors
// ------------------------------------------------------------

function piece_create(g: game, owner: player_game, pos: integer, align: alignment, p_type: piece_type): (p: piece, a: alive, v: vulnerable) { 
    return piece_create_full(g, owner, pos, align, p_type, p_type);
}

function piece_create_full(g: game, owner: player_game, pos: integer, align: alignment, original_type: piece_type, active_type: piece_type): (p: piece, a: alive, v: vulnerable) {

    var hp = 2;
    if (active_type == piece_type.KING) { 
        hp = 10; // Only the king has more hit points.
    }
    var can_retaliate = true;
    if (active_type == piece_type.ROOK) {
        can_retaliate = false; // Rooks cannot retaliate, for the simple reason we didn't find a good animation for that.
    }

    val v = create vulnerable (
        .game = g,
        .is_obstacle = false,
        .is_obstacle_enchanted_piece = false,
        .can_retaliate = can_retaliate,
        .color = align,
        .start_hit_points = hp,
        .remaining_hit_points = hp,
        .defence = 3 
    );

    val a = create alive ( 
        .vulnerable = v,
        .position = pos,
        .game = g,
        .owned_by = owner
    );

    val p = create piece (
        .vulnerable = v,
        .original_type = original_type,
        .active_type = active_type, // Can change during the game.
        .is_knighted = false
    );

    return (p = p, a = a, v = v);
}

// Clone a [piece_living_data] struct, but change the position
function piece_living_data_clone_new_pos(pld: piece_living_data, new_pos: integer): piece_living_data {
    return piece_living_data(
        vuln = vuln_data_clone_new_pos(pld.vuln, new_pos),
        is_knighted = pld.is_knighted,
        original_type = pld.original_type,
        active_type = pld.active_type,
        p = pld.p
    );
}

// In the beginning of the game, we create all pieces.
function piece_create_all(g: game, owner_white: player_game, owner_black: player_game) {

    piece_create(g, owner_white, 0, alignment.WHITE, piece_type.ROOK);
    piece_create(g, owner_white, 1, alignment.WHITE, piece_type.KNIGHT);
    piece_create(g, owner_white, 2, alignment.WHITE, piece_type.BISHOP);
    piece_create(g, owner_white, 3, alignment.WHITE, piece_type.QUEEN);
    piece_create(g, owner_white, 4, alignment.WHITE, piece_type.KING);
    piece_create(g, owner_white, 5, alignment.WHITE, piece_type.BISHOP);
    piece_create(g, owner_white, 6, alignment.WHITE, piece_type.KNIGHT);
    piece_create(g, owner_white, 7, alignment.WHITE, piece_type.ROOK);

    // Create 8 white pawns
    for (i in range(8, 16)) {
        piece_create(g, owner_white, i, alignment.WHITE, piece_type.PAWN);
    }

    // Create 8 black pieces
    for (i in range(48, 56)) {
        piece_create(g, owner_black, i, alignment.BLACK, piece_type.PAWN);
    }

    piece_create(g, owner_black, 56, alignment.BLACK, piece_type.ROOK);
    piece_create(g, owner_black, 57, alignment.BLACK, piece_type.KNIGHT);
    piece_create(g, owner_black, 58, alignment.BLACK, piece_type.BISHOP);
    piece_create(g, owner_black, 59, alignment.BLACK, piece_type.QUEEN);
    piece_create(g, owner_black, 60, alignment.BLACK, piece_type.KING);
    piece_create(g, owner_black, 61, alignment.BLACK, piece_type.BISHOP);
    piece_create(g, owner_black, 62, alignment.BLACK, piece_type.KNIGHT);
    piece_create(g, owner_black, 63, alignment.BLACK, piece_type.ROOK);
}







