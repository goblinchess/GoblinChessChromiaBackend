
// ------------------------------------------------------------
// General Vuln Functions
// ------------------------------------------------------------
// Call this when you want to do something with a vulnerable object.


// ------------------------------------------------------------
// Get data for a vulnerable object, if exists.
// We do this for performance reasons, 
// since every single field access could else generate a new SELECT.
// ------------------------------------------------------------
function vuln_get_data_from_pos(g: game, given_pos: integer) :vulnerable_data? {

    val res = (a: alive, v: vulnerable)@? {
        a.game == g, // Only alive pieces are on the board.
        a.vulnerable == v,
        a.position == given_pos
    } (v.color, v.is_obstacle, v.can_retaliate, v.start_hit_points, v.remaining_hit_points, v.defence, 
       found_vulnerable = v, found_alive = a, found_owned_by = a.owned_by);

    if (res != null) {

        var use_align = res.color;
        if (res.is_obstacle) {
            use_align = alignment.NEUTRAL; // Easier than trying to remember the original alignment.
        }

        return vulnerable_data(
            align = use_align, 
            position = given_pos, 
            is_obstacle = res.is_obstacle,
            can_retaliate = res.can_retaliate,
            start_hit_points = res.start_hit_points,
            remaining_hit_points = res.remaining_hit_points,
            defence = res.defence,
            v = res.found_vulnerable,
            a = res.found_alive,
            g = g,
            owned_by = res.found_owned_by
        );

    } else {
        return null;
    }
}

// Here we get the entire board in one go, all pieces and obstacles.
// We separate black from white via the alignment.
function vuln_get_all_as_wpaa(game: game): list<with_pos_and_alignment> {
    val vulns = (a: alive, v: vulnerable)@* {
        a.game == game, // Only alive pieces are on the board.
        a.vulnerable == v
    } (a.position, v.color, v.is_obstacle); // Color should really be neutral, since it's not a piece.

    // Transform into structs
    val res: list<with_pos_and_alignment> = [];
    for (v in vulns) { 
        if (v.is_obstacle) {
            // We ALLOW for obstacles to be of any color (it's simplest for STONE enchantments).
            // But we just ignore it and use NEUTRAL.
            // 
            //if (v.color != alignment.NEUTRAL) {
            //    log("Error: Obstacle has color " + v.color);
            //}
            res.add(with_pos_and_alignment(v.position, alignment.NEUTRAL));
        } else {
            // It's a piece
            res.add(with_pos_and_alignment(v.position, v.color));
        }
    }
    return res;
}

// Here we get all obstacles in one go, ignoring pieces.
// We separate black from white via the alignment.
function vuln_get_obstacles_as_wpat(game: game): list<with_pos_and_alignment_and_type> {
    val vulns = (a: alive, v: vulnerable)@* {
        a.game == game, // Only alive pieces are on the board.
        a.vulnerable == v, 
        v.is_obstacle == true
    } (a.position, v.color); // Color should really be neutral, since it's not a piece.

    // Transform into structs
    val res: list<with_pos_and_alignment_and_type> = [];
    for (v in vulns) { 
        // We ALLOW for obstacles to be of any color (it's simplest for STONE enchantments).
        // But we just ignore it and use NEUTRAL.
        // 
        //if (v.color != alignment.NEUTRAL) {
        //    log("Error: Obstacle has color " + v.color);
        //}
        res.add(with_pos_and_alignment_and_type(
            v.position, 
            alignment.NEUTRAL, 
            piece_type.IMMOBILE, 
            is_knighted = false, 
            is_obstacle = true));
    }
    return res;
}


// ------------------------------------------------------------
// Constructors
// ------------------------------------------------------------

// Clone a [vulnerable_data] struct, but change the position
function vuln_data_clone_new_pos(orig_vuln: vulnerable_data, new_pos: integer): vulnerable_data {
     return vulnerable_data(
        align = orig_vuln.align,
        position = new_pos, // Use the new position
        is_obstacle = orig_vuln.is_obstacle,
        can_retaliate = orig_vuln.can_retaliate,
        start_hit_points = orig_vuln.start_hit_points,
        remaining_hit_points = orig_vuln.remaining_hit_points,
        defence = orig_vuln.defence,
        v = orig_vuln.v,
        a = orig_vuln.a,
        g = orig_vuln.g,
        owned_by = orig_vuln.owned_by
    );
}