



// Used inside the game to pass information about a living piece
struct piece_living_data {
    // From Vulnerable
    vuln: vulnerable_data;

    // From Piece
    is_knighted: boolean;
    original_type: piece_type;
    active_type: piece_type;

    // Keys
    p: piece;
}

// Used inside the game to pass information about a vulnerable object 
// We want to get as much as possible in one SELECT (to avoid further SELECTs later).
struct vulnerable_data {
    // From Vulnerable
    align: alignment; // = Color
    position: integer; // Acutally from "alive" but we don't want a separate struct for that.

    is_obstacle: boolean;
    can_retaliate: boolean;

    start_hit_points: integer;
    remaining_hit_points: integer;
    defence: integer;

    // Keys
    v: vulnerable;
    a: alive;
    g: game;
    owned_by: player_game;
}

// External:
// Used to return information about a piece
struct piece_info {
    // From Vulnerable
    v_rowid: integer; // Usually we refer to objects via position (this is for debugging)
    is_alive: boolean;
    color_str: text;
    position: integer;
    is_obstacle: boolean;
    start_hit_points: integer;
    remaining_hit_points: integer;
    defence: integer;

    // From Piece
    p_rowid: integer; // Usually we refer pieces via position (this is for debugging)
    original_type_str: text;
    active_type_str: text;
}
