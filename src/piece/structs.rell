

// The alignment of a piece/vulnerable or a player
enum alignment {
    WHITE, // The white player
    BLACK, // The black player
    NEUTRAL, // A neutral object, like an obstacle
    NOTHING // Sometimes used to indicate an empty square
}

// Often it's not enough to know where a piece is,
// we must also know its alignment.
struct with_pos_and_alignment {
    pos: integer;
    alignment: alignment;
    // has_moved: boolean; // After the piece can no longer castle (let client handle this)
}

// What is on the square?
enum square_status {
    FREE,
    BLACK_PIECE,
    WHITE_PIECE,
    NEUTRAL_PIECE, // TODO: Version 2.0
    OBSTACLE,
    OUT_OF_BOARD // Can mean many things, but the original meaning is that the square does not exist.
}

// Used inside the game to pass information about a living piece
struct piece_living_data {
    // From Vulnerable
    vuln: vulnerable_data;

    // From Piece
    is_knighted: boolean;
    original_type: piece_type;
    active_type: piece_type;

    p: piece;
}

// Used inside the game to pass information about a vulnerable object 
struct vulnerable_data {
    // From Vulnerable
    align: alignment; // = Color
    position: integer;

    is_obstacle: boolean;
    can_retaliate: boolean;

    start_hit_points: integer;
    remaining_hit_points: integer;
    defence: integer;

    v: vulnerable;
}

// External:
// Used to return information about a piece
struct piece_info {
    // From Vulnerable
    v_rowid: integer; // Usually we refer to objects via position (this is for debugging)
    is_alive: boolean;
    color_str: text;
    position: integer;
    is_obstacle: boolean;
    start_hit_points: integer;
    remaining_hit_points: integer;
    defence: integer;

    // From Piece
    p_rowid: integer; // Usually we refer pieces via position (this is for debugging)
    original_type_str: text;
    active_type_str: text;
}
