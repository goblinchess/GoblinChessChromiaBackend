
// ------------------------------------------------------------
// General Alive Functions
// ------------------------------------------------------------
// Call this when you only care if the object is alive and about
// its position. 


// Get the alive object occupying a given position, or null if none.
function alive_get_via_game_and_position(g: game, pos: integer): alive? {
    return (a: alive)@? {
        a.game == g, 
        a.position == pos
    } (a);
}

// Try to find the alive object via the vulnerable object.
// If you cannot find it, then we assume that object has 
// died or got into limbo.
function alive_get_via_vuln(v: vulnerable): alive? {
    return (a: alive)@? {
        a.vulnerable == v
    } (a);
}

// ------------------------------------------------------------
// Mutators
// ------------------------------------------------------------

// Remove an object from the alive collection, put it in limbo.
function alive_move_to_limbo(obj: vulnerable_data) {
    // 1. Put in LIMBO
    create limbo (
        .vulnerable = obj.v,
        .game = obj.g,
        .owned_by = obj.owned_by
    );

    // 2. Remove from ALIVE
    delete obj.a;
}

function alive_move_to_dead(obj: vulnerable_data) {
    // 1. Add to the DEAD collection
    create dead (
        .game = obj.g,
        .owned_by = obj.owned_by,
        .vulnerable = obj.v
    );

    // 2. Remove from the ALIVE collection
    delete obj.a; 
}

// Remove an object from the limbo collection, put it in alive.
function alive_move_from_limbo(
    g: game, // Send it to avoid getting it from the vuln.
    owned_by: player_game,  // Who should be the owner of the new alive object?
    v_in_limbo: vulnerable, // The limbo vuln
    pos: integer // Must be sent, since limbo does not have a position (and the vuln probably moved since the enchanment)
) {
    // 1. Select from LIMBO
    val limbo_piece: limbo = (l: limbo)@ {l.vulnerable == v_in_limbo} (l);

    // 2. Put in ALIVE
    create alive (
        .vulnerable = limbo_piece.vulnerable,
        .position = pos, 
        .game = g,
        .owned_by = owned_by
    );

    // 3. Remove from LIMBO
    delete limbo_piece;
}

// Raise a dead piece from the dead collection, put it in alive.
function alive_move_from_dead(
    game_id: integer,
    v_data_in_dead: vulnerable_data, // The dead vuln
    new_owner: player_game,  // Who should be the owner of the new alive object?
    new_pos: integer, // The dead doesn't have to "rise" from the place it was killed.
    new_align: alignment // The color of the new alive object.
) {
    val g: game = v_data_in_dead.g;

    log("game_id: "+game_id+" - resurrecting old color: " + v_data_in_dead.align + " to new pos: " + new_pos + ", with new color " + new_align);

    // 1. Select from DEAD
    val dead_piece: dead = (d: dead)@ {d.vulnerable == v_data_in_dead.v} (d);

    // 2. Put in ALIVE
    create alive (
        .vulnerable = dead_piece.vulnerable,
        .position = new_pos, 
        .game = g,
        .owned_by = new_owner
    );

    // 3. Remove from DEAD
    delete dead_piece;

    // Now, the alive status has been updated, it's time to update the vulnerable entity.
    val resurrected_vuln = v_data_in_dead.v; // <-- Re-using the same vulnerable entity.

    // 4. Fix health
    resurrected_vuln.remaining_hit_points = v_data_in_dead.start_hit_points;

    // 5. Fix color
    resurrected_vuln.color = new_align;
}


// CARD: SWITCH_PLACE
function alive_switch_place(align: alignment, piece1: alive, piece2: alive) {
    // Validation
    require(piece1.position != piece2.position, "Cannot switch place with itself");

    val pos1 = piece1.position;
    val pos2 = piece2.position;

    require(piece1.vulnerable.color == align, "Piece1 at " + pos1 + " is not owned by the player");
    require(piece2.vulnerable.color == align, "Piece2 at " + pos2 + " is not owned by the player");


    update piece1 (.position = 1000); // Ugly, but must do this to avoid unique constraint.
    update piece2 (.position = pos1);
    update piece1 (.position = pos2);
}

// ------------------------------------------------------------
// Constructors
// ------------------------------------------------------------

function alive_obstacle_create(game: game, owner: player_game, pos: integer): vulnerable {
    val v = create vulnerable (
        .game = game,
        .is_obstacle = true,
        .can_retaliate = false,
        .color = alignment.NEUTRAL,
        .start_hit_points = 10,
        .remaining_hit_points = 10,
        .defence = 3 // Default 
    );


    // Not exactly "alive" but at the board.
    val a = create alive ( 
        .vulnerable = v,
        .position = pos,
        .game = game,
        .owned_by = owner
    );

    return v;
}

// CARD: WALL
function alive_setup_wall(game:game, owner: player_game, pos1: integer, pos2: integer, pos3: integer) {
    alive_obstacle_create(game, owner, pos1);
    alive_obstacle_create(game, owner, pos2);
    alive_obstacle_create(game, owner, pos3);
}


// Death event
function alive_create_death_event(
    g: game,
    t: turn,
    am: attack_move,
    v: vulnerable
) {

    // New event
    val new_event = turn_create_event(g, t, event_type.DEATH_EVENT);

    create death_event (
        .event = new_event,
        .attack_move = am,
        .vulnerable = v,
    );
}
