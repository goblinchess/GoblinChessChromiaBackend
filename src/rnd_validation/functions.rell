



// -------------------------------------
// Rnd Result
// -------------------------------------

// Save the rnd_results for a turn.
function rnd_validation_create_player_rnd_nr(
    t: turn,
    rnd_results: list<rnd_result>,
) {

    var idx: integer = 0;
    for (rnd_result in rnd_results) {
        create rnd_nr_from_player(
            turn = t, 
            idx = idx, 
            result = rnd_result.result, 
            type = rnd_result.type, 
            min = rnd_result.min, 
            max = rnd_result.max
        );
        idx++;
    }
}


// ------------------------------------------------------------------
// 1. Validate 
// 1.a) Validate the seed, and 
// 1.b) find all random numbers that the player used during the game and validate them.
//
// 2. Update blockchain depending on status
// If something is wrong we return an error message and save the error!
//
// We do this after the game, b/c in the end of the game the client will send us 
// the seed (s)he used (before that we don't have the seed).
// ------------------------------------------------------------------
function rnd_validation_of_player(
    game_id: integer,
    g_type: game_type,
    g: game,
    pg: player_game,
    seed_input: seed_validation_input
): text? {
    var success = false;
    var err_msg = "";
    var err_type = error_type.SEED_SIGNATURE_ERROR;
    var rnd_nr: rnd_nr_from_player? = null;

    log("game_id: "+game_id+" - Begin.");
    // ----------------------------
    // 1. Validate 
    // ----------------------------

    val (s_err, s_err_type) = seed_validation_validate(game_id, seed_input);
    if (s_err == null) {
        // Success
        log("game_id: "+game_id+" - Seed correctly built, check random numbers");
        val (r_err, rnd_nr_tmp, r_err_type) = rnd_validation_of_player_inner(game_id, g_type, g, pg, seed_input.org_seed);
        if (r_err == null) {
            // Success 
            log("game_id: "+game_id+" - Random numbers all correct");
            success = true;
        } else {
            err_msg = r_err;
            rnd_nr = rnd_nr_tmp;
            err_type = r_err_type!!;
        }
    } else {
        // Failure
        err_msg = s_err;
        err_type = s_err_type!!;
    }

    // ----------------------------
    // 2. Update depending on status
    // ----------------------------

    if (success) {
        update g (.valid_seeds_count = g.valid_seeds_count + 1);

        create player_game_seed (
            .game = g, 
            .player_game = pg, 
            .seed = seed_input.org_seed, 
            .validation_success = true,
            .created_at = op_context.last_block_time);

        return null;

    } else {
        log("game_id: "+game_id+" - "+err_msg);

        // Save the error
        game_error_create(g, pg, err_msg, err_type);

        update g (.invalid_seeds_count = g.invalid_seeds_count + 1);

        // Save the seed
        val new_pg_seed = create player_game_seed (
            .game = g, 
            .player_game = pg, 
            .seed = seed_input.org_seed, 
            .validation_success = false,
            .created_at = op_context.last_block_time);

        if (rnd_nr != null) {
            // Save the connection between the seed and the rnd_nr
            create rnd_validation_err(
                player_game_seed = new_pg_seed,
                rnd_nr_from_player = rnd_nr
            );
        }
        return err_msg;
    }
}

// ------------------------------------------------------------------
// If successful only null is returned. 
// If failed, and error text is returned and
// sometimes the entity of the failing [rnd_nr_from_player].
// ------------------------------------------------------------------
function rnd_validation_of_player_inner(
    game_id: integer,
    g_type: game_type,
    g: game,
    pg: player_game,
    org_seed: integer // Client's seed, unique for each game/player
): (text?, rnd_nr_from_player?, error_type?)
{
    var curr_seed = org_seed;

    // --------------------------
    // 1. Verify the 5 cards
    // --------------------------
    // We know that the first random numbers generated for each player 
    // is the 5 cards. But a game can end before the player played all cards, 
    // so we only need to verify the cards played.

    var five_generated_cards: random_results = rnd_validation_card_generation_inner(g_type, curr_seed);

    curr_seed = five_generated_cards.new_seed;

    val card_map = map<integer, card_type>();
    for (idx in range(0, 5)) {
        val rnd_val = five_generated_cards.results[idx];
        val card_type = card_get_type_from_index(rnd_val);
        log("game_id: "+game_id+" - Rnd: "+ rnd_val + ", card type: " + card_type);
        card_map[idx] = card_type;
    }

    val cards = card_get_all_played(pg);
    for(card_hist in cards) {
        val calculated_type = card_map[card_hist.draw_order_nr];
        if (calculated_type != card_hist.card_type) {
            val err_msg = "game_id: "+game_id+" - The nr " + card_hist.draw_order_nr + 
                " drawn should have been a " + calculated_type + " but client played type: " + card_hist.card_type;

            return (err_msg, null, error_type.RND_VALIDATION_CARD_ERROR);
        }
    }

    log("game_id: "+game_id+" - Cards validated");

    // --------------------------
    // 2. Find all saved rnd numbers for the player
    // --------------------------
    val res_list = (rot: player_rotation, t: turn, r: rnd_nr_from_player) @* {
        rot.created_by == pg,
        t.player_rotation == rot,
        r.turn == t
    } (r.idx, r.result, r.type, r.min, r.max, playa_rnd_nr = r, turn = t, turn_nr = t.number, rotation = rot); 

    // --------------------------
    // 3. Validate the rnd_results
    // --------------------------
    var idx: integer = 0;
    for(res in res_list) {
        val r = random_generate_number(curr_seed, res.min, res.max);
        curr_seed = r.curr_seed;
        if(r.result != res.result) {
            // This could be either a hacker or a bug.
            // If it's a bug, it will be pretty hard to find unless we have a detailed error message.
            val err_msg = "Invalid random number at turn " + res.turn_nr +" (index "+ idx + "), our number: "+ r.result +", client number: " + res.result + 
                " (min: " + res.min + ", max: " + res.max + "), type: " + res.type + " for game: " + game_id;

            return (err_msg, res.playa_rnd_nr, error_type.RND_VALIDATION_TURN_ERROR); // No need to go on, one error is enough!
        }

        idx++;
    }

    // Success
    log("game_id: "+game_id+" - Everything successfully validated");
    return (null, null, null); // No errors
}

// --------------------------------------------------------------
// Returns the 5 cards that should be generated based on the 
// given seed. 
// --------------------------------------------------------------
function rnd_validation_card_generation_inner(g_type: game_type, curr_seed: integer): random_results {
    if (game_is_classic(g_type)) { 
        return generate_random_numbers(curr_seed, 5, 8); // We cannot use POTION here
    } else {
        return generate_random_numbers(curr_seed, 5, 9); // All 10 cards are allowed
    }
}

// --------------------------------------------------------------
// Returns a random position in the given list holding positions.
// 
// Also: 
// 1. Put the random number in the given [rnd_result] list. 
// 2. Remove the picked position from the list.
// --------------------------------------------------------------
/*
function random_from_position_list(
    pos_list: list<integer>, 
    org_seed: integer,
    rnd_results: list<rnd_result>
): (pos:integer, curr_seed:integer) {

    // Use random
    val to_number = pos_list.size() - 1;
    val (result, curr_seed) = random_generate_number(0, to_number, org_seed);
    val idx = result;

    // Find the position 
    val pos_rand = pos_list[idx];
    // Remove it from the list
    pos_list.remove(idx);
    // Add the [rnd_result]
    rnd_results.add(rnd_result(result = result, min = 0, max = to_number));    

    return (pos = pos_rand, curr_seed = curr_seed);
}
*/