

// ------------------------------------------------------------------
// Skip the "primary" (=main) move
// Can only happen in combination with certain spells.
// 
// Note:
// We must make a check/stale/mate calculation here, since 
// we don't know what the spell has done with the board, 
// perhaps a SWITCH spell has caused checkmate?
// ------------------------------------------------------------------
operation skip_primary_move(
    game_id: integer,
    last_seen_turn: integer, // What turn the client last saw.

    // Only if the client wants
    check_args: move_check_arguments? = null,  // Client never HAS to send this, see the type for full discussion

    // Events that might happen after a move.
    // NOTE: Sometimes end-of-turn events happen even if turn is skipped. 
    // Example: If PORTAL card was played, we will skip the move, but the piece will still use the (new) portal.
    end_args: move_end_events_arguments? = null // Client must send this if any "end events" happened.
) {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_primary_skip_inner(
        caller_pubkey,
        game_id,
        last_seen_turn,
        check_args,
        end_args
    );
}


// ------------------------------------------------------------------
// Skip the "neutral" (=extra) move.
// We usually skip neutral move in but we don't skip it for for double move.
// For double move this operation should NOT be called, instead make 
// another normal move.
//
// When we skip the neutral move absolutely nothing is happening on the board,
// so we don't have to make any check/stale/mate calculations.
//
// Note:
// In GoblinChess the turns progress like this:
// 1. White Card -> 2. White Move -> 3. Neutral Move -> 
// 4. Black Card -> 5. Black Move -> 6. Neutral Move -> (and so on)
// The "neutral" move isn't only for handling potential double moves, but
// the idea is that in v2.0 the "neutral color" can move during this turn.
// ------------------------------------------------------------------
operation skip_neutral_move(
    game_id: integer,
    last_seen_turn: integer // What turn the client last saw.
) {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_neutral_skip_inner(
        caller_pubkey,
        game_id,
        last_seen_turn
    );
}

// ------------------------------------------------------------------
// Move a piece to a empty square.
//
// Note that this might be the second move of a double move, and 
// if this is the case the node will verify that a DOUBLE MOVE spell was cast.
// ------------------------------------------------------------------
operation move_peaceful(
    game_id: integer,
    last_seen_turn: integer, // What turn the client last saw.
    is_double_move: boolean, // If the piece is doing a double move, and this is the second move of the rotation.

    m_args: move_arguments,

    // Treat castle as special case
    castle_rook_from: integer?, // If this is a castle, the rook's starting position.
    castle_rook_to: integer?, // If this is a castle, the rook's ending position.

    // Only if the client wants
    check_args: move_check_arguments? = null,  // Client never HAS to send this, see the type for full discussion

    // Events that might happen after a move.
    end_args: move_end_events_arguments? = null // Client must send this if any "end events" happened.
) {

    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_peaceful_inner(
        caller_pubkey, 
        game_id,
        last_seen_turn,
        is_double_move,
        m_args,
        castle_rook_from,
        castle_rook_to,
        check_args,
        end_args
    );
}

// ------------------------------------------------------------------
// A move where we capture an enemy piece 
// (or at least attempt to capture, in the case of chaos mode).
// "attacks" will need more data than "peaceful" moves.
//
// Note that this might be the second move of a double move, and 
// if this is the case the node will verify that a DOUBLE MOVE spell was cast.
// ------------------------------------------------------------------
operation move_attack(
    game_id: integer,
    last_seen_turn: integer, // What turn the client last saw.
    is_double_move: boolean, // If the piece is doing a double move, and this is the second move of the rotation.

    m_args: move_arguments,

    // Mandatory arguments
    att_args: move_attack_arguments,

    // ------------------------------------------------------------------
    // Random 
    // If any randomness was used while attacking, the numbers generated goes in here.
    // The list can have different length:
    // ------------------------------------------------------------------
    // Example                                     | Number of elements
    // ------------------------------------------------------------------
    // 1. classical mode normal                    = 0
    // 2. classical mode resurrection              = 1
    // 3. chaos mode attack normal hit/kill        = 2
    // 4. chaos mode attack kill + resurrection    = 3
    // 5. chaos mode attack miss                   = Either 2 or 3
    // 6. chaos mode attack hit + retaliation      = 4
    // ------------------------------------------------------------------
    rnd_numbers: list<rnd_data>,  

    // Only if the client wants
    check_args: move_check_arguments? = null,  // Client never HAS to send this, see the type for full discussion

    // Events that might happen after a move.
    end_args: move_end_events_arguments? = null, // Client must send this if any "end events" happened.

    // ----------------------
    // Needed for chaos mode
    // ----------------------

    // Chaos mode arguments
    chaos_args: move_chaos_mode_arguments? = null,

    // Only used if there is retaliation.
    ret_args: move_retaliation_arguments? = null
) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    // We do it this way so we can test failure cases.
    move_attack_inner(
        caller_pubkey, 
        game_id,
        last_seen_turn,
        is_double_move,
        m_args,
        att_args,
        rnd_numbers,
        check_args,
        end_args,
        chaos_args,
        ret_args
    );

}

