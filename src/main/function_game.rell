
// -------------------------------------
// Game
// -------------------------------------

// ----------
// Create Game
// ----------

// Handles the creation of a game
function game_create_via_lobby_inner(opponent_player: player, game_type_str_raw: text): game {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];
    
    // Get this player entity
    val caller_player = player@{.signer == caller_pubkey};

    val game_type_str = game_type_str_raw.upper_case();
    val g_type = game_type.value(game_type_str);
    val existing_lobby = lobby@? {.player == opponent_player, .game_type == g_type};
    require(existing_lobby != null, "Opponent is not in the lobby");
    
    // Just before creating the game, we terminate any running games 
    val (maximal_game, opp_timeout_data) = maximal_game_and_timeout_data_get(caller_player.signer);
    if (maximal_game != null) {
        // We have an ongoing game, so we must try to terminate it.
        val can_go_on = game_timeout_any_player_if_possible(maximal_game, opp_timeout_data!!);
        require(can_go_on, "Cannot create game, since you are in an existing game that has not been timed out yet.");
    }

    val new_game = game_create_random_black_white(caller_player, opponent_player, game_type_str);

    // Remove opponent's lobby
    delete lobby@* {.player == opponent_player};
    // Remove caller's lobby
    delete lobby@* {.player == caller_player};

    return new_game;
}

function game_create_random_black_white(caller_player: player, opponent_player: player, game_type_str: text): game {
    // Determine who plays white based on timestamp
    val timestamp_is_even = (op_context.last_block_time / 1000) % 2 == 0;
    
    // If timestamp is even, opponent plays white. If odd, caller plays white
    val (white_player, black_player) = if (timestamp_is_even) 
        (opponent_player, caller_player)
     else 
        (caller_player, opponent_player);
    
    return game_create_inner(white_player, black_player, game_type_str);
}

// We create the GAME and 
// one HAND for each player
function game_create_inner(white_player: player, black_player: player, game_type_str_raw: text): game {

    val game_type_str = game_type_str_raw.upper_case();
    val g_type: game_type = game_type.value(game_type_str);
    
    val new_game =create game(
        .white_player = white_player,
        .black_player = black_player,
        .game_type = g_type,
        .current_turn = 0, // Starting at 0 means first (actual) turn will be 1.
        .is_finished = false, 
        .is_draw = false,
        .created_at = op_context.last_block_time,
        .last_color_rotation_at = op_context.last_block_time
    );

    val start_time_remaining = game_type_to_time_left(g_type);

    // Create white player_game
    val white_player_game = create player_game(
        .player = white_player,
        .game = new_game,
        .is_white = true,
        .in_check = false,
        .cards_left = 5,
        .total_time_left = start_time_remaining,
        .last_heartbeat = op_context.last_block_time
    );

    // Create black player_game
    val black_player_game = create player_game(
        .player = black_player,
        .game = new_game,
        .is_white = false,
        .in_check = false,
        .cards_left = 5,
        .total_time_left = start_time_remaining,
        .last_heartbeat = op_context.last_block_time
    );

    // The turn before anything has happened
    turn_create_first(
        new_game, 
        white_player_game // We don't know who created the game here, but doesn't matter.
        );

    // Create 16 pieces for each player
    piece_create_all(new_game, white_player_game, black_player_game);

    return new_game;
}



