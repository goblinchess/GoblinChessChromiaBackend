// -------------------------------------
// Player
// -------------------------------------

// Create a new player with the given name and signer
operation create_player(name_raw: text) {

    val name = name_raw.trim(); // We will allow various cases to mean different names. Not sure if it's the best?
    // Check if name is valid
    require(name.size() > 0, "Player name cannot be empty");
    require(name.size() <= 30, "Player name too long (max 30 characters)");

    val existing_name = player@? {.name == name};
    require(existing_name == null, "Player name already exists");

    val current_signers = op_context.get_signers();
    val signer = current_signers[0];
    val existing_signer = player@? {.signer == signer};
    require (existing_signer == null, "Player public key already exists");


    // Create new player with default values
    create player(
        .signer = signer,
        .name = name,
        .games_played = 0,
        .games_won = 0,
        .games_lost = 0,
        .games_drawn = 0,
        .elo_rating = 1200, // Standard starting ELO rating
        .last_player_online = op_context.last_block_time
    );
} 


// We'll signal that this player has logged into the game and can be challenged
operation bump_player_online() {
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    
    // Player must exist, or else this will explode
    update player@ {.signer == caller_pubkey} (.last_player_online = op_context.last_block_time);
}
