

// -------------------------------------
// Still Thinking
//
// If the player hasn't taken any action for 60 seconds, 
// the player should send this operation to show the node that the player is still alive.
// If not the opponent can timeout the game.
// -------------------------------------
operation still_thinking() {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];

    val minimal_game: minimal_game_result? = minimal_game_data_get(current_signer);

    require(minimal_game != null, "No game found");

    game_timeout_set_player_alive(minimal_game.player_game);

}


// -------------------------------------
// Claim Timeout
// 
// If the player suspects that the opponent has timed out, 
// (s)he can call this operation.
//
// It will crash with error if the opponent has NOT timed out.
// -------------------------------------

operation claim_timeout(game_rowid: integer) {
    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];
    
    // Get the caller's player entity
    val caller_player = player@{.signer == caller_pubkey};

    // Get the player's current game
    //val estimated_time_left_ms = 0; // This way we force a real timeout calculation.
    val (maximal_game: maximal_game_result?, game_time: game_time_result?, opp_timeout_data: opponent_timeout_data?) =
        maximal_game_and_timeout_data_get(caller_pubkey);

    if (maximal_game == null) {
        // There is a chance that the opponent has ended the game already
        // Let's look again using the game_rowid.
        val res = game @? {.rowid == rowid(game_rowid)} (ended = .is_finished, end_reason = .finish_reason);
        require(res != null, "Game does not exist? game_id: " + game_rowid); // Error

        if (res.ended) {
            // Since we know that the game isn't ongoing, this is the message we expect to return to the client. 
            require(false, "The game has ended already as: " + res.end_reason.name + ", did the opponent end game " + game_rowid + "?");
        } else {
            // Error, should never happen
            require(false, "Internal error: didn't expect to find this game ongoing (already checked for that)?");
        }
    } else {
        // Another sanity check
        val game_id = maximal_game.game_id;
        require(game_id == game_rowid, "The game you sent " + game_rowid + " isn't the one one we found " + game_id + ".");

        // Timeout check
        val curr_time_ms: timestamp = op_context.last_block_time;
        val has_timed_out = game_timeout_calc_core(game_id, curr_time_ms, opp_timeout_data!!);
        require(has_timed_out, "The opponent has not timed out yet. Please don't waste our resources like this!");

        game_stats_set_me_as_winner(maximal_game, game_end_type.TIMEOUT);
    }
}