
// -------------------------------------
// Game Creation
// -------------------------------------

// --------
// Via lobby
// --------

// Usually players find each other in the lobby
// Here we send the opponent player name and the game type
operation create_game_via_lobby_by_name(opp_player_name: text, game_type_str: text) {
    val opponent_player = player@{.name == opp_player_name};
    val new_game: game = game_create_via_lobby_inner(opponent_player, game_type_str);
    log("create_game_via_lobby_by_name() - finished, game: " + new_game.rowid.to_integer() + " type: " + game_type_str + " opp player: " + opp_player_name);
}

// Here we send the opponent player pubkey and the game type
operation create_game_via_lobby(opp_player: pubkey, game_type_str: text) {
    val opponent_player = player@{.signer == opp_player};
    val new_game: game = game_create_via_lobby_inner(opponent_player, game_type_str);
    log("create_game_via_lobby() - finished, game: " + new_game.rowid.to_integer() + " type: " + game_type_str);
}

// --------
// Direct
// --------

// Create a new game between two players
// Could be a challange
operation create_game(white_player_name: text, black_player_name: text, game_type_str: text) {
    require(white_player_name != black_player_name, "Players must be different");
    
    val white_player = player@{white_player_name};
    val black_player = player@{black_player_name};

    val new_game: game = game_create_inner(white_player, black_player, game_type_str);
    log("create_game() - finished, game: " + new_game.rowid.to_integer() + " type: " + game_type_str);
}


// -------------------------------------
// Game Resignation
// -------------------------------------

// Note:
// To resign the game is only the first step of ending the game.
// To really claim the win the opponent must send his/her seed.
// Only if the seed is valid the opponent's rating is increased.
// If the opponent fails to send the seed you still win this game!
// 
// Motivation:
// If a hacker plays with hacked cards, causing this resignation (s)he
// will still lose rating when it's time to provide the seed.

operation resign_game(game_rowid: integer) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    game_over_resign(caller_pubkey, game_rowid);
}
