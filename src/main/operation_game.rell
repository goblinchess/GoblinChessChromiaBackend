
// -------------------------------------
// Game Creation
// -------------------------------------

// --------
// Via lobby
// --------

// Usually players find each other in the lobby
// Here we send the opponent player name and the game type
operation create_game_via_lobby_by_name(opp_player_name: text, game_type_str: text) {
    val opponent_player = player@{.name == opp_player_name};
    val new_game: game = game_create_via_lobby_inner(opponent_player, game_type_str);
    log("- game created, game_id: " + new_game.rowid.to_integer() + " type: " + game_type_str + " opp player: " + opp_player_name);
}

// Here we send the opponent player pubkey and the game type
operation create_game_via_lobby(opp_player: pubkey, game_type_str: text) {
    val opponent_player = player@{.signer == opp_player};
    val new_game: game = game_create_via_lobby_inner(opponent_player, game_type_str);
    log("- game created, game_id: " + new_game.rowid.to_integer() + " type: " + game_type_str);
}

// --------
// Direct
// --------

// Create a new game between two players
// Could be a challange
operation create_game(white_player_name: text, black_player_name: text, game_type_str: text) {
    require(white_player_name != black_player_name, "Players must be different");
    
    val white_player = player@{white_player_name};
    val black_player = player@{black_player_name};

    val new_game: game = game_create_inner(white_player, black_player, game_type_str);
    log("- game created, game_id: " + new_game.rowid.to_integer() + " type: " + game_type_str);
}

// -------------------------------------
// Game Resignation
//
// If you resign and the opponent fails to send the seed you still 
// win this game!
// 
// Motivation:
// If a hacker plays with hacked cards, causing this resignation (s)he
// will still lose rating when it's time to provide the seed.
// -------------------------------------

operation resign_game(game_rowid: integer, random_seed: integer, seed_signature: byte_array) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    game_over_resign(caller_pubkey, game_rowid, random_seed, seed_signature);
}

// -------------------------------------
// Game Resignation and reporting error
//
// This happens when the client runs into an error and cannot go on. 
// Obviously the client could just die and let the game time out,
// but we want errors to be reported to the chain, so that 
// any common problem is known to the developers of this game.
// -------------------------------------

operation resign_game_error(game_rowid: integer, random_seed: integer, seed_signature: byte_array, error_message: text) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    game_over_resign_with_error(caller_pubkey, game_rowid, random_seed, seed_signature, error_message);
}

// -------------------------------------
// Terminate the game
//
// "Terminate" is the word we use when the second player sends the seed.
// The first player "claimed" game over, and put the game in state "finished".
// The second player discovers that the game has finished and will call this
// method. The game has to be "finished" at this point or we have some sort of bug.
//
// After "termination" nothing more can be done, it will be too late to claim
// timeout etc.
//
// But here we also accept that the game is over without a "claim"!
// Explanation: a game can be finished without any of the player knows about this 
// (via MOVE_REPETITION, MOVES_50, or even MATE depending on the client).
// That means that when the players discover the game ended they BOTH will
// try to terminate it, so we must allow the first "termination" to become a regular "claim".
// -------------------------------------
operation terminate_game_with_seed(game_rowid: integer, random_seed: integer, seed_signature: byte_array) {
    // -----------    
    // Get the caller from the signature.
    // -----------    
    val current_signers = op_context.get_signers();
    val caller_pubkey = current_signers[0];

    game_terminate_maybe_with_seed(caller_pubkey, game_rowid, random_seed, seed_signature);
}
