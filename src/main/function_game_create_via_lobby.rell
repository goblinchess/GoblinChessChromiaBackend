
// -------------------------------------
// Game
// -------------------------------------

// ----------
// Create Game
// ----------

// Handles the creation of a game
function game_create_via_lobby_inner(caller_pubkey: pubkey, opponent_player: player, game_type_str_raw: text): game {
    
    // --------------------------
    // 1. Get this player entity
    // --------------------------
    val caller_player = player@{.signer == caller_pubkey};

    val game_type_str = game_type_str_raw.upper_case();
    val g_type = game_type.value(game_type_str);
    val existing_lobby = lobby@? {.player == opponent_player, .game_type == g_type};
    require(existing_lobby != null, "Opponent is not in the lobby");
    
    // --------------------------
    // 2. Max one ongoing game
    // --------------------------
    // Just before creating the game, we terminate any running games 
    val (maximal_game, game_time, opp_timeout_data) = maximal_game_and_timeout_data_get(caller_player.signer);
    if (maximal_game != null) {
        // We have an ongoing game, so we must try to terminate it.
        val can_go_on = game_timeout_any_player_if_possible(maximal_game, game_time!!, opp_timeout_data!!);
        require(can_go_on, "Cannot create game, since you are in an existing game that has not been timed out yet.");
    }

    // --------------------------
    // 3. Create the game
    // --------------------------
    val new_game = game_create_random_black_white(caller_player, opponent_player, g_type);

    // --------------------------
    // 4. Cleanup
    // --------------------------
    // 4.a) Remove opponent's lobby
    delete lobby@* {.player == opponent_player};
    // 4.b) Remove caller's lobby
    delete lobby@* {.player == caller_player};

    // 4.c)
    // Auto-refuse any other potential challenge this player might have received
    // (The player, while waiting in the lobby, might gotten challenged but didn't bother to click neithre accept/refuse)
    update challenge@* {.challenged_player == caller_player} (.is_open = false, .is_refused = true);

    return new_game;
}





