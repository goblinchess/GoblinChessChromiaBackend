


// ------------------------------------------------------------
// Returns a list with all [player_rotation_compressed] of the given game.
// 
// Performance: 
// Fetching an entire game can be slow! To make this performant we 
// fetch all moves, all cards etc for the game in one big select.
// This way we can keep the number of selects low.
// ------------------------------------------------------------
function player_rotation_compressed_get_all(game_id: integer, gme: game, g_max_rotations: integer): list<player_rotation_compressed> {
    // Fetch all cards
    val turn_card_map: map<integer, card_played_data> = card_played_data_get_all(game_id, gme);
  
    // Fetch all moves 
    val turn_move_map: map<integer, move_compressed> = move_base_compressed_find_all_moves(game_id, gme);

    // Fetch all skipped moves
    val turn_skipped_map: map<integer, skipped_move_compressed> = move_base_compressed_find_all_skipped_moves(game_id, gme);

    val rot_desc_mega_str = gme.player_rotation_descriptions;
    val rot_desc_map: map<integer, text> = util_text_split_to_map(rot_desc_mega_str);


    val ret_list = list<player_rotation_compressed>();
    // Loop all rotations 
    // Note that the first rotation is 0, but it holds nothing.
    // so we could skip it.
    var curr_turn_nr = 1;
    for (rot_nr_off in range(0, g_max_rotations)) {
        val curr_rot_nr = rot_nr_off + 1; // We don't care about 0, but we do care about the last.

        var rot_desc = ""; // It is ok for this to be empty. It's a nice to have.
        if (rot_desc_map.contains(curr_rot_nr)) {
            rot_desc = rot_desc_map[curr_rot_nr];
        }

        // 1. The card is played at the first turn of the rotation.
        val found_card: card_played_data? = turn_card_map.get_or_null(curr_turn_nr);
        curr_turn_nr += 1;

        // 2. The standard move is played next (only normal OR skipped will be found, not both.)
        val found_move: move_compressed? = turn_move_map.get_or_null(curr_turn_nr);
        val found_skipped: skipped_move_compressed? = turn_skipped_map.get_or_null(curr_turn_nr);
        curr_turn_nr += 1;

        // 3. The extra move is played the following turn (usually empty)
        val found_extra_move: move_compressed? = turn_move_map.get_or_null(curr_turn_nr);
        curr_turn_nr += 1;


        val old_rot_data = player_rotation_compressed(
            rotation_nr = curr_rot_nr,
            is_white = curr_rot_nr % 2 == 1,
            rotation_description = rot_desc,
            card_played_data = found_card,
            move = found_move,
            skipped_move = found_skipped,
            extra_move = found_extra_move
        );

        ret_list.add(old_rot_data);

    }

    return ret_list;
}