



// -------------------------------------
// Lobby 
// -------------------------------------

query consume_lobby_entry(
    player_signer: pubkey,  // The player's own pubkey
    curr_ms: timestamp,
    game_type_str: text
) :pubkey? {
    return lobby_get_entry_inner(player_signer, game_type_str, curr_ms);
}


// -------------------------------------
// Challenge 
// -------------------------------------

// Returns one or zero challenger
// (ff we find many, we'll just return one of them).
// If the player refuses this one, well be able to fetch others later.
query find_challenge(
    player_signer: pubkey,  // The player's own pubkey
    curr_ms: timestamp
) :challenge_data? {
    return challenge_find_inner(player_signer, curr_ms);
}

// -------------------------------------
// Debug queries
// -------------------------------------
query get_players() {
    return player@* {};
}

query get_player_names() {
    return player@* {} (.name);
}

query get_player_by_name(search_name: text) {
    val search_name_clean = search_name.trim();
    return player@? {.name == search_name_clean} (.signer);
}

query get_mini_player_by_name(search_name: text): mini_player_data? {
    val search_name_clean = search_name.trim();
    val res = player@? {.name == search_name_clean} (.signer, .name, .elo_rating);

    if (res != null) {
        return mini_player_data(
            signer = res.signer,
            name = res.name,
            elo_rating = res.elo_rating
        );
    } else {
        return null;
    }

}









