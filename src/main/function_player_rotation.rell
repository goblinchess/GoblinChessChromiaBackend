
// -------------------------------------
// Some definitions:
// - A "player rotation" is everything that happens during black's or white's "turn".
// - A player rotation has 3 "turns", which is the smallest unity of time in the game.
//   When a player "does something", it will generate a new "turn".
// -------------------------------------

// -------------------------------------
// Returns the "max turn nr" of this rotation, if we pass validation.
//
// Example 1:
// Current Rotation = 1: this has happened:
// - Turn 1: White plays a card
// - Turn 2: White moves
// Fetched rotation = 1.
// Black's last seen turn is 2.
// The "max turn" (of rotation 1) is 3.
//
// Is "last seen turn" allowed for the "fetched rotation"?
// Verification: 1 + (last seen turn / 3) = 1 + 2/3 = 1 + 0 = 1 (Same as fetched rotation.)
//
// Note: had black client sent last seen turn = 3 (s)he made an error,
// since the client should have realized there is nothing more to fetch.
// 
// Example 2:
// Current Rotation = 1: this has happened:
// - Turn 1: White plays a card
// - Turn 2: White moves
// - Turn 3: White neutral move is skipped
// Fetched Rotation = 2.
// White's last seen turn is 3.
// The "max turn" (of rotation 2) is 6.
//
// Is "last seen turn" allowed for the "fetched rotation"?
// Verification: 1 + (last seen turn / 3) = 1 + 3/3 = 1 + 1 = 2 (Same as fetched rotation.)
//
// Note: Even though the current rotation is not the same as the fetched rotation we allow this!
// -------------------------------------
function player_rotation_find_max_turn_nr_and_validate(
    game_id: integer,
    fetched_rotation_nr: integer, // The rotation the client is fetching.
    last_seen_turn_nr: integer
): integer {

    val max_turn_nr = fetched_rotation_nr * 3;


    require(last_seen_turn_nr != max_turn_nr, "game_id " + game_id + " - Why ask for more turns when you have already seen the last turn of this rotation: " + last_seen_turn_nr + ".");
    require(last_seen_turn_nr < max_turn_nr, "game_id " + game_id + " -The last seen turn: " + last_seen_turn_nr + " is already beyond the reach of this rotation, rotation nr: " + fetched_rotation_nr + ".");
 
    // Is "last seen turn" allowed for the "fetched rotation"?
    // (If he [last_seen_turn_nr] is the last turn of the (current) rotation, we'll look at the the next rotation).
    val calc_rotation_nr = player_rotation_calc_allowed_fetched_rotation_nr(last_seen_turn_nr); 
    require(calc_rotation_nr == fetched_rotation_nr, "game_id " + game_id + " -Given last_seen_turn: " + last_seen_turn_nr + " is not within fetched rotation: " + fetched_rotation_nr);



    return max_turn_nr;
}

function player_rotation_calc_allowed_fetched_rotation_nr(last_seen_turn_nr: integer): integer {
    return 1 + last_seen_turn_nr / 3;
}

// -------------------------------------
// Look for logical errors when comparing last seen turn/rotation to current turn/rotation.
// We also prevent the player from fetching his/her own rotation.
// It's not strictly an error, but most likely the client lost count or something, so we better give an error early.
// -------------------------------------
function player_rotation_validate_curr_vs_last_seen(
    game_id: integer,
    fetched_rotation_nr: integer, // The rotation the client is fetching.
    current_rotation_nr: integer, // The rotation from the db.
) {
    val curr_next_rot_nr = current_rotation_nr + 1;
    require(fetched_rotation_nr == current_rotation_nr or fetched_rotation_nr == curr_next_rot_nr, 
        "game_id " + game_id + ". You want to fetch rotation: " + fetched_rotation_nr + 
        ". But the current rotation is " + current_rotation_nr + ", out of sync. Did you forget to save a move?");
}

// -------------------------------------
// Get the player rotation
//
// This function will return all actions (all turns) that a player did before the turn shifted 
// to the other player, but only turns that came after the given [last_seen_turn]. 
// 
// Note on performance:
// To speed things up, we want to return everything the client needs in one single query (all "turns").
// This way we can minimize the number of DB roundtrips.
// -------------------------------------
function player_rotation_get_all_actions(
    game_id: integer, 
    fetching_rotation_nr: integer, // The rotation number to get actions for
    max_turn_nr_of_the_fetched_rotation: integer,
    minimal_game: minimal_game_result, 
    last_seen_turn: integer,
    otd: opponent_timeout_data,
    calc_timeout: boolean, // If "true" the node must calculate the timeout.
    g_end_data: game_end_data?
): player_rotation_actions? {

    val recent_turns = (t: turn) @* {
        t.game == minimal_game.game,
        t.number > last_seen_turn,
        t.number <= max_turn_nr_of_the_fetched_rotation}  
        (@sort nr = t.number, t.turn_type, trn = t);
    
    var turns_found = recent_turns.size();
    if (turns_found == 0) { 
        // Let's exit early (since we wan't to do minimal SELECTs)
        log("game_id " + game_id + " - Nothing new to fetch. last_seen_turn: " + last_seen_turn + ", max_turn_nr_of_the_player_rotation: " + max_turn_nr_of_the_fetched_rotation);
        return null; 
    } 

    log("game_id " + game_id + " - Found " + turns_found + " turns to fetch! last_seen_turn: " + last_seen_turn + ", max_turn_nr_of_the_player_rotation: " + max_turn_nr_of_the_fetched_rotation);

    // The idea is that this variable will be updated without gaps, else sorting is broken.
    var return_turn_nr: integer = last_seen_turn;  // The new last seen turn nr
    var rotate_color: boolean = false;

    // If we have a non-skipped turn, these will get filled with data
    var card_played_data: card_played_data? = null;
    var primary_move: move_full_data? = null;
    var extra_move: move_full_data? = null;

    // We go through all found new turns and act depending on the [turn_type].
    for(recent_turn in recent_turns) {

        when (recent_turn.turn_type) {
            turn_type.WHITE_CARD_SKIPPED,
            turn_type.BLACK_CARD_SKIPPED -> {
                // No card was played. All we do is count up the turn.
                if(recent_turn.nr != return_turn_nr + 1) 
                { 
                    log("game_id " + game_id + " - ERROR: Card played should be first thing seen, last seen turn was " + return_turn_nr + ", but card has turn nr: " + recent_turn.nr);
                }
                return_turn_nr = recent_turn.nr; 
            }
            turn_type.WHITE_CARD,
            turn_type.BLACK_CARD -> {
                // A card was played, we must gather info 
                if(recent_turn.nr != return_turn_nr + 1) 
                { 
                    log("game_id " + game_id + " - ERROR: Card played should be first thing seen, last seen turn was " + return_turn_nr + ", but card has turn nr: " + recent_turn.nr);
                }
                card_played_data = card_played_data_get(recent_turn.trn, recent_turn.turn_type, recent_turn.nr);
                return_turn_nr = recent_turn.nr;
            }
            turn_type.WHITE_MOVE_SKIPPED, 
            turn_type.BLACK_MOVE_SKIPPED -> {
                // Even skipped moves can have a lot of events on them.
                if(recent_turn.nr != return_turn_nr + 1) 
                { 
                    log("game_id " + game_id + " - ERROR: Something wrong with the order, last seen turn was " + return_turn_nr + ", but move has turn nr: " + recent_turn.nr);
                }
                return_turn_nr = recent_turn.nr; 

                // A move was played, we must gather info
                primary_move = move_full_data_get(
                    game_id = game_id,  
                    is_skipped_move = true, 
                    t = recent_turn.trn, 
                    turn_type = recent_turn.turn_type, 
                    turn_nr = recent_turn.nr, 
                    minimal_game = minimal_game
                );

            }
            turn_type.WHITE_MOVE, 
            turn_type.BLACK_MOVE -> {
                // Regular move
                if(recent_turn.nr != return_turn_nr + 1) 
                { 
                    log("game_id " + game_id + " - ERROR: Something wrong with the order, last seen turn was " + return_turn_nr + ", but move has turn nr: " + recent_turn.nr);
                }
                return_turn_nr = recent_turn.nr; 

                // A move was played, we must gather info
                primary_move = move_full_data_get(
                    game_id = game_id,  
                    is_skipped_move = false, 
                    t = recent_turn.trn, 
                    turn_type = recent_turn.turn_type, 
                    turn_nr = recent_turn.nr, 
                    minimal_game = minimal_game
                );
            }
            turn_type.NEUTRAL_MOVE_1_SKIPPED, 
            turn_type.NEUTRAL_MOVE_2_SKIPPED -> {
                // Typical case.
                if(recent_turn.nr != return_turn_nr + 1) 
                { 
                    log("game_id " + game_id + " - ERROR: Something wrong with the order, last seen turn was " + return_turn_nr + ", but move has turn nr: " + recent_turn.nr);
                }
                return_turn_nr = recent_turn.nr; // Kind of unusal that the opponent would send only the skipped turn, but yeah.
                rotate_color = true;
                extra_move = null; // Nothing happenend! 
            }
            turn_type.NEUTRAL_MOVE_1_HIJACKED, 
            turn_type.NEUTRAL_MOVE_2_HIJACKED -> {
                // Double move.
                if(recent_turn.nr != return_turn_nr + 1) 
                { 
                    log("game_id " + game_id + " - ERROR: Something wrong with the order, last seen turn was " + return_turn_nr + ", but move has turn nr: " + recent_turn.nr);
                }
                return_turn_nr = recent_turn.nr; // Kind of unusal that the opponent would send only the skipped turn, but yeah.
                rotate_color = true;

                // This is just one extra normal move.
                // We fetch the data without knowing it's actually a rather special thing.
                extra_move = move_full_data_get(
                    game_id = game_id,  
                    is_skipped_move = false, 
                    t = recent_turn.trn, 
                    turn_type = recent_turn.turn_type, 
                    turn_nr = recent_turn.nr, 
                    minimal_game = minimal_game
                );
            }
            turn_type.NEUTRAL_MOVE_1, 
            turn_type.NEUTRAL_MOVE_2 -> {
                log("game_id " + game_id + " - ERROR: Not used in v1.0.");
            }
            else -> {
                log("game_id " + game_id + " - ERROR: Unknown turn type: " + recent_turn.turn_type);
            }
        }

    }

    // Some sanity checks.
    if (return_turn_nr > max_turn_nr_of_the_fetched_rotation) {
        log("game_id " + game_id + "ERROR: return_turn_nr > max_turn_nr, return_turn_nr: " + return_turn_nr + ", max_turn_nr: " + max_turn_nr_of_the_fetched_rotation);
    }
    if (return_turn_nr == max_turn_nr_of_the_fetched_rotation and not rotate_color) {
        log("game_id " + game_id + "ERROR: return_turn_nr == max_turn_nr and not rotate_color, return_turn_nr: " + return_turn_nr + ", max_turn_nr: " + max_turn_nr_of_the_fetched_rotation);
    }

    var ti: timeout_data? = null;
    if (calc_timeout) {
        // Get current time
        // Note: it's hard to get the current time from within a query, 
        // since we cannot use [op_context.last_block_time] here.
        var curr_time_ms: timestamp = 0; 
        val maybe_curr_time_ms = block @? {} (ts = .timestamp, @omit @sort_desc .block_height ) limit 1;
        if (maybe_curr_time_ms != null) { // During automated testing there are no blocks, so we cannot "require()" here
            curr_time_ms = maybe_curr_time_ms.ts;
        }

        // It's convenient that the node returns information about opponent's timeout status.
        val opp_timeout: boolean = game_timeout_calc_core(game_id, curr_time_ms, otd);

        ti = game_timeout_build_timeout_data(opp_timeout, otd, minimal_game.total_time_left_since_player_rotation_ms, curr_time_ms, minimal_game.game_created_at);
    }

    return player_rotation_actions(
        curr_turn_nr = return_turn_nr, // <- Should be the last seen turn, if our @sort works
        rotate_color = rotate_color,
        card_played_data = card_played_data,
        primary_move = primary_move,
        extra_move = extra_move, 
        timeout_data = ti,
        game_end_data = g_end_data
    );

} 