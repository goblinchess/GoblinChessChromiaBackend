




// ------------------------------------------------------------
// Holds everything that might have happen after the player
// made their move, which is:
// 1. The most recent turn number
// 2. Are we ready to rotate color?
// 3. The opponent's card played (if any), 
// 4. The opponent's move.
// 5. The neutral move (usually null, but for double moves this is important).
// 6. Timeout 
// 
// NOTE: It's not trivial how to interpret the content of this struct!
// Why do we have the [rotate_color] flag? It's not strictly needed.
// (The client could look at the [curr_turn_nr] and calculate the [rotate_color] flag.)
//
// Example: If the client recives a struct containing this data: 
//     a) [card_played_data] is null, 
//     b) [primary_move] has a value, and 
//     c) [extra_move] is null.
// ... it's trivial to figure out that the opponent skipped playing a card but made a move. 
// But we don't know if the opponent submitted the [extra_move] or not,
// so we have to look at the [curr_turn_nr] to figure that out.
// 
// How do we know the [rotate_color] from this info?
// Answer: If our last_seen_turn is 3, and the [curr_turn_nr] is 6,
// we know that the opponent has created 3 turns on the node, 
// where the [extra_move] was empty (which is the usual case).
// Using the lingo of this dApp, we have a full "color rotation",
// which means that the opponent's turn is over, client should urge the player
// to make a move, start the player's clock etc.
// ------------------------------------------------------------
struct color_rotation_actions {
    // 1. The most recent turn number
    // The most recent turn number, if this struct is only partly filled with data 
    // (opponent only played a card), the client must use this when asking for the move.
    curr_turn_nr: integer; 

    // 2. Rotate color
    rotate_color: boolean; // True if the current player's turn is over, and the other color should take over.

    // ----------------------
    // 3. Card data
    // ----------------------
    // If the [curr_turn_nr] indicates that opponent has played a card, 
    // but this is null, then it means that the card was skipped.
    card_played_data: card_played_data? = null;

    // ----------------------
    // 4. Move data
    // ----------------------
    // If the [curr_turn_nr] indicates that opponent has moved, 
    // but this is null, then it means that the move was skipped.
    primary_move: move_full_data? = null;

    // ----------------------
    // 5. Neutral move
    // ----------------------
    // If the [curr_turn_nr] indicates that the neutral move has been completed,
    // but this is null, then it means that the move was skipped.
    // Note, for double moves, this will be the second move.
    extra_move: move_full_data? = null;

    // ----------------------
    // 6. Time-related info
    // ----------------------
    // Only filled with data if the [calc_timeout] flag is set to "true".
    timeout_data: timeout_data? = null;
}



