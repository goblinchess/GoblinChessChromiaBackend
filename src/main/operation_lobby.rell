


// -------------------------------------
// Lobby 
// -------------------------------------


// We are entering the lobby.
// Requires that we're not already in a game.
operation enter_lobby(game_type_str: text) {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];
     
    val playa = player@ {.signer == current_signer};

    val g_type = game_type.value(game_type_str);

    val existing_lobby = lobby@? {.player == playa, .game_type == g_type};

    if (existing_lobby == null) {

        // Background/Requirements:
        // Before a player can enter the lobby (s)he must terminate any old (unfinished) game
        // (since there can only be one ongoing game per player).
        // However, if this fails we won't allow the player to enter the lobby.
        val (maximal_game, game_time, opp_timeout_data) = maximal_game_and_timeout_data_get(current_signer);
        if (maximal_game != null) {
            // We have an ongoing game, so we must try to terminate it.
            val all_clear: boolean = game_timeout_any_player_if_possible(maximal_game, game_time!!, opp_timeout_data!!);
            require(all_clear, "Cannot enter lobby, since you are in an existing game that has not been timed out yet.");
        }

        log("player_id = " + playa.rowid.to_integer() + " - enter_lobby");
        create lobby(
        .player = playa,
        .game_type = g_type,
        .last_heartbeat = op_context.last_block_time
        );
    }
    else {
        // Didn't exactly expected this, but it is not a problem really.
        log("player_id = " + playa.rowid.to_integer() + " - enter_lobby but there is already a lobby entry");
        update existing_lobby (.last_heartbeat = op_context.last_block_time);
    }
}

// If we already have entered the lobby (via "enter_lobby()") we are required to 
// regularly bump the time of our lobby ently so that other players know we are
// still waiting.
operation bump_lobby() {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];
     
    val playa = player@ {.signer == current_signer};

    // Yes we allow multiple entries at once.
    val existing_lobby = lobby@* {.player == playa};

    if (existing_lobby.size() == 0) {

        log("player_id = " + playa.rowid.to_integer() + " - bump_lobby but there is no lobby entry to bump?");
        val minimal_game = minimal_game_data_get(current_signer);

        // Since we're updating an existing lobby entry, the most 
        // likely explanation is that someone created a game with us 
        // and removed our entry. So if we have an ongoing game, 
        // we'll pick it up next time we call "in_game()" and all is well.
        // But if we don't have a game here something is broken.
        require(minimal_game != null, "Cannot bump our lobby entry, and there is no new game either.");
    }
    else {
        // Don't even log it, this will happen often
        update lobby@* {.player == playa} (.last_heartbeat = op_context.last_block_time);
    }
}


// Exit all lobby entries. 
// 
// This is when the player is kind enough to click the "stop waiting" button,
// instead of just shutting down the game.
operation exit_lobby() {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];
     
    val playa = player@ {.signer == current_signer};
    
    // Remove caller's lobby
    log("player_id = " + playa.rowid.to_integer() + " - exit_lobby");
    delete lobby@* {.player == playa};
}







