


// -------------------------------------
// Lobby 
// -------------------------------------

operation enter_lobby(game_type_str: text) {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];
     
    val playa = player@ {.signer == current_signer};

    val g_type = game_type.value(game_type_str);

    val existing_lobby = lobby@? {.player == playa, .game_type == g_type};

    if (existing_lobby == null) {

        // Background/Requirements:
        // Before a player can enter the lobby (s)he must terminate any old (unfinished) game
        // (since there can only be one ongoing game per player).
        // However, if this fails we won't allow the player to enter the lobby.
        val all_clear: boolean = game_timeout_any_player_if_possible(playa);
        require(all_clear, "Cannot enter lobby, since you are in an existing game that has not been timed out yet.");

        log("player_id = " + playa.rowid.to_integer() + " - enter_lobby");
        create lobby(
        .player = playa,
        .game_type = g_type,
        .last_heartbeat = op_context.last_block_time
        );
    }
    else {
        // Don't even log it, this will happen often
        update existing_lobby (.last_heartbeat = op_context.last_block_time);
    }
}


// Exit all lobby entries. 
// 
// This is when the player is kind enough to click the "stop waiting" button,
// instead of just shutting down the game.
operation exit_lobby() {

    val current_signers = op_context.get_signers();
    val current_signer = current_signers[0];
     
    val playa = player@ {.signer == current_signer};
    
    // Remove caller's lobby
    log("player_id = " + playa.rowid.to_integer() + " - exit_lobby");
    delete lobby@* {.player == playa};
}







